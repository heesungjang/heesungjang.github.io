{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/PropTypes/",
    "result": {"data":{"cur":{"id":"94537d61-c6ac-5197-bddf-c1044d01b206","html":"<h2 id=\"️-proptypes를-통한-props-검증\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-proptypes%EB%A5%BC-%ED%86%B5%ED%95%9C-props-%EA%B2%80%EC%A6%9D\" aria-label=\"️ proptypes를 통한 props 검증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ propTypes를 통한 props 검증</h2>\n<ul>\n<li>리액트에서는 부모 컴포넌트에서 자식 컴포넌트로 props를 통해 데이터를 전달한다.</li>\n<li>이 과정에서 <code class=\"language-text\">prop-types</code>를 사용하면 전달되는 props의 타입(type)을 미리 지정하여 원치않는 데이터의 값이나 타입이 전달되는것을 보다 쉽게 디버깅할 수 있게 해준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> favoriteNumber <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>안녕하세요<span class=\"token punctuation\">,</span> 제 이름은 <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> 입니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>children 값은 <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span> 입니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>제가 좋아하는 숫자는 <span class=\"token punctuation\">{</span>favoriteNumber<span class=\"token punctuation\">}</span> 입니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n  favoriteNumber<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>예제 코드에서는 name과 favoriteNumber로 부모에서 자식 컴포넌트로 전달되는 props를 검증한다.</p>\n</blockquote>\n<p><code class=\"language-text\">name props</code>는 문자열 전달받는다고 미리 설정해줬다. 만약 부모 컴포넌트에서 name으로 문자열이 아닌 숫자 또는 객체 형태의 데이터를 넘겨주게 되면 console통해 경고 메세지를 전달해준다.</p>\n<h3 id=\"-proptypes를-반드시-사용해야-할까\" style=\"position:relative;\"><a href=\"#-proptypes%EB%A5%BC-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\" proptypes를 반드시 사용해야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 propTypes를 반드시 사용해야 할까?</h3>\n<ul>\n<li>propTypes를 반드시 사용할 필요하는 없다.</li>\n<li>proptypes로 props의 타입들을 미리 설정하고 검증할 수 있지만 console에 경고를 보여줄뿐 타입 에러로 어플리케이션이 멈추지는 않는다.</li>\n</ul>\n<p>하지만 React를 사용한 프로젝트의 규모가 커지고 다른 개발자들과 협업을 해야하는 상황이라면 해당 컴포넌트에 어떤 props가 필요한지 쉽게 알 수 있어 개발 능률이 높아질 수 있다.</p>\n<p>또한 콘솔에 나타나는 proptype 에러 메세지를 통해 효율적인 디버깅이 가능해진다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-proptypes%EB%A5%BC-%ED%86%B5%ED%95%9C-props-%EA%B2%80%EC%A6%9D\">✏️ propTypes를 통한 props 검증</a></p>\n<ul>\n<li><a href=\"#-proptypes%EB%A5%BC-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">📌 propTypes를 반드시 사용해야 할까?</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"✏️ propTypes를 통한 props 검증 리액트에서는 부모 컴포넌트에서 자식 컴포넌트로 props를 통해 데이터를 전달한다. 이 과정에서 를 사용하면 전달되는 props의 타입(type)을 미리 지정하여 원치않는 데이터의 값이나 타입이 전달되는것을 보다 쉽게 디버깅할 수 있게 해준다. 예제 코드에서는 name과 favoriteNumber로 부모에서 자식 컴포넌트로 전달되는 props를 검증한다. 는 문자열 전달받는다고 미리 설정해줬다. 만약 부모 컴포넌트에서 name으로 문자열이 아닌 숫자 또는 객체 형태의 데이터를 넘겨주게 되면 console통해 경고 메세지를 전달해준다. 📌 propTypes를 반드시 사용해야 할까? propTypes를 반드시 사용할 필요하는 없다. proptypes로 props의 타입들을 미리 설정하고 검증할 수 있지만 console에 경고를 보여줄뿐 타입 에러로 어플리케이션이 멈추지는 않는다. 하지만 React를 사용한 프로젝트의 규모가 커지고 다른 개발…","frontmatter":{"date":"May 05, 2021","title":"prop-types","categories":"Frontend","author":"장희성","emoji":"✏️"},"fields":{"slug":"/PropTypes/"}},"next":null,"prev":{"id":"8a9e106b-1929-5a84-a15e-1bb52606d373","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/4d59f32d-1320-4bb6-b0a7-75be546e7a6d/Function%20(11).png\" alt=\"\"></p>\n<h4 id=\"이미-알고있는-내용\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8-%EC%95%8C%EA%B3%A0%EC%9E%88%EB%8A%94-%EB%82%B4%EC%9A%A9\" aria-label=\"이미 알고있는 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미 알고있는 내용</h4>\n<p>📌 React의 useState 훅으로 지역 상태를 관리 할 수 있다.</p>\n<ul>\n<li>props 다른 곳에서 사용하고 싶다면 props로 전달해야지만 자식 컴포넌트에서 상태 값에 접근이 가능하다.</li>\n<li>props로 여러 컴포넌트에게 상태 값을 내려 주기에는 한계가 있다.</li>\n</ul>\n<p>📌 Redux</p>\n<ul>\n<li>store를 통해 전역적으로 컴포넌트가 상태 값에 접근이 가능하다.</li>\n</ul>\n<h2 id=\"-contextapi는-무엇\" style=\"position:relative;\"><a href=\"#-contextapi%EB%8A%94-%EB%AC%B4%EC%97%87\" aria-label=\" contextapi는 무엇 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 contextAPI는 무엇?</h2>\n<blockquote>\n<p>Redux와 비슷한듯 다른 contextAPI를 정리해보자</p>\n</blockquote>\n<h3 id=\"contextapi-특징\" style=\"position:relative;\"><a href=\"#contextapi-%ED%8A%B9%EC%A7%95\" aria-label=\"contextapi 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>contextAPI 특징</h3>\n<ul>\n<li>React의 내장 기능으로 redux와는 다르게 리액트에서만 사용할 수 있다.</li>\n<li>Provider로 최상위 컴포넌트를 감싸 상태 값을 내려주는 형식이다.</li>\n</ul>\n<h2 id=\"-contextapi-사용법\" style=\"position:relative;\"><a href=\"#-contextapi-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\" contextapi 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 contextAPI 사용법</h2>\n<p><strong>1. Context를 만들자</strong></p>\n<ul>\n<li>redux를 사용할때 slice별로 누어서 사용했던것과 비슷한 개념인거 같다.</li>\n<li>initState에 초기 상태값을 객체 형태로 전달한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UserContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> initState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>2. Action을 만들어준다</strong></p>\n<ul>\n<li>액션을 지정하여 타입 별로 다른 로직을 진행시킬 수 있다.</li>\n<li>이것도 redux에서도 action을 만들어 사용했던걸 생각하면 정말 비슷하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> type Action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"UPDATE\"</span><span class=\"token punctuation\">;</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. Reducer를 만들어준다</strong></p>\n<ul>\n<li>Action이 발생했을때 상태 값을 변경해주는 reducer를 작성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Action <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/actions/gameBoardAction'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UserState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/contexts/gameBoardContext'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> updateUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> UserState<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> Action<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">UserState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'UPDATE'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 변경되는 payload 로직 작성</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unhandled action'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. Provider를 만들어 하위 컴포넌트를 감싸준다</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ContextProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> userDispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>userReducer<span class=\"token punctuation\">,</span> initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>UserContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>UserContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr/>\n<h3 id=\"state-값에는-어떻게-접근할까\" style=\"position:relative;\"><a href=\"#state-%EA%B0%92%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%91%EA%B7%BC%ED%95%A0%EA%B9%8C\" aria-label=\"state 값에는 어떻게 접근할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State 값에는 어떻게 접근할까?</h3>\n<ul>\n<li>Redux를 사용할때 useSelector를 사용해서 store의 상태 값에 접근한것과 비슷하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>UserContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Redux가 Context API를 기반으로 만들어진 것이기 때문일까? Context API와 Redux는 사용법과 그 구조에 조금 차이가 있을 뿐 전체적으로 많음 부분이 유사하다.</p>\n</blockquote>\n<p>리디북스에 벨로퍼트님이 redux와 contextAPI는 비슷해 보이지만 사용하는 목적이나 기능적 제한들이 분명 다르다고 정리해 놓은 블로그를 봤는데 나중에 시간이나면 그 부분도 추가해서 정리해야겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%9D%B4%EB%AF%B8-%EC%95%8C%EA%B3%A0%EC%9E%88%EB%8A%94-%EB%82%B4%EC%9A%A9\">이미 알고있는 내용</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-contextapi%EB%8A%94-%EB%AC%B4%EC%97%87\">🤔 contextAPI는 무엇?</a></p>\n<ul>\n<li><a href=\"#contextapi-%ED%8A%B9%EC%A7%95\">contextAPI 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-contextapi-%EC%82%AC%EC%9A%A9%EB%B2%95\">🤔 contextAPI 사용법</a></p>\n<ul>\n<li><a href=\"#state-%EA%B0%92%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%91%EA%B7%BC%ED%95%A0%EA%B9%8C\">State 값에는 어떻게 접근할까?</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 19, 2021","title":"리액트 contextAPI","categories":"Frontend","author":"장희성","emoji":"✏️"},"fields":{"slug":"/contextApi/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/PropTypes/","nextSlug":"","prevSlug":"/contextApi/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}