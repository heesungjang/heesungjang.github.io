{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/PropTypes/",
    "result": {"data":{"cur":{"id":"94537d61-c6ac-5197-bddf-c1044d01b206","html":"<h2 id=\"️-proptypes를-통한-props-검증\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-proptypes%EB%A5%BC-%ED%86%B5%ED%95%9C-props-%EA%B2%80%EC%A6%9D\" aria-label=\"️ proptypes를 통한 props 검증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ propTypes를 통한 props 검증</h2>\n<ul>\n<li>리액트에서는 부모 컴포넌트에서 자식 컴포넌트로 props를 통해 데이터를 전달한다.</li>\n<li>이 과정에서 <code class=\"language-text\">prop-types</code>를 사용하면 전달되는 props의 타입(type)을 미리 지정하여 원치않는 데이터의 값이나 타입이 전달되는것을 보다 쉽게 디버깅할 수 있게 해준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> favoriteNumber <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>안녕하세요<span class=\"token punctuation\">,</span> 제 이름은 <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> 입니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>children 값은 <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span> 입니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>제가 좋아하는 숫자는 <span class=\"token punctuation\">{</span>favoriteNumber<span class=\"token punctuation\">}</span> 입니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    favoriteNumber<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>예제 코드에서는 name과 favoriteNumber로 부모에서 자식 컴포넌트로 전달되는 props를 검증한다.</p>\n</blockquote>\n<p><code class=\"language-text\">name props</code>는 문자열 전달받는다고 미리 설정해줬다. 만약 부모 컴포넌트에서 name으로 문자열이 아닌 숫자 또는 객체 형태의 데이터를 넘겨주게 되면 console통해 경고 메세지를 전달해준다.</p>\n<h3 id=\"-proptypes를-반드시-사용해야-할까\" style=\"position:relative;\"><a href=\"#-proptypes%EB%A5%BC-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\" proptypes를 반드시 사용해야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 propTypes를 반드시 사용해야 할까?</h3>\n<ul>\n<li>propTypes를 반드시 사용할 필요하는 없다.</li>\n<li>proptypes로 props의 타입들을 미리 설정하고 검증할 수 있지만 console에 경고를 보여줄뿐 타입 에러로 어플리케이션이 멈추지는 않는다.</li>\n</ul>\n<p>하지만 React를 사용한 프로젝트의 규모가 커지고 다른 개발자들과 협업을 해야하는 상황이라면 해당 컴포넌트에 어떤 props가 필요한지 쉽게 알 수 있어 개발 능률이 높아질 수 있다.</p>\n<p>또한 콘솔에 나타나는 proptype 에러 메세지를 통해 효율적인 디버깅이 가능해진다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-proptypes%EB%A5%BC-%ED%86%B5%ED%95%9C-props-%EA%B2%80%EC%A6%9D\">✏️ propTypes를 통한 props 검증</a></p>\n<ul>\n<li><a href=\"#-proptypes%EB%A5%BC-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">📌 propTypes를 반드시 사용해야 할까?</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"✏️ propTypes를 통한 props 검증 리액트에서는 부모 컴포넌트에서 자식 컴포넌트로 props를 통해 데이터를 전달한다. 이 과정에서 를 사용하면 전달되는 props의 타입(type)을 미리 지정하여 원치않는 데이터의 값이나 타입이 전달되는것을 보다 쉽게 디버깅할 수 있게 해준다. 예제 코드에서는 name과 favoriteNumber로 부모에서 자식 컴포넌트로 전달되는 props를 검증한다. 는 문자열 전달받는다고 미리 설정해줬다. 만약 부모 컴포넌트에서 name으로 문자열이 아닌 숫자 또는 객체 형태의 데이터를 넘겨주게 되면 console통해 경고 메세지를 전달해준다. 📌 propTypes를 반드시 사용해야 할까? propTypes를 반드시 사용할 필요하는 없다. proptypes로 props의 타입들을 미리 설정하고 검증할 수 있지만 console에 경고를 보여줄뿐 타입 에러로 어플리케이션이 멈추지는 않는다. 하지만 React를 사용한 프로젝트의 규모가 커지고 다른 개발…","frontmatter":{"date":"May 05, 2021","title":"리액트 contextAPI","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/PropTypes/"}},"next":null,"prev":{"id":"c277c893-40fb-5b2b-bc9e-3c69d1738d03","html":"<h3 id=\"️-primitive-type원시-타입\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-primitive-type%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85\" aria-label=\"️ primitive type원시 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ Primitive Type(원시 타입)</h3>\n<p>원시 타입 예제:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span></code></pre></div>\n<p>여기서 age 변수는 28이라는 number type을 할당받는다.</p>\n<p>number는 원시 값 혹은 <strong>primitive value</strong>라고 부른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Max'</span> \n<span class=\"token keyword\">var</span> isMale <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>자바스크립트의 뼈대가 되는 타입, 즉 가장 심플한 자바스크립트 빌등 블럭을 원시 타입이라고 부르고 <strong>number 말고도 string, null, undefined, bloolean을 포함해 5가지가 존재한다</strong>.</p>\n<h3 id=\"️-reference-type참조-타입\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-reference-type%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85\" aria-label=\"️ reference type참조 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ Reference Type(참조 타입)</h3>\n<p>참조 타입 예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> hobbies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Sports'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cooking'</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>위에 예시 코드에서 person은 잘 알고있는 객체와 배열이다.</p>\n<p><strong>객체와 배열의 타입은 참조 타입이며</strong> 여기서 중요하게 봐야하는 부분은 참조 타입이지만 원시 타입의 값들을 가진다는 것이다.</p>\n<hr/>\n<h3 id=\"-원시-참조-타입은-어떻게-다른가\" style=\"position:relative;\"><a href=\"#-%EC%9B%90%EC%8B%9C-%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EA%B0%80\" aria-label=\" 원시 참조 타입은 어떻게 다른가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 원시, 참조 타입은 어떻게 다른가?</h3>\n<blockquote>\n<p>자바스크립트 언어는 2가지의 memory를 가진다.</p>\n</blockquote>\n<ol>\n<li><strong>Stack</strong></li>\n<li><strong>Heap</strong></li>\n</ol>\n<p><strong>스택</strong>은 기본적으로 액세스하기 쉬운 메모리로서 항목을 스택으로 관리한다. 스택에 올라갈수 있는 데이터는 숫자, 문자열, bloolean같이  크기를 미리 알수있는 타입이다.</p>\n<p><strong>힙</strong>은 정확한 크기와 구조를 미리 결정할 수 없는 항목의 메모리이다. 객체와 배열은 런타임중에 변경이 일어날 수 있는 힙으로 이동한다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/9d96dfcd-49a3-43e2-9d4b-bbb7786eff0b/ref-type-pointer.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>원시 타입은 변수에 할당될 때 메모리 상에 고정된 크기로 저장되며 해당 변수가 원시 데이터의 값을 보관한다.</p>\n</li>\n<li>\n<p>원시 타입 자료형은 모두 변수 선언, 초기화, 할당시 값이 저장된 메모리 영역에 직접적으로 접근한다.</p>\n</li>\n<li>\n<p>즉 변수에 새 값이 할당 될 때 변수에 할당된 메모리 블럭에 저장된 값을 바로 변경된다.</p>\n</li>\n<li>\n<p>참조 타입 데이터는 크기가 정해져 있지 않고 변수에 할당될 때 값이 직접 해당 변수에 저장될 수 없으며, 변수에는 데이터에 대한 참조만 저장된다.</p>\n</li>\n<li>\n<p>변수의 값이 저장된 힙(Heap) 메모리의 주소값을 저장한다. 참조 타입은 변수의 값이 저장된 메모리 블럭의 주소를 가지고 있고, 자바스크립트 엔진이 변수가 가지고 있는 메모리 주소를 이용해서 변수의 값에 접근한다.</p>\n</li>\n</ul>\n<hr/>\n<h2 id=\"이걸-왜-알아야-할까\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B1%B8-%EC%99%9C-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"이걸 왜 알아야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이걸 왜 알아야 할까?</h2>\n<p>자바스크립트를 사용해서 어플리케이션을 개발하면 객체를 사용하는일이 많다. 객체는 참조 타입이고 참조 타입의 작동하는 원리를 잘못알고 있다면 이해하지 못하는 일이 발생할 수 있다.</p>\n<p><strong>📌 각 변수 간에 원시 타입 데이터를 복사할 경우 데이터의 값이 복사된다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span><span class=\"token operator\">></span> <span class=\"token number\">100</span>\n</code></pre></div>\n<hr/>\n<p>아래 예시 코드에서 person이라는 변수는 무엇을 저장하고 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>a)  ({ name: ‘Max’ }) 객체</p>\n<p>b) 객체를의 메모리 위치 포인터</p>\n<p>c) name의 메로리 위치 포인터</p>\n<p><strong>정답은 b - 객체를의 메모리 위치 포인터이다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> newPerson <span class=\"token operator\">=</span> person\nnewPerson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Anna'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  print<span class=\"token operator\">?</span></code></pre></div>\n<p>위 예시 코드에서 어떤 값이 콘솔에 출력될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascipt\"><pre class=\"language-javascipt\"><code class=\"language-javascipt\">&gt; &quot;Anna&quot;</code></pre></div>\n<p>당연하거 아닌가?라고 생각할 수 있지만 왜 Anna가 출력되는지 정확하게 이해하고 넘어가야 한다.</p>\n<p><strong>📌 각 변수 간에 참조 타입 데이터를 복사할 경우 데이터의 참조가 복사된다.</strong></p>\n<ul>\n<li>‘person’과 ‘newPerson’는 동일한 참조를 담고 있으며, 따라서 동일한 객체를 가르킨다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EF%B8%8F-primitive-type%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85\">✏️ Primitive Type(원시 타입)</a></li>\n<li><a href=\"#%EF%B8%8F-reference-type%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85\">✏️ Reference Type(참조 타입)</a></li>\n<li><a href=\"#-%EC%9B%90%EC%8B%9C-%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EA%B0%80\">🤔 원시, 참조 타입은 어떻게 다른가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B4%EA%B1%B8-%EC%99%9C-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0%EA%B9%8C\">이걸 왜 알아야 할까?</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 13, 2021","title":"reference vs. primitive","categories":"DeepDive","author":"장희성","emoji":"✏️"},"fields":{"slug":"/referenceAndPrimitive/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/PropTypes/","nextSlug":"","prevSlug":"/referenceAndPrimitive/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}