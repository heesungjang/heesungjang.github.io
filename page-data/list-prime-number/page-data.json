{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/list-prime-number/",
    "result": {"data":{"cur":{"id":"b5485ebb-eead-5946-a44d-dd718d63d516","html":"<h1 id=\"1문제\" style=\"position:relative;\"><a href=\"#1%EB%AC%B8%EC%A0%9C\" aria-label=\"1문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.문제</h1>\n<p>정수를 입력 했을 때, <strong>그 정수 이하의 소수를 모두 반환하시오</strong>. 소수는 자신보다 작은 두 개의 자연수를 곱하여 만들 수 없는 1보다 큰 자연수이다.</p>\n<blockquote>\n<p>Input = 20</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>>[2, 3, 5, 7, 11, 13, 17, 19]</code></pre></div>\n<h2 id=\"접근법\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC%EB%B2%95\" aria-label=\"접근법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>접근법:</h2>\n<ol>\n<li>\n<p><strong>소수는 자기와 1외에는 나눌 수 없다</strong>.</p>\n</li>\n<li>\n<p><strong>소수는 2부터 n - 1까지 어떤 소수로도 나누어 떨어지지 않는다</strong>.\n(소수인지 확인하고자 하는 수가 n 일때, n이 2와3으로 나누어 떨어지지 않는다면 2x2인 4와 2x3인 6으로도 나누어 떨어지지 않는다.)</p>\n</li>\n<li>\n<p><strong>n의 제좁근 이하의 어떤 소수로도 나누어 떨어지지 않는다</strong>.</p>\n</li>\n</ol>\n<h2 id=\"풀이법\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4%EB%B2%95\" aria-label=\"풀이법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이법:</h2>\n<h3 id=\"python-code\" style=\"position:relative;\"><a href=\"#python-code\" aria-label=\"python code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python code:</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_prime_list_under_number</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    prime_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> prime_list<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            prime_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> prime_list\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%A0%91%EA%B7%BC%EB%B2%95\">접근법:</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4%EB%B2%95\">풀이법:</a></p>\n<ul>\n<li><a href=\"#python-code\">python code:</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"1.문제 정수를 입력 했을 때, 그 정수 이하의 소수를 모두 반환하시오. 소수는 자신보다 작은 두 개의 자연수를 곱하여 만들 수 없는 1보다 큰 자연수이다. Input = 20 접근법: 소수는 자기와 1외에는 나눌 수 없다. 소수는 2부터 n - 1까지 어떤 소수로도 나누어 떨어지지 않는다.\n(소수인지 확인하고자 하는 수가 n 일때, n이 2와3으로 나누어 떨어지지 않는다면 2x2인 4와 2x3인 6으로도 나누어 떨어지지 않는다.) n의 제좁근 이하의 어떤 소수로도 나누어 떨어지지 않는다. 풀이법: python code: 접근법: 풀이법: python code:","frontmatter":{"date":"June 14, 2021","title":"소수 나열하기 [알고리즘]","categories":"알고리즘","author":"장희성","emoji":"✏️"},"fields":{"slug":"/list-prime-number/"}},"next":{"id":"ae311174-ce0e-5eac-a6ea-e11be304518d","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/e5164da3-d8c9-422a-b50f-3b40b6dd6d49/Function%20(8).png\" alt=\"\">></p>\n<p>“왜 redux가 꼭 필요한가..?” 🤔 문득 이런 생각이 들었다.</p>\n<p>항상 프로젝트를 진행할때 redux를 써야할까? 라는 의문을 가지면서도 이미 redux를 통해 전역으로 state를 관리하는데 익숙해져서 (툴킷이 너무 편해서..) 그냥 너무나 자연스럽게 리덕스를 사용해왔다. 이번 기회에 정확히 redux가 어떤 이점이 있는지 또 로컬에서 상태 값을 관리할때와 어떤 차이가 있는지 정리 해보자.</p>\n<h2 id=\"state상태\" style=\"position:relative;\"><a href=\"#state%EC%83%81%ED%83%9C\" aria-label=\"state상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State(상태)</h2>\n<p>일단 react에서 상태란 어떤걸 의미하는가?</p>\n<p>리액트 컴포넌트에서 <strong>동적인 값을 상태(state)</strong> 라고 부른다. 사용자 인터랙션을 통해 컴포넌트의 상태값이 동적으로 바뀔 경우에는 상태를 관리하는 것이 필요하다.</p>\n<p>16.7버전 리액트 이전에는 클래스 컴포넌트에서 this를 binding해서 상태값을 관리했다면 <strong>React hooks</strong>의 내장 함수인 <strong>useState()</strong> 가 나오면서 이를 통해 함수형 컴포넌트에서도 상태를 관리할 수 있다.</p>\n<blockquote>\n<ul>\n<li>리액트 컴포넌트 또한 함수이며 jsx를 리턴하기 위해서는 함수 호출이 있어야한다.</li>\n</ul>\n</blockquote>\n<ul>\n<li>리액트는 첫 실행에서 index.js를 통해서 컴포넌트들을 연속적으로 호출하며 모든 컴포넌트의 호출이 끝나면 다시 호출하지 않는다.</li>\n<li>e.g) let variable의 값을 온클릭 이벤트에서 업데이트해도 컴포넌트는 다시 리랜더링하지 않는다.</li>\n</ul>\n<h2 id=\"-그렇다면-전역-상태-관리는-무엇이고-왜-필요한가\" style=\"position:relative;\"><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\" 그렇다면 전역 상태 관리는 무엇이고 왜 필요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 그렇다면 전역 상태 관리는 무엇이고? 왜 필요한가?</h2>\n<blockquote>\n<p>먼저 전역 상태라는 단어는 ‘전역’이라는 단어와 ‘상태’라는 단어의 합성어이다.</p>\n</blockquote>\n<ul>\n<li>보통 애플리케이션에서 관리하는 상태는 다음 두 가지로 나눌 수 있다.</li>\n<li>외부에서 서버 통신으로 받는 동적인 데이터</li>\n<li>애플리케이션 UI를 결정하는 상태 (ex. isClosed)</li>\n</ul>\n<p>이런식으로 렌더링하기 위한 동적인 데이터나 사용자 액션을 제어하기 위한 UI 상태 두 종류이다. UI 상태와 같이 컴포넌트 안에서 로컬로 사용되는 경우 관리하기가 상대적으로 쉽다.</p>\n<h3 id=\"전역-상태를-고민하는-시점\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C%EB%A5%BC-%EA%B3%A0%EB%AF%BC%ED%95%98%EB%8A%94-%EC%8B%9C%EC%A0%90\" aria-label=\"전역 상태를 고민하는 시점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 상태를 고민하는 시점</h3>\n<p>로컬에서 UI요소를 결정 해주는것처럼 특정 컴포넌트에 특화되어있는 상태를 만들때는 어디서 이 상태를 정의해주고 관리하며 사용할까? 라는 고민을 할 필요가 없다.</p>\n<p>하지만 비동기 요청으로 외부에서 데이터를 불러오게 되면 데이터를 어디서 언제 호출해서 관리해야할까? 라는 고민이 생기기 시작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>searchResult<span class=\"token punctuation\">,</span> setSearchResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 게시물 리스트 배열</span>\n\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MainSearchApi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> keyword<span class=\"token punctuation\">,</span> pageSize<span class=\"token punctuation\">,</span> pageNum <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> instance\n            <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"util/search\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    keyword<span class=\"token punctuation\">,</span>\n                    pageSize<span class=\"token punctuation\">,</span>\n                    pageNum<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">setSearchResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setSearchResult</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setTotalPage</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>totalPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setNextPage</span><span class=\"token punctuation\">(</span>currentPage <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setCurrentPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예시로 위에 코드는 실제 UFO 프로젝트에서 검색 페이지에서 유저가 입력한 <strong>search term</strong>으로 서버에 요청을 보내 검색 결과를 받아오는 부분이다. 컴포넌트가 실행되면 useEffect()안에 비동기 요청을 하고 검색 결과가 담긴 배열을 <strong>setSearchResult()</strong> 에 담아준다.</p>\n<p>저장된 데이터(state)은 화면을 그려주는 presenter 컴포넌트로 props 넘겨준다.</p>\n<p>리액트에서는 이렇게 데이터를 부모 컴포넌트에서 자식 컴포넌트로 데이터를 넘겨줄수 있다.</p>\n<p>부모에서 자식으로 또 그 자식이 부모 컴포넌트로서 또다른 자식 컴포넌트에게 데이터를 전달할수 있는데 이것을 <strong>Prop Drilling</strong>이라고 한다.</p>\n<blockquote>\n<p>문제는 이렇게 데이터를 전달하다보면 처음 데이터를 요청해서 받는 부모 컴포넌트와 컴포넌트 트리 가장 하단에 있는 자식 컴포넌트와의 거리가 너무 멀어질때 발생한다.</p>\n</blockquote>\n<p>예를들어 A 컴포넌트에서 데이터를 받아 Z 컴포넌트에 전달한다면 중간에 위치하는 B~Y 컴포넌트는 오로지 데이터를 전달하기 위해 props를 받아 전달하는 비효율이 발생한다.</p>\n<h3 id=\"그렇다면-데이터를-각각-필요한-컴포넌트에서호출하면-되는거-아닌가\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B0%81%EA%B0%81-%ED%95%84%EC%9A%94%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%ED%98%B8%EC%B6%9C%ED%95%98%EB%A9%B4-%EB%90%98%EB%8A%94%EA%B1%B0-%EC%95%84%EB%8B%8C%EA%B0%80\" aria-label=\"그렇다면 데이터를 각각 필요한 컴포넌트에서호출하면 되는거 아닌가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 데이터를 각각 필요한 컴포넌트에서호출하면 되는거 아닌가?</h3>\n<p>📌 불필요한 네트워크 비용을 줄이기 위해서 필요한 시점에 데이터를 불러오는 것이 맞다. 그리고 데이터를 필요로 하는 컴포넌트에서 데이터를 호출하는 것이 응집도가 높아지는 방향이다. 여기서 발생하는 문제점은 API의 응답 구조와 컴포넌트 트리가 일치하리라는 보장이 없다는 것이다.</p>\n<p>그렇다면 불필요한 네트워크 비용을 줄이면서 컴포넌트들이 외부에 데이터를 공유할수는 없을까?에서 Redux와같은 전역 상태 툴의 필요성을 느끼게된다.</p>\n<h2 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h2>\n<p>리덕스 자세하게 정리하는 블로그는 다음에 써보도록 하고 redux가 무엇을 도와주는지 간단하게 정리하고 넘어가겠다.</p>\n<p>리덕스는 리액트에서 가장 많이 사용되는 상태 관리 라이브러리중 하나이다. 리덕스를 사용하면 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜서 효율적으로 관리할 수 있다. 최근 Redux Toolkit이 등장하면서 더욱 더 이 효율성은 빛을 보이고 있다.</p>\n<p>리덕스는 상태를 store에 저장하고 관리한다. 이 store는 모든 컴포넌트에서 접근이 가능하기 때문에 컴포넌트 위치에 상관없이 언제 어디서나 store내에 있는 상태에 접근이 가능하다.</p>\n<h3 id=\"redux-사용예시\" style=\"position:relative;\"><a href=\"#redux-%EC%82%AC%EC%9A%A9%EC%98%88%EC%8B%9C\" aria-label=\"redux 사용예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux 사용예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// App.js</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLoggedInUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkAdminDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// eslint-disable-next-line react-hooks/exhaustive-deps</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">,</span> isLoggedIn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//user.js (redux파일)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> checkLoggedInUser <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"user/check/login\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> thunkAPI</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 로컬 스토리지 토큰 불러온다.</span>\n        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 토큰 decode를 통해서 현재 로그인한 유저 id 가져오기</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user_id<span class=\"token operator\">:</span> userId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 서버에 유저 정보 요청</span>\n            <span class=\"token keyword\">const</span> loggedInUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userApi<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loggedInUser<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> loggedInUser<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> thunkAPI<span class=\"token punctuation\">.</span><span class=\"token function\">rejectWithValue</span><span class=\"token punctuation\">(</span>loggedInUser<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 에러 발생시 에러 메세지 반환</span>\n            Sentry<span class=\"token punctuation\">.</span><span class=\"token function\">captureException</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">error, 유저로그인유무 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> thunkAPI<span class=\"token punctuation\">.</span><span class=\"token function\">rejectWithValue</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예시는 유저의 로그인 유뮤를 검사해주는 코드의 일부를 가져왔다.</p>\n<ol>\n<li>react가 컴포넌트를 랜더하고 App.js가 실행되면 현재 유저가 로그인을 했는지 안했는지를 확인하고 리덕스에서 관리하는 isLoggedIn 값을 true 또는 false로 변경한다. 이렇게 저장된 유저의 로그인 상태값은 store를 통해서 모든 컴포넌트에서 접근이 가능해진다.</li>\n</ol>\n<blockquote>\n<p>더이상 props를 전달해주거나 다른 곳에서도 값이 쓰일 경우 state를 lifting 해줄 필요가 없다. 필요로 하는 값은 redux에 접근하여 useSelector 로 원하는 값을 가져오면 된다. 컴포넌트의 구조 변경에도 자유로워진 것 같고 코드가 훨씬 깔끔해졌다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#state%EC%83%81%ED%83%9C\">State(상태)</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\">🤔 그렇다면 전역 상태 관리는 무엇이고? 왜 필요한가?</a></p>\n<ul>\n<li><a href=\"#%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C%EB%A5%BC-%EA%B3%A0%EB%AF%BC%ED%95%98%EB%8A%94-%EC%8B%9C%EC%A0%90\">전역 상태를 고민하는 시점</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B0%81%EA%B0%81-%ED%95%84%EC%9A%94%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%ED%98%B8%EC%B6%9C%ED%95%98%EB%A9%B4-%EB%90%98%EB%8A%94%EA%B1%B0-%EC%95%84%EB%8B%8C%EA%B0%80\">그렇다면 데이터를 각각 필요한 컴포넌트에서호출하면 되는거 아닌가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#redux\">Redux</a></p>\n<ul>\n<li><a href=\"#redux-%EC%82%AC%EC%9A%A9%EC%98%88%EC%8B%9C\">Redux 사용예시</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 10, 2021","title":"useState? redux?","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/useStateOrRedux/"}},"prev":{"id":"26405f24-b15d-5534-a823-ea5a701198dd","html":"<h1 id=\"1-문제\" style=\"position:relative;\"><a href=\"#1-%EB%AC%B8%EC%A0%9C\" aria-label=\"1 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 문제</h1>\n<p>0과 1로만 이루어진 문자열이 주어졌을 때, 이 문자를 모두 0, 혹은 모두 1로 같게 만들어야 한다. 할 수 있는 행동은 연속된 하나의 숫자를 잡고 모두 뒤집는 것 이다. 뒤는 것은 1을 0으로, 0을 1로 바꾸는 것을 의미한다. <strong>주어진 문자열을 모두 0 혹은 모두 1로 같게 만드는 최소 횟수를 반환하시오.</strong></p>\n<h2 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제:</h2>\n<p>예를 들어 S=0001100 일 때,</p>\n<ol>\n<li>\n<p>전체를 뒤집으면 1110011이 된다.</p>\n</li>\n<li>\n<p>4번째 문자부터 5번째 문자까지 뒤집으면 1111111이 되어서 2번 만에 모두 같은 숫자로 만들 수 있다.</p>\n</li>\n<li>\n<p>하지만, 처음부터 4번째 문자부터 5번째 문자까지 문자를 뒤집으면 한 번에 0000000이 되어서 1번 만에 모두 같은 숫자로 만들 수 있다.</p>\n</li>\n</ol>\n<h2 id=\"접근법\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC%EB%B2%95\" aria-label=\"접근법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>접근법:</h2>\n<blockquote>\n<ol>\n<li>00011000에서 연속된 하나의 숫자, 즉 연속된 문자열들을 하나의 집합으로 구분하여 생각하자.</li>\n<li>예를들어, 00011000은 000 11 000 이렇게 구간별로 나눌 수 있다.</li>\n<li>따라서 이 경우에 1이 나오는 구간의 문자열들을 뒤집어주면 최소 횟수로 모든 숫자를 같게 만들 수 있다.</li>\n</ol>\n</blockquote>\n<h2 id=\"풀이법\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4%EB%B2%95\" aria-label=\"풀이법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이법:</h2>\n<h4 id=\"그렇다면-어떻게-구간을-나누고-뒤집는-횟수를-카운트할-수-있을까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%EA%B0%84%EC%9D%84-%EB%82%98%EB%88%84%EA%B3%A0-%EB%92%A4%EC%A7%91%EB%8A%94-%ED%9A%9F%EC%88%98%EB%A5%BC-%EC%B9%B4%EC%9A%B4%ED%8A%B8%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"그렇다면 어떻게 구간을 나누고 뒤집는 횟수를 카운트할 수 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 어떻게 구간을 나누고, 뒤집는 횟수를 카운트할 수 있을까?</h4>\n<blockquote>\n<ol>\n<li>for문으로 문자열 내의 원소를 앞뒤로 비교하고,</li>\n<li>현재 원소와 다음에 오는 원소의 값이 같이 않다면, 새로운 구간이 시작되는 부분이고 만약 새로 시작하는 구간의 문자열이 1이라면, <strong>전체 문자열을 0으로 변경하기 위해 뒤집어야 하는 구간</strong>이기 때문에 count_to_all_zero에 +1을 해준다.</li>\n<li>반대로 새로운 구간의 문자열이 0이라면 count_to_all_one에 1+을 해준다.</li>\n<li>마지막으로 둘의 카운트를 비교하여 최소값을 반환한다.</li>\n</ol>\n</blockquote>\n<h3 id=\"python-code\" style=\"position:relative;\"><a href=\"#python-code\" aria-label=\"python code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python code:</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_count_to_turn_out_to_all_zero_or_all_one</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count_to_all_zero <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    count_to_all_one <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">if</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">:</span>\n        count_to_all_one <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n        count_to_all_zero <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token keyword\">if</span> string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> string<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> string<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">:</span>\n                count_to_all_one <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> string<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n                count_to_all_zero <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>count_to_all_one<span class=\"token punctuation\">,</span> count_to_all_zero<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"주의점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"주의점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*주의점:</h3>\n<blockquote>\n<p>문자열의 첫 문자는 이전 문자열의 원소와 비교하지 못하기 때문에 for문이 시작하기 전에 카운트를 해줘야 한다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%98%88%EC%A0%9C\">예제:</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%91%EA%B7%BC%EB%B2%95\">접근법:</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4%EB%B2%95\">풀이법:</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%EA%B0%84%EC%9D%84-%EB%82%98%EB%88%84%EA%B3%A0-%EB%92%A4%EC%A7%91%EB%8A%94-%ED%9A%9F%EC%88%98%EB%A5%BC-%EC%B9%B4%EC%9A%B4%ED%8A%B8%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C\">그렇다면 어떻게 구간을 나누고, 뒤집는 횟수를 카운트할 수 있을까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#python-code\">python code:</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90\">*주의점:</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 14, 2021","title":"문자열 뒤집기","categories":"알고리즘","author":"장희성","emoji":"✏️"},"fields":{"slug":"/reverse-string/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/list-prime-number/","nextSlug":"/useStateOrRedux/","prevSlug":"/reverse-string/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}