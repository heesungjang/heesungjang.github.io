{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/graphql-intro/",
    "result": {"data":{"cur":{"id":"06ac48d0-a881-5ea2-ab15-bda0459dff1e","html":"<h1 id=\"graphql이-도대체-뭐야\" style=\"position:relative;\"><a href=\"#graphql%EC%9D%B4-%EB%8F%84%EB%8C%80%EC%B2%B4-%EB%AD%90%EC%95%BC\" aria-label=\"graphql이 도대체 뭐야 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL이 도대체 뭐야?</h1>\n<p><strong>GraphQL 얘기를 주변에서 너무 많이 들었다.</strong> 프로젝트 발표에서도 면접에서도 GraphQL 관련 질문을 받았는데..그동안 계속된 프로젝트로 새로운 기술을 배울 시간이 없었는데 도대체 GraphQL 뭔지 공부 해봐야겠다.</p>\n<p>GraphQL docs에서 제공한는 튜토이얼을 따라하기 전에 개념부터 잡고가야겠다는 생각을 했는데 마침!! kakao tech에서 정리해놓은 블로그 글을 찾았다.</p>\n<p><a href=\"https://tech.kakao.com/2019/08/01/graphql-basic/\">카카오 테크 참고 링크</a></p>\n<p>GraphQL(이하 gql)은 페이스북에서만든 쿼리 언어이고 아직 세상에 나온지 얼마되지 않은 새로운 친구이지만 2016년부터 가파르게 사용자가 늘어나고 있다고 한다.</p>\n<p>위에서도 언급했듯이 gql은 sql과 마찬가지로 데이터를 효율적으로 요청하기 위해 사용되는 언어이지만 구조적을 큰 차이가 있고 사용 목적 또한 다르다.</p>\n<p>sql문이 데이터베이스에서 데이터를 효율적을 가져오기 위해서 사용된다면 <strong>gql은 웹 클라이언트가 서버로부터 효율적을 데이터를 받아오기 위해서 만들어진 쿼리 언어이다.</strong></p>\n<ul>\n<li>sql: 주로 백엔드 시스템에서 작성하고 호출</li>\n<li>gql: 클라이언트 시스템에서 작성하고 호출</li>\n</ul>\n<p>웹 클라이언트가 서버로부터 데이터를 받아오는 쿼리 언어? 여기서부터 개념이 헷갈리기 시작했다. 내가 기존에 알고있던 쿼리언어는 백엔드 서버에서 클라이언트 요청을 받아 데이터베이스에 접근해 알맞는 데이터를 찾기위해 사용되는것으로 알고있는데.. <strong>클라이언트에서 쿼리문을 작성한다고?</strong></p>\n<p>사용 예시와 기존 RestAPI를 비교하면서 조금은 의문점이 풀렸다.</p>\n<h2 id=\"rest-api의-어떤-부분을-해결하려고-했나\" style=\"position:relative;\"><a href=\"#rest-api%EC%9D%98-%EC%96%B4%EB%96%A4-%EB%B6%80%EB%B6%84%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EB%A0%A4%EA%B3%A0-%ED%96%88%EB%82%98\" aria-label=\"rest api의 어떤 부분을 해결하려고 했나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API의 어떤 부분을 해결하려고 했나?</h2>\n<blockquote>\n<p>Rest API와 비교: <strong>REST API는 URL, METHOD등을 조합하기 때문에 다양한 Endpoint가 존재 합니다.</strong> 반면, <strong>gql은 단 하나의 Endpoint가 존재 합니다.</strong>\n출처: <a href=\"https://tech.kakao.com/2019/08/01/graphql-basic/\">카카오 테크 REST API와 비교</a></p>\n</blockquote>\n<h3 id=\"-rest-api는-다양한-endpoint가-존재하고-gql은-단-하나의-endpoint만-존재한다\" style=\"position:relative;\"><a href=\"#-rest-api%EB%8A%94-%EB%8B%A4%EC%96%91%ED%95%9C-endpoint%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EA%B3%A0-gql%EC%9D%80-%EB%8B%A8-%ED%95%98%EB%82%98%EC%9D%98-endpoint%EB%A7%8C-%EC%A1%B4%EC%9E%AC%ED%95%9C%EB%8B%A4\" aria-label=\" rest api는 다양한 endpoint가 존재하고 gql은 단 하나의 endpoint만 존재한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 Rest API는 다양한 Endpoint가 존재하고, gql은 단 하나의 Endpoint만 존재한다?</h3>\n<p>기존에 RestAPI 방법론으로 api를 설계한다면 필요한 resource 즉 클라이언트에서 필요한 데이터 set 별로 별도의 endpoint를 가지게 된다. 가장 최근에 진행했던 <a href=\"https://github.com/heesungjang/UFO-frontend\">UFO</a> 프로젝트의 api 문서를 살펴보자.</p>\n<ul>\n<li>/free/post</li>\n<li>/free/post/:post_id</li>\n<li>/free/post/:post_id/view_count</li>\n<li>/free/post/:post_id (delete)</li>\n<li>/free/post/:post_id (put)</li>\n<li>/free/post/:post_id/like</li>\n</ul>\n<p>이런식으로 비슷하지만 다른 API를 생성하게되고 만약 서비스가 더 커지게 된다면 관리해야하는 endpoint가 N(resource)+1만큼 많아지게 된다.</p>\n<h3 id=\"-overfetching--underfetching\" style=\"position:relative;\"><a href=\"#-overfetching--underfetching\" aria-label=\" overfetching  underfetching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 OverFetching &#x26; UnderFetching</h3>\n<p>기존 RestAPI은 Over fehing과 Under ftching이라는 문제점도 가지고있다. 예를들어 아래 데이터는 UFO 프로젝트에서 유저 정보를 요청하면 받아오는 값이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\nok<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nresult<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\nuser_id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\nemail<span class=\"token operator\">:</span> <span class=\"token string\">\"user1@naver.com\"</span><span class=\"token punctuation\">,</span>\nnickname<span class=\"token operator\">:</span> \"user1\npassword<span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">,</span>\nschool_auth<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\nschool_email<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\ncountry_id<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\nuniv_id<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\ncreatedAt<span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-26T10:35:39.000Z\"</span><span class=\"token punctuation\">,</span>\nupdatedAt<span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-26T10:35:39.000Z\"</span><span class=\"token punctuation\">,</span>\nuniversity<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\ncountry<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/d0b27e62-adcb-41de-9f86-f929fa30eef2/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%206.26.56.png\" alt=\"\"></p>\n<p>어떤 문제가 있을까? 바로 <strong>OverFetching</strong>이다. 유저 정보가 모두 필요한 부분도 있겠지만 만약 로그인 사용자의 닉네임을 헤더에 보여주기 위해서 데이터를 요청할때 유저의 닉네임을 사용하기 위해 다른 불필요한 데이터까지 모두 받아오게 되는 경우가 발생한다.</p>\n<h3 id=\"graphql로-데이터-받아오기\" style=\"position:relative;\"><a href=\"#graphql%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%9B%EC%95%84%EC%98%A4%EA%B8%B0\" aria-label=\"graphql로 데이터 받아오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL로 데이터 받아오기</h3>\n<p>반면 gql은 이러한 Over-fetching 문제가 발생하지 않는다. 데이터를 요청하는 시점에 어떤 정보를 원하는지에 대한 컨트롤이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">요청 쿼리\nquery<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token operator\">:</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    nickname\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n반환 쿼리\n<span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"user\"</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"nickname: \"</span>jane\"<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Under Fetching</strong>도 gql에서 손쉽게 해결이 가능한거 같다. under fetchin은 어떤 특정 데이터를 가져오기 이전에 다수의 데이터 요청이 필요한 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javacript\"><pre class=\"language-javacript\"><code class=\"language-javacript\">/feed/ --&gt; /notify/ --&gt; /user/1\n</code></pre></div>\n<p>이런식으로 하나의 유요한 정보를 받기 위해서 그때마다 여러개의 api요청을 연속적으로 호출하게된다. 단순히 요청의 단계가 많아지는 문제도 있지만 비동기 처리를 하는것도 어려워질수 있을꺼 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">요청<span class=\"token operator\">:</span>\nquery <span class=\"token punctuation\">{</span>\n feed <span class=\"token punctuation\">{</span>\n  comments\n  likeNumber\n <span class=\"token punctuation\">}</span>\n notifications <span class=\"token punctuation\">{</span>\n  isRead\n <span class=\"token punctuation\">}</span>\n user <span class=\"token punctuation\">{</span>\n  username\n  profilePit\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n응답<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">{</span>\n feed<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n   comments<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   likeNumber<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n notifications<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    isRead<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>반면 gql은 한 번의 쿼리에 내가 정확하게 원하는 정보들을 받아올 수 있기 때문에, 여러 개의 endpoint를 가지지 않고 여러번의 API를 호출하는 일이 없어진다는 장점이있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#rest-api%EC%9D%98-%EC%96%B4%EB%96%A4-%EB%B6%80%EB%B6%84%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EB%A0%A4%EA%B3%A0-%ED%96%88%EB%82%98\">REST API의 어떤 부분을 해결하려고 했나?</a></p>\n<ul>\n<li><a href=\"#-rest-api%EB%8A%94-%EB%8B%A4%EC%96%91%ED%95%9C-endpoint%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EA%B3%A0-gql%EC%9D%80-%EB%8B%A8-%ED%95%98%EB%82%98%EC%9D%98-endpoint%EB%A7%8C-%EC%A1%B4%EC%9E%AC%ED%95%9C%EB%8B%A4\">🤔 Rest API는 다양한 Endpoint가 존재하고, gql은 단 하나의 Endpoint만 존재한다?</a></li>\n<li><a href=\"#-overfetching--underfetching\">🤔 OverFetching &#x26; UnderFetching</a></li>\n<li><a href=\"#graphql%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%9B%EC%95%84%EC%98%A4%EA%B8%B0\">GraphQL로 데이터 받아오기</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"GraphQL이 도대체 뭐야? GraphQL 얘기를 주변에서 너무 많이 들었다. 프로젝트 발표에서도 면접에서도 GraphQL 관련 질문을 받았는데..그동안 계속된 프로젝트로 새로운 기술을 배울 시간이 없었는데 도대체 GraphQL 뭔지 공부 해봐야겠다. GraphQL docs에서 제공한는 튜토이얼을 따라하기 전에 개념부터 잡고가야겠다는 생각을 했는데 마침!! kakao tech에서 정리해놓은 블로그 글을 찾았다. 카카오 테크 참고 링크 GraphQL(이하 gql)은 페이스북에서만든 쿼리 언어이고 아직 세상에 나온지 얼마되지 않은 새로운 친구이지만 2016년부터 가파르게 사용자가 늘어나고 있다고 한다. 위에서도 언급했듯이 gql은 sql과 마찬가지로 데이터를 효율적으로 요청하기 위해 사용되는 언어이지만 구조적을 큰 차이가 있고 사용 목적 또한 다르다. sql문이 데이터베이스에서 데이터를 효율적을 가져오기 위해서 사용된다면 gql은 웹 클라이언트가 서버로부터 효율적을 데이터를 받아오기…","frontmatter":{"date":"September 16, 2021","title":"Graphql은 REST API의 어떤점을 해결해주나?","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/graphql-intro/"}},"next":{"id":"f56663de-dfb4-5414-84bd-5f0adc8a5d2c","html":"<p>⚠️ 작성이 완료되지 않은 글입니다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/605a1e46-f718-4d5c-9fb1-0080e1de6408/banner.jpeg\" alt=\"\"></p>\n<blockquote>\n<p>“You can throw paint against the wall and eventually you might get most of the wall, but until you go up to the wall with a brush, you’ll never get the corners. 🖌️ ”</p>\n</blockquote>\n<h1 id=\"whate-is-testing\" style=\"position:relative;\"><a href=\"#whate-is-testing\" aria-label=\"whate is testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Whate is testing?</h1>\n<p>소프트웨어 관점에서의 테스트는 애플리케이션이 개발자가 설계한 <strong>요구 사항에 맞게 작동하는지 검증하는 과정이다</strong>.</p>\n<p>테스트는 모든 개발이 끝났을때와 같이 특정 개발 단계에서 이루어지는 것이 아니며 <strong>모든 개발 과정의 각 단계에서 꾸준이 이뤄진다</strong>.</p>\n<p>프로토타입핑 단계에서 UX를 미리 검증하거나 API 통신중에 요청 또는 응답의 값을 확인하는 것, 마크업이 끝난 후 디자인 시안과 비교해보는 것 등이 모두 테스트에 해당한다.</p>\n<p>테스트 과정은 전체적인 작업 흐름의 속도를 올려 개발을 빠르게 진행하기 위해, 그리고 새로운 변경 사항이 발생했을때 기존 코드를 무너트리지 않는다는 확신을 갖기 위해 꼭 필요한 부분이다.</p>\n<p>테스트를 위한 라이브러리 만큼 테스트의 종류 또한 여러가지가 있지만 “범위”에 따라 크게 <strong>단위(Unit), 통합(Integration), E2E(End to End) 테스트</strong>로 나눌 수 있다.</p>\n<p>자바스크립트 테스트 도구인 testing library를 개발한 kend d dodds는 각각의 테스트 단계를 아래와 같이 정의한다.</p>\n<h2 id=\"-what-are-the-testings\" style=\"position:relative;\"><a href=\"#-what-are-the-testings\" aria-label=\" what are the testings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 What are the testings?</h2>\n<ul>\n<li>\n<p><strong>End to End 테스트</strong>: 실제 사용자가 사용하는 것과 같은 조건에서 전체 시스템을 테스트 (functional testing 또는 e2e라고도 불림) 하는 것.</p>\n</li>\n<li>\n<p><strong>Intergration(통합) 테스트</strong> : 어플리케이션의 여러 부분들이 통합되어 제대로 상호작용 되는지 테스트 하는 것.</p>\n</li>\n<li>\n<p><strong>Unit 테스트</strong> : 실행되는 알고리즘 등이 잘 작동하는지 작은 단위를 떼어 내어 분리된 환경에서 테스트 하는 것.</p>\n</li>\n<li>\n<p><strong>Static(정적) 테스트</strong>: syntax 에러 또는 type 에러와 같이 코드를 실행시키지 않고 테스트를 하는 것</p>\n</li>\n</ul>\n<h2 id=\"1️⃣-unit-테스트\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-unit-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"1️⃣ unit 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ Unit 테스트</h2>\n<p>유닛 테스트 예제를 살펴보자. 어플리케이션에 greeting이라는 함수가 있고 이 함수는 성과 이름을 받아 인사말을 리턴하는 기능을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello Mr./Mrs. </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예상하는 값이 리턴되는지 어떻게 테스트 할 수 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should output firstName and lastName'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Moataz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mahmoud'</span><span class=\"token punctuation\">)</span>\n <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Mr./Mrs. Moataz Mahmoud'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"2️⃣-integration-테스트\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-integration-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"2️⃣ integration 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ Integration 테스트</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>render<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">,</span> waitForElementToBeRemoved<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'test/app-test-utils'</span>\n<span class=\"token keyword\">import</span> userEvent <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/user-event'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>build<span class=\"token punctuation\">,</span> fake<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@jackfranklin/test-data-bot'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>rest<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'msw'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>setupServer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'msw/node'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>handlers<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'test/server-handlers'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'../app'</span>\n\n<span class=\"token keyword\">const</span> buildLoginForm <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">userName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// integration tests typically only mock HTTP requests via MSW</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">setupServer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>handlers<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> server<span class=\"token punctuation\">.</span><span class=\"token function\">resetHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">logging in displays the user's username</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The custom render returns a promise that resolves when the app has</span>\n  <span class=\"token comment\">//   finished loading (if you're server rendering, you may not need this).</span>\n  <span class=\"token comment\">// The custom render also allows you to specify your initial route</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>route<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">buildLoginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">username</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span>\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">password</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">submit</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">waitForElementToBeRemoved</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">loading</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// assert whatever you need to verify the user is logged in</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"3️⃣-end-to-end-테스트\" style=\"position:relative;\"><a href=\"#3%EF%B8%8F%E2%83%A3-end-to-end-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"3️⃣ end to end 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3️⃣ End to End 테스트</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>generate<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'todo-test-utils'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo app'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should work for a typical user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> generate<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> generate<span class=\"token punctuation\">.</span><span class=\"token function\">todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// here we're going through the registration process.</span>\n    <span class=\"token comment\">// I'll typically only have one e2e test that does this.</span>\n    <span class=\"token comment\">// the rest of the tests will hit the same endpoint</span>\n    <span class=\"token comment\">// that the app does so we can skip navigating through that experience.</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visitApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">register</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">username</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">password</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">login</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">add todo</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{enter}'</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo-0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.value'</span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'complete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo-0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'complete'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// etc...</span>\n    <span class=\"token comment\">// My E2E tests typically behave similar to how a user would.</span>\n    <span class=\"token comment\">// They can sometimes be quite long.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-what-are-the-testings\">🤔 What are the testings?</a></li>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-unit-%ED%85%8C%EC%8A%A4%ED%8A%B8\">1️⃣ Unit 테스트</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-integration-%ED%85%8C%EC%8A%A4%ED%8A%B8\">2️⃣ Integration 테스트</a></li>\n<li><a href=\"#3%EF%B8%8F%E2%83%A3-end-to-end-%ED%85%8C%EC%8A%A4%ED%8A%B8\">3️⃣ End to End 테스트</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 10, 2021","title":"Static vs Unit vs Integration vs E2E","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/javascriptTesting/"}},"prev":{"id":"a9953497-4f57-5dae-bd57-5a4d6a8655d4","html":"<blockquote>\n<p><a href=\"https://velog.io/@heesungj7/Node-ApolloServer-GraphQL-API-%EC%84%9C%EB%B2%84-%EB%A7%8C%EB%93%A4%EA%B8%B01\">1. GraphQL이란?\n</a>에서 GraphQL(이하 gql)의 개념을 정리하면서 gql은 클라이언트 시스템에서 쿼리문을 작성한다고 짚고 넘어갔다.</p>\n</blockquote>\n<h2 id=\"-클라이언트에서-쿼리를-작성하면-실제-어떤-장점이-있을까\" style=\"position:relative;\"><a href=\"#-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B4-%EC%8B%A4%EC%A0%9C-%EC%96%B4%EB%96%A4-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\" 클라이언트에서 쿼리를 작성하면 실제 어떤 장점이 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 클라이언트에서 쿼리를 작성하면 실제 어떤 장점이 있을까?</h2>\n<p>프로젝트를 진행하다보면 서버 개발자와 소통은 필수이다. 진행중인 서비스를 위해서 어떤한 데이터 또는 리소스를 사용자에게 보여주려면 일단 서버로부터 데이터를 받아와야한다. 이제는 웹 서비스를 “웹 어플리케이션”이라고 부를만큼 많은 액션들이 동적으로 일어나는데 당연히 데이터의 변화도 많고 그만큼 서버-클라이언트의 데이터 통신도 많다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">/</span>free<span class=\"token operator\">/</span>post\n<span class=\"token operator\">/</span>free<span class=\"token operator\">/</span>post<span class=\"token operator\">/</span><span class=\"token operator\">:</span>post_id\n<span class=\"token operator\">/</span>free<span class=\"token operator\">/</span>post<span class=\"token operator\">/</span><span class=\"token operator\">:</span>post_id<span class=\"token operator\">/</span>view_count\n<span class=\"token operator\">/</span>free<span class=\"token operator\">/</span>post<span class=\"token operator\">/</span><span class=\"token operator\">:</span><span class=\"token function\">post_id</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">/</span>free<span class=\"token operator\">/</span>post<span class=\"token operator\">/</span><span class=\"token operator\">:</span><span class=\"token function\">post_id</span> <span class=\"token punctuation\">(</span>put<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">/</span>free<span class=\"token operator\">/</span>post<span class=\"token operator\">/</span><span class=\"token operator\">:</span>post_id<span class=\"token operator\">/</span>like</code></pre></div>\n<p>백엔드 개발자는 보통 위 예시와 같은 각각의 endpoint를 만들고 프론트엔드 개발자가 이를 통해 데이터에 접근할수 있도록 공유 해야한다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/25bdccf7-e3eb-4223-904b-e9200d8bb9ce/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-17%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.19.59.png\" alt=\"\"></p>\n<p>기존 서버-클라이언트 협업 방식에서는 연동규격서라고 하는 API 명세서를 주고 받는 절차가 반드시 필요했다. 요즘은 swagger와 같이 API 문서화 자동화 툴도 많이 사용한다. 크고 작은 프로젝트를 진행하면서 이 API 명세서의 관리가 제대로 되지 않거나 인터페이스 변경 사항을 제때 문서에 반영하지 않아 프론트와 백엔드 개발자의 소통이 원할하게 이뤄지지 않는 경우를 많이 경험했다.</p>\n<h3 id=\"인트로스펙션introspection\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%8A%B8%EB%A1%9C%EC%8A%A4%ED%8E%99%EC%85%98introspection\" aria-label=\"인트로스펙션introspection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인트로스펙션(introspection)</h3>\n<p>gql은 서버 자체에서 현재 서버에 정의된 스키마의 실시간 정보를 공유를 할 수 있게하여 REST의 API 명세서 공유와 같은 문제를 해결해준다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/32bfd196-ccf9-4f1a-b343-d282f281c757/graphql-apollo-ide%20(2).png\" alt=\"\"></p>\n<p>서버에서 전체적인 <strong>데이터의 모델 (스키마)를 정의해주면</strong> 데이터의 tree 구조를 설명해주는 document가 자동으로 만들어주기 때문에 클라이언트를 작업하는 개발자는 자동적으로 만들어지는 인터랙티브한 document을 활용해서 필요한 쿼리를 만들어 사용할 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B4-%EC%8B%A4%EC%A0%9C-%EC%96%B4%EB%96%A4-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C\">🤔 클라이언트에서 쿼리를 작성하면 실제 어떤 장점이 있을까?</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B8%ED%8A%B8%EB%A1%9C%EC%8A%A4%ED%8E%99%EC%85%98introspection\">인트로스펙션(introspection)</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 17, 2021","title":"Graphql은 REST API의 어떤점을 해결해주나?","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/graphql-query-at-front/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/graphql-intro/","nextSlug":"/javascriptTesting/","prevSlug":"/graphql-query-at-front/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}