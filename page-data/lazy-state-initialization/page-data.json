{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/lazy-state-initialization/",
    "result": {"data":{"cur":{"id":"95069640-4401-5162-80c7-2e449c925977","html":"<h2 id=\"lazy-initialization-\" style=\"position:relative;\"><a href=\"#lazy-initialization-\" aria-label=\"lazy initialization  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazy initialization 🥱</h2>\n<h2 id=\"지연-초기-state\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0-state\" aria-label=\"지연 초기 state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;지연 초기 state></h2>\n<p>리액트에서 특정 함수나 실행 시간이 오래 걸리는 값 비싼 연산이 필요할때 useCallback이나 useMemo로 최적화를 한다.</p>\n<p>이번 블로그에서는 useState을 사용해서 초기 상태(state) 값을 할당할때 값 비싼 연산이 필요한 함수를 <code class=\"language-text\">useState(expensiveFunction())</code>이런식으로 바로 파라미터로 전달하면 발생하는 <strong>문제점과 해결 방법</strong>을 정리해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Greeting 컴포넌트</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GreetingComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLocalStorageValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> initialName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLocalStorageValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">></span>Name<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>name <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token string\">'Please type your name'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr/>\n<h2 id=\"예시️️\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C%EF%B8%8F%EF%B8%8F\" aria-label=\"예시️️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시🕵️‍♀️</h2>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/4c8725ce-458d-4013-8592-71e21afc198e/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.35.51.png\" alt=\"\"></p>\n<ol>\n<li>\n<p>사용자가 Input창에 이름을 입력하면 입력 값을 name 값에 업데이트하고 Hello {name}으로 사용자가 입력한 이름을 화면에 그려주는 간단한 컴포넌트이다.</p>\n</li>\n<li>\n<p>새로고침 이후에도 사용자가 마지막으로 입력한 값을 화면에 그려주기 위해서 useEffect의 의존 값을 name을 설정하고 name 값의 변화를 감지하면 localStorage에 저장하고</p>\n</li>\n<li>\n<p>컴포넌트가 리랜더링되면 useState에서 getLocalStorageValue() 함수를 통해서 로컬스토리지 값을 초기 name 값으로 설정한다.</p>\n</li>\n</ol>\n<h2 id=\"-어떤-문제가-있을까\" style=\"position:relative;\"><a href=\"#-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\" 어떤 문제가 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 어떤 문제가 있을까?</h2>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/7654a231-891b-46f4-b7b1-0a878ed5f2f7/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.45.22.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLocalStorageValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i am an expensive function!!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> initialName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 <code class=\"language-text\">getLocalStorageValue()</code> 함수안서 로그를 찍어보면 해당 함수가 인풋 창에 입력되는 네임 값이 변할때 마다 실행되고 있는걸 볼 수 있다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/9333094b-8b00-4abf-a51e-2e62dbdc84b0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.46.01.png\" alt=\"\"></p>\n<p>우리는 초기에 컴포넌트가 실행될때 딱 한번만 로컬스토리지에서 값을 받아오면 되는데 리렌더링이 발생할때 마다 불필요한 함수가 실행되는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getLocalStorageValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/d9117a2b-ce64-4314-8e35-33851d937097/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.59.32.png\" alt=\"\"></p>\n<p>이렇게 고비용 계산을 초기 initialState 값으로 전달해야 하는 경우에 함수 형태로 useState을 변경해주면 해당 함수는 컴포넌트가 첫 랜더링할때 한번만 실행되고 이후 리랜더링 상황에서는 다시 실행되지 않는다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#lazy-initialization-\">Lazy initialization 🥱</a></li>\n<li><a href=\"#%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0-state\">&#x3C;지연 초기 state></a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C%EF%B8%8F%EF%B8%8F\">예시🕵️‍♀️</a></li>\n<li><a href=\"#-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C\">❌ 어떤 문제가 있을까?</a></li>\n</ul>\n</div>","excerpt":"Lazy initialization 🥱 <지연 초기 state> 리액트에서 특정 함수나 실행 시간이 오래 걸리는 값 비싼 연산이 필요할때 useCallback이나 useMemo로 최적화를 한다. 이번 블로그에서는 useState을 사용해서 초기 상태(state) 값을 할당할때 값 비싼 연산이 필요한 함수를 이런식으로 바로 파라미터로 전달하면 발생하는 문제점과 해결 방법을 정리해보자. 예시🕵️‍♀️  사용자가 Input창에 이름을 입력하면 입력 값을 name 값에 업데이트하고 Hello {name}으로 사용자가 입력한 이름을 화면에 그려주는 간단한 컴포넌트이다. 새로고침 이후에도 사용자가 마지막으로 입력한 값을 화면에 그려주기 위해서 useEffect의 의존 값을 name을 설정하고 name 값의 변화를 감지하면 localStorage에 저장하고 컴포넌트가 리랜더링되면 useState에서 getLocalStorageValue() 함수를 통해서 로컬스토리지 값을 초기 name 값으로 설정한다…","frontmatter":{"date":"October 08, 2021","title":"useState 지연 초기 state(lazy state initialization)","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/lazy-state-initialization/"}},"next":{"id":"9c01a101-356d-5b3c-b596-bdc489812583","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/7e27d877-5adb-47ab-85e6-25ca0cb2719a/unnamed.jpeg\" alt=\"\"></p>\n<p>다들 처음 프로그래밍 언어 또는 웹 개발을 공부를 시작하면서 그 유명한 **“hello, world”**를 터미널 또는 브라우저에 찍어본 경험이 있을꺼다.</p>\n<p>DOM과 HTML을 어느정도는 알고있다면 “Hello, World”를 브라우저 화면에 쉽게 출력할 수 있을꺼라 생각한다. 또한 스크립트 태그 안에서 자바스크립트 코드를 통해 DOM 조작을하고 웹 페이지와 상호작용을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span><span class=\"token comment\">// 자바스크립트 코드&lt;/script></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<p>다양한 웹 프레임워크가 나오기 이전에는 서버에서 HTML을 생성하고 브라우저와 상호작용을 하기 위해 HTML 위에 자바스크립트 코드를 추가했다.</p>\n<p>하지만 이러한 방식은 웹 페이지가 복잡해지고 개발적으로 요구사항이 까다로워지면서 유지보수나 성능 측면에서 문제가 발생하기 시작했고 이를 해결하기 위해 우리가 알고있는 vue나 react같은 다양한 웹 프레임워크가 등장했다. 만약 지금 리액트를 사용하지 않고 서비스를 만들어여 한다면…🥲</p>\n<p>그만큼 리액트가 좋다 😅</p>\n<hr/>\n<h1 id=\"그래서-뭐-dom이-왜\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%90-dom%EC%9D%B4-%EC%99%9C\" aria-label=\"그래서 뭐 dom이 왜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 뭐 DOM이 왜?</h1>\n<p>리액트는 세계에서 가장 널리 사용되는 프런트엔드 프레임워크이고 이 블로그 시리즈 또한 결국 리액트를 조금 더 깊게 이해하고 싶은 마음에 시작했다.</p>\n<h3 id=\"-그렇다면-dom을-이해하는게-리액트를-더-잘-알기-위해서-왜-중요한가\" style=\"position:relative;\"><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-dom%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EB%8D%94-%EC%9E%98-%EC%95%8C%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%99%9C-%EC%A4%91%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\" 그렇다면 dom을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 그렇다면 DOM을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가?</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>body id<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n      <span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document\n        <span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">textContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n</code></pre></div>\n<p>위에서 사용했던 예시를 HTML 태그를 직접 작성하지 않고 자바스크립트를 사용하여 <strong>“Hello World”라는 텍스트로 div DOM 노드를 만들고 해당 DOM 노드를 문서에 삽입하여</strong> 자바스크립트 코드만으로 같은 출력 결과를 얻을 수 있다.</p>\n<blockquote>\n<p>📌 세계에서 가장 널리 사용되고 프런트엔드 프레임워크인 리액트도 DOM 노드를 만들 때 사용하는 것과 동일한 API를 사용한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'select'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>domElement<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLSelectElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>multiple<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          node<span class=\"token punctuation\">.</span>multiple <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Setting a size greater than 1 causes a select to behave like `multiple=true`, where</span>\n          <span class=\"token comment\">// it is possible that no option is selected.</span>\n          <span class=\"token comment\">//</span>\n          <span class=\"token comment\">// This is only necessary when a select in \"single selection mode\".</span>\n          node<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    domElement <span class=\"token operator\">=</span> ownerDocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElementNS</span><span class=\"token punctuation\">(</span>namespaceURI<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>namespaceURI <span class=\"token operator\">===</span> <span class=\"token constant\">HTML_NAMESPACE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">!</span>isCustomComponentTag <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span>\n          <span class=\"token string\">'[object HTMLUnknownElement]'</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token operator\">!</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>warnedUnknownTags<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        warnedUnknownTags<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">'The tag &lt;%s> is unrecognized in this browser. '</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'If you meant to render a React component, start its name with '</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'an uppercase letter.'</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> domElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리액트 소스코드의 일부분이다. 사실 이 코드가 어떤 동작을 하는지 알지는 못하지만 리액트가 흔히 말하는 어떠한 “매직”을 일으키는게 아니라 내부적으로는 우리가 알고있는 browser API를 사용해서 DOM 요소를 만들고 있다는게 중요하다.</p>\n<ul>\n<li>\n<p>React 이전에는 DOM을 직접적으로 조작하는 방식이였고 이러한 방식을 <strong>명령형(imperative) 프로그래밍</strong> 이라고 한다.</p>\n</li>\n<li>\n<p>이 방식의 문제점은 여러 이벤트 간의 연결을 파악하기 힘들다는 점이다.</p>\n</li>\n<li>\n<p>또한 DOM을 직접적으로 조작하는 것은 performance에 큰 영향을 미친다.</p>\n</li>\n</ul>\n<p>즉, 리액트는 이러한 문제점을 보안해주기 위해 기존 명령형 방식을 내부적으로 처리해서 <strong>선언형(declarative) 프로그래밍적</strong>으로 API를 사용할 수 있게 해준다.</p>\n<hr/>\n<h2 id=\"react--reactdom\" style=\"position:relative;\"><a href=\"#react--reactdom\" aria-label=\"react  reactdom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React &#x26; ReactDOM</h2>\n<p>리액트에 익숙하다면 아래 구문을 잘 알고 있을꺼다. App.js 컴포넌트를 작업하고나 새로운 컴포넌트를 만들면서 무수히 많이 작성했을꺼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>일단은 리액트의 문법인 JSX를 사용하지 않고 리액트가 제공하는 API를 통해서 직접적으로 위에서 만든 DOM 요소를 리액트 요소로 변경해보자.</p>\n<blockquote>\n<p>기억해야 할게 리액트는 리액트 네이티브와 같이 브라주저가 아닌 다른 플랫폼 개발도 지원하기 때문에 React API 외에도 각 플랫폼에 맞춰진 별도의 API를 제공한다. 웹의 경우 ReactDOM을 사용한다.</p>\n</blockquote>\n<ul>\n<li><strong>React</strong>: document.createElement()와 비슷한 React.createElement같은 메소드를 제공한다.</li>\n<li><strong>ReactDOM</strong>: DOM에 요소를 랜더링할때 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/react@17.0.0/umd/react.development.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/react-dom@17.0.0/umd/react-dom.development.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> helloElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> worldElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> reactElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      className<span class=\"token operator\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>helloElement<span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> worldElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>reactElement<span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"-브라우저-출력화면\" style=\"position:relative;\"><a href=\"#-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%B6%9C%EB%A0%A5%ED%99%94%EB%A9%B4\" aria-label=\" 브라우저 출력화면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖥 브라우저 출력화면:</h4>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/05527512-46c7-4128-aec2-02a91e81f4aa/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-20%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.58.39.png\" alt=\"\"></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-dom%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EB%8D%94-%EC%9E%98-%EC%95%8C%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%99%9C-%EC%A4%91%EC%9A%94%ED%95%9C%EA%B0%80\">🤔 그렇다면 DOM을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#react--reactdom\">React &#x26; ReactDOM</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%B6%9C%EB%A0%A5%ED%99%94%EB%A9%B4\">🖥 브라우저 출력화면:</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 07, 2021","title":"react 컴포넌트와 DOM api","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/react-and-dom-api/"}},"prev":{"id":"e36af930-c6cd-5d7d-a08a-38702d56e39d","html":"<p>⚠️ 작성이 완료되지 않은 글입니다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/605a1e46-f718-4d5c-9fb1-0080e1de6408/banner.jpeg\" alt=\"\"></p>\n<blockquote>\n<p>“You can throw paint against the wall and eventually you might get most of the wall, but until you go up to the wall with a brush, you’ll never get the corners. 🖌️ ”</p>\n</blockquote>\n<h1 id=\"whate-is-testing\" style=\"position:relative;\"><a href=\"#whate-is-testing\" aria-label=\"whate is testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Whate is testing?</h1>\n<p>소프트웨어 관점에서의 테스트는 애플리케이션이 개발자가 설계한 <strong>요구 사항에 맞게 작동하는지 검증하는 과정이다</strong>.</p>\n<p>테스트는 모든 개발이 끝났을때와 같이 특정 개발 단계에서 이루어지는 것이 아니며 <strong>모든 개발 과정의 각 단계에서 꾸준이 이뤄진다</strong>.</p>\n<p>프로토타입핑 단계에서 UX를 미리 검증하거나 API 통신중에 요청 또는 응답의 값을 확인하는 것, 마크업이 끝난 후 디자인 시안과 비교해보는 것 등이 모두 테스트에 해당한다.</p>\n<p>테스트 과정은 전체적인 작업 흐름의 속도를 올려 개발을 빠르게 진행하기 위해, 그리고 새로운 변경 사항이 발생했을때 기존 코드를 무너트리지 않는다는 확신을 갖기 위해 꼭 필요한 부분이다.</p>\n<p>테스트를 위한 라이브러리 만큼 테스트의 종류 또한 여러가지가 있지만 “범위”에 따라 크게 <strong>단위(Unit), 통합(Integration), E2E(End to End) 테스트</strong>로 나눌 수 있다.</p>\n<p>자바스크립트 테스트 도구인 testing library를 개발한 kend d dodds는 각각의 테스트 단계를 아래와 같이 정의한다.</p>\n<h2 id=\"-what-are-the-testings\" style=\"position:relative;\"><a href=\"#-what-are-the-testings\" aria-label=\" what are the testings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 What are the testings?</h2>\n<ul>\n<li>\n<p><strong>End to End 테스트</strong>: 실제 사용자가 사용하는 것과 같은 조건에서 전체 시스템을 테스트 (functional testing 또는 e2e라고도 불림) 하는 것.</p>\n</li>\n<li>\n<p><strong>Intergration(통합) 테스트</strong> : 어플리케이션의 여러 부분들이 통합되어 제대로 상호작용 되는지 테스트 하는 것.</p>\n</li>\n<li>\n<p><strong>Unit 테스트</strong> : 실행되는 알고리즘 등이 잘 작동하는지 작은 단위를 떼어 내어 분리된 환경에서 테스트 하는 것.</p>\n</li>\n<li>\n<p><strong>Static(정적) 테스트</strong>: syntax 에러 또는 type 에러와 같이 코드를 실행시키지 않고 테스트를 하는 것</p>\n</li>\n</ul>\n<h2 id=\"1️⃣-unit-테스트\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-unit-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"1️⃣ unit 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ Unit 테스트</h2>\n<p>유닛 테스트 예제를 살펴보자. 어플리케이션에 greeting이라는 함수가 있고 이 함수는 성과 이름을 받아 인사말을 리턴하는 기능을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello Mr./Mrs. </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예상하는 값이 리턴되는지 어떻게 테스트 할 수 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should output firstName and lastName'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Moataz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mahmoud'</span><span class=\"token punctuation\">)</span>\n <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Mr./Mrs. Moataz Mahmoud'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"2️⃣-integration-테스트\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-integration-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"2️⃣ integration 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ Integration 테스트</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>render<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">,</span> waitForElementToBeRemoved<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'test/app-test-utils'</span>\n<span class=\"token keyword\">import</span> userEvent <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/user-event'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>build<span class=\"token punctuation\">,</span> fake<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@jackfranklin/test-data-bot'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>rest<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'msw'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>setupServer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'msw/node'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>handlers<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'test/server-handlers'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'../app'</span>\n\n<span class=\"token keyword\">const</span> buildLoginForm <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">userName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// integration tests typically only mock HTTP requests via MSW</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">setupServer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>handlers<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> server<span class=\"token punctuation\">.</span><span class=\"token function\">resetHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">logging in displays the user's username</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The custom render returns a promise that resolves when the app has</span>\n  <span class=\"token comment\">//   finished loading (if you're server rendering, you may not need this).</span>\n  <span class=\"token comment\">// The custom render also allows you to specify your initial route</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>route<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">buildLoginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">username</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span>\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">password</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">submit</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">waitForElementToBeRemoved</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">loading</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// assert whatever you need to verify the user is logged in</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"3️⃣-end-to-end-테스트\" style=\"position:relative;\"><a href=\"#3%EF%B8%8F%E2%83%A3-end-to-end-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"3️⃣ end to end 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3️⃣ End to End 테스트</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>generate<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'todo-test-utils'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo app'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should work for a typical user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> generate<span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> generate<span class=\"token punctuation\">.</span><span class=\"token function\">todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// here we're going through the registration process.</span>\n    <span class=\"token comment\">// I'll typically only have one e2e test that does this.</span>\n    <span class=\"token comment\">// the rest of the tests will hit the same endpoint</span>\n    <span class=\"token comment\">// that the app does so we can skip navigating through that experience.</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visitApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">register</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">username</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">password</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">login</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">add todo</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{enter}'</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo-0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.value'</span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'complete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">findByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo-0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'complete'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// etc...</span>\n    <span class=\"token comment\">// My E2E tests typically behave similar to how a user would.</span>\n    <span class=\"token comment\">// They can sometimes be quite long.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-what-are-the-testings\">🤔 What are the testings?</a></li>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-unit-%ED%85%8C%EC%8A%A4%ED%8A%B8\">1️⃣ Unit 테스트</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-integration-%ED%85%8C%EC%8A%A4%ED%8A%B8\">2️⃣ Integration 테스트</a></li>\n<li><a href=\"#3%EF%B8%8F%E2%83%A3-end-to-end-%ED%85%8C%EC%8A%A4%ED%8A%B8\">3️⃣ End to End 테스트</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 15, 2021","title":"Static vs Unit vs Integration vs E2E","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/javascriptTesting/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/lazy-state-initialization/","nextSlug":"/react-and-dom-api/","prevSlug":"/javascriptTesting/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}