{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/contextApi/",
    "result": {"data":{"cur":{"id":"8a9e106b-1929-5a84-a15e-1bb52606d373","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/4d59f32d-1320-4bb6-b0a7-75be546e7a6d/Function%20(11).png\" alt=\"\"></p>\n<h4 id=\"이미-알고있는-내용\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8-%EC%95%8C%EA%B3%A0%EC%9E%88%EB%8A%94-%EB%82%B4%EC%9A%A9\" aria-label=\"이미 알고있는 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미 알고있는 내용</h4>\n<p>📌 React의 useState 훅으로 지역 상태를 관리 할 수 있다.</p>\n<ul>\n<li>props 다른 곳에서 사용하고 싶다면 props로 전달해야지만 자식 컴포넌트에서 상태 값에 접근이 가능하다.</li>\n<li>props로 여러 컴포넌트에게 상태 값을 내려 주기에는 한계가 있다.</li>\n</ul>\n<p>📌 Redux</p>\n<ul>\n<li>store를 통해 전역적으로 컴포넌트가 상태 값에 접근이 가능하다.</li>\n</ul>\n<h2 id=\"-contextapi는-무엇\" style=\"position:relative;\"><a href=\"#-contextapi%EB%8A%94-%EB%AC%B4%EC%97%87\" aria-label=\" contextapi는 무엇 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 contextAPI는 무엇?</h2>\n<blockquote>\n<p>Redux와 비슷한듯 다른 contextAPI를 정리해보자</p>\n</blockquote>\n<h3 id=\"contextapi-특징\" style=\"position:relative;\"><a href=\"#contextapi-%ED%8A%B9%EC%A7%95\" aria-label=\"contextapi 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>contextAPI 특징</h3>\n<ul>\n<li>React의 내장 기능으로 redux와는 다르게 리액트에서만 사용할 수 있다.</li>\n<li>Provider로 최상위 컴포넌트를 감싸 상태 값을 내려주는 형식이다.</li>\n</ul>\n<h2 id=\"-contextapi-사용법\" style=\"position:relative;\"><a href=\"#-contextapi-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\" contextapi 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 contextAPI 사용법</h2>\n<p><strong>1. Context를 만들자</strong></p>\n<ul>\n<li>redux를 사용할때 slice별로 누어서 사용했던것과 비슷한 개념인거 같다.</li>\n<li>initState에 초기 상태값을 객체 형태로 전달한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UserContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>initState<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>2. Action을 만들어준다</strong></p>\n<ul>\n<li>액션을 지정하여 타입 별로 다른 로직을 진행시킬 수 있다.</li>\n<li>이것도 redux에서도 action을 만들어 사용했던걸 생각하면 정말 비슷하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> type Action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"UPDATE\"</span><span class=\"token punctuation\">;</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. Reducer를 만들어준다</strong></p>\n<ul>\n<li>Action이 발생했을때 상태 값을 변경해주는 reducer를 작성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Action <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/actions/gameBoardAction\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UserState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/contexts/gameBoardContext\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> updateUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> UserState<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> Action<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">UserState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"UPDATE\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 변경되는 payload 로직 작성</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unhandled action\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. Provider를 만들어 하위 컴포넌트를 감싸준다</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ContextProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> userDispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>userReducer<span class=\"token punctuation\">,</span> initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>UserContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>UserContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr/>\n<h3 id=\"state-값에는-어떻게-접근할까\" style=\"position:relative;\"><a href=\"#state-%EA%B0%92%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%91%EA%B7%BC%ED%95%A0%EA%B9%8C\" aria-label=\"state 값에는 어떻게 접근할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State 값에는 어떻게 접근할까?</h3>\n<ul>\n<li>Redux를 사용할때 useSelector를 사용해서 store의 상태 값에 접근한것과 비슷하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>UserContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Redux가 Context API를 기반으로 만들어진 것이기 때문일까? Context API와 Redux는 사용법과 그 구조에 조금 차이가 있을 뿐 전체적으로 많음 부분이 유사하다.</p>\n</blockquote>\n<p>리디북스에 벨로퍼트님이 redux와 contextAPI는 비슷해 보이지만 사용하는 목적이나 기능적 제한들이 분명 다르다고 정리해 놓은 블로그를 봤는데 나중에 시간이나면 그 부분도 추가해서 정리해야겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%9D%B4%EB%AF%B8-%EC%95%8C%EA%B3%A0%EC%9E%88%EB%8A%94-%EB%82%B4%EC%9A%A9\">이미 알고있는 내용</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-contextapi%EB%8A%94-%EB%AC%B4%EC%97%87\">🤔 contextAPI는 무엇?</a></p>\n<ul>\n<li><a href=\"#contextapi-%ED%8A%B9%EC%A7%95\">contextAPI 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-contextapi-%EC%82%AC%EC%9A%A9%EB%B2%95\">🤔 contextAPI 사용법</a></p>\n<ul>\n<li><a href=\"#state-%EA%B0%92%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%91%EA%B7%BC%ED%95%A0%EA%B9%8C\">State 값에는 어떻게 접근할까?</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"이미 알고있는 내용 📌 React의 useState 훅으로 지역 상태를 관리 할 수 있다. props 다른 곳에서 사용하고 싶다면 props로 전달해야지만 자식 컴포넌트에서 상태 값에 접근이 가능하다. props로 여러 컴포넌트에게 상태 값을 내려 주기에는 한계가 있다. 📌 Redux store를 통해 전역적으로 컴포넌트가 상태 값에 접근이 가능하다. 🤔 contextAPI는 무엇? Redux와 비슷한듯 다른 contextAPI를 정리해보자 contextAPI 특징 React의 내장 기능으로 redux와는 다르게 리액트에서만 사용할 수 있다. Provider로 최상위 컴포넌트를 감싸 상태 값을 내려주는 형식이다. 🤔 contextAPI 사용법 1. Context를 만들자 redux를 사용할때 slice별로 누어서 사용했던것과 비슷한 개념인거 같다. initState에 초기 상태값을 객체 형태로 전달한다. 2. Action을 만들어준다 액션을 지정하여 타입 별로 다른 로직을 진행시킬…","frontmatter":{"date":"May 19, 2021","title":"리액트 contextAPI","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/contextApi/"}},"next":{"id":"c277c893-40fb-5b2b-bc9e-3c69d1738d03","html":"<h3 id=\"️-primitive-type원시-타입\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-primitive-type%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85\" aria-label=\"️ primitive type원시 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ Primitive Type(원시 타입)</h3>\n<p>원시 타입 예제:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span></code></pre></div>\n<p>여기서 age 변수는 28이라는 number type을 할당받는다.</p>\n<p>number는 원시 값 혹은 <strong>primitive value</strong>라고 부른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Max'</span> \n<span class=\"token keyword\">var</span> isMale <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>자바스크립트의 뼈대가 되는 타입, 즉 가장 심플한 자바스크립트 빌등 블럭을 원시 타입이라고 부르고 <strong>number 말고도 string, null, undefined, bloolean을 포함해 5가지가 존재한다</strong>.</p>\n<h3 id=\"️-reference-type참조-타입\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-reference-type%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85\" aria-label=\"️ reference type참조 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ Reference Type(참조 타입)</h3>\n<p>참조 타입 예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> hobbies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Sports'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cooking'</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>위에 예시 코드에서 person은 잘 알고있는 객체와 배열이다.</p>\n<p><strong>객체와 배열의 타입은 참조 타입이며</strong> 여기서 중요하게 봐야하는 부분은 참조 타입이지만 원시 타입의 값들을 가진다는 것이다.</p>\n<hr/>\n<h3 id=\"-원시-참조-타입은-어떻게-다른가\" style=\"position:relative;\"><a href=\"#-%EC%9B%90%EC%8B%9C-%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EA%B0%80\" aria-label=\" 원시 참조 타입은 어떻게 다른가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 원시, 참조 타입은 어떻게 다른가?</h3>\n<blockquote>\n<p>자바스크립트 언어는 2가지의 memory를 가진다.</p>\n</blockquote>\n<ol>\n<li><strong>Stack</strong></li>\n<li><strong>Heap</strong></li>\n</ol>\n<p><strong>스택</strong>은 기본적으로 액세스하기 쉬운 메모리로서 항목을 스택으로 관리한다. 스택에 올라갈수 있는 데이터는 숫자, 문자열, bloolean같이  크기를 미리 알수있는 타입이다.</p>\n<p><strong>힙</strong>은 정확한 크기와 구조를 미리 결정할 수 없는 항목의 메모리이다. 객체와 배열은 런타임중에 변경이 일어날 수 있는 힙으로 이동한다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/9d96dfcd-49a3-43e2-9d4b-bbb7786eff0b/ref-type-pointer.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>원시 타입은 변수에 할당될 때 메모리 상에 고정된 크기로 저장되며 해당 변수가 원시 데이터의 값을 보관한다.</p>\n</li>\n<li>\n<p>원시 타입 자료형은 모두 변수 선언, 초기화, 할당시 값이 저장된 메모리 영역에 직접적으로 접근한다.</p>\n</li>\n<li>\n<p>즉 변수에 새 값이 할당 될 때 변수에 할당된 메모리 블럭에 저장된 값을 바로 변경된다.</p>\n</li>\n<li>\n<p>참조 타입 데이터는 크기가 정해져 있지 않고 변수에 할당될 때 값이 직접 해당 변수에 저장될 수 없으며, 변수에는 데이터에 대한 참조만 저장된다.</p>\n</li>\n<li>\n<p>변수의 값이 저장된 힙(Heap) 메모리의 주소값을 저장한다. 참조 타입은 변수의 값이 저장된 메모리 블럭의 주소를 가지고 있고, 자바스크립트 엔진이 변수가 가지고 있는 메모리 주소를 이용해서 변수의 값에 접근한다.</p>\n</li>\n</ul>\n<hr/>\n<h2 id=\"이걸-왜-알아야-할까\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B1%B8-%EC%99%9C-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"이걸 왜 알아야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이걸 왜 알아야 할까?</h2>\n<p>자바스크립트를 사용해서 어플리케이션을 개발하면 객체를 사용하는일이 많다. 객체는 참조 타입이고 참조 타입의 작동하는 원리를 잘못알고 있다면 이해하지 못하는 일이 발생할 수 있다.</p>\n<p><strong>📌 각 변수 간에 원시 타입 데이터를 복사할 경우 데이터의 값이 복사된다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span><span class=\"token operator\">></span> <span class=\"token number\">100</span>\n</code></pre></div>\n<hr/>\n<p>아래 예시 코드에서 person이라는 변수는 무엇을 저장하고 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>a)  ({ name: ‘Max’ }) 객체</p>\n<p>b) 객체를의 메모리 위치 포인터</p>\n<p>c) name의 메로리 위치 포인터</p>\n<p><strong>정답은 b - 객체를의 메모리 위치 포인터이다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> newPerson <span class=\"token operator\">=</span> person\nnewPerson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Anna'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  print<span class=\"token operator\">?</span></code></pre></div>\n<p>위 예시 코드에서 어떤 값이 콘솔에 출력될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascipt\"><pre class=\"language-javascipt\"><code class=\"language-javascipt\">&gt; &quot;Anna&quot;</code></pre></div>\n<p>당연하거 아닌가?라고 생각할 수 있지만 왜 Anna가 출력되는지 정확하게 이해하고 넘어가야 한다.</p>\n<p><strong>📌 각 변수 간에 참조 타입 데이터를 복사할 경우 데이터의 참조가 복사된다.</strong></p>\n<ul>\n<li>‘person’과 ‘newPerson’는 동일한 참조를 담고 있으며, 따라서 동일한 객체를 가르킨다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EF%B8%8F-primitive-type%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85\">✏️ Primitive Type(원시 타입)</a></li>\n<li><a href=\"#%EF%B8%8F-reference-type%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85\">✏️ Reference Type(참조 타입)</a></li>\n<li><a href=\"#-%EC%9B%90%EC%8B%9C-%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EA%B0%80\">🤔 원시, 참조 타입은 어떻게 다른가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B4%EA%B1%B8-%EC%99%9C-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0%EA%B9%8C\">이걸 왜 알아야 할까?</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 13, 2021","title":"reference vs. primitive","categories":"DeepDive","author":"장희성","emoji":"✏️"},"fields":{"slug":"/referenceAndPrimitive/"}},"prev":{"id":"42f9e5c2-c9db-55e3-bbaa-3dbbf663477c","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/e5164da3-d8c9-422a-b50f-3b40b6dd6d49/Function%20(8).png\" alt=\"\">></p>\n<p>“왜 redux가 꼭 필요한가..?” 🤔 문득 이런 생각이 들었다.</p>\n<p>항상 프로젝트를 진행할때 redux를 써야할까? 라는 의문을 가지면서도 이미 redux를 통해 전역으로 state를 관리하는데 익숙해져서 (툴킷이 너무 편해서..) 그냥 너무나 자연스럽게 리덕스를 사용해왔다. 이번 기회에 정확히 redux가 어떤 이점이 있는지 또 로컬에서 상태 값을 관리할때와 어떤 차이가 있는지 정리 해보자.</p>\n<h2 id=\"state상태\" style=\"position:relative;\"><a href=\"#state%EC%83%81%ED%83%9C\" aria-label=\"state상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State(상태)</h2>\n<p>일단 react에서 상태란 어떤걸 의미하는가?</p>\n<p>리액트 컴포넌트에서 <strong>동적인 값을 상태(state)</strong> 라고 부른다. 사용자 인터랙션을 통해 컴포넌트의 상태값이 동적으로 바뀔 경우에는 상태를 관리하는 것이 필요하다.</p>\n<p>16.7버전 리액트 이전에는 클래스 컴포넌트에서 this를 binding해서 상태값을 관리했다면 <strong>React hooks</strong>의 내장 함수인 <strong>useState()</strong> 가 나오면서 이를 통해 함수형 컴포넌트에서도 상태를 관리할 수 있다.</p>\n<blockquote>\n<ul>\n<li>리액트 컴포넌트 또한 함수이며 jsx를 리턴하기 위해서는 함수 호출이 있어야한다.</li>\n</ul>\n</blockquote>\n<ul>\n<li>리액트는 첫 실행에서 index.js를 통해서 컴포넌트들을 연속적으로 호출하며 모든 컴포넌트의 호출이 끝나면 다시 호출하지 않는다.</li>\n<li>e.g) let variable의 값을 온클릭 이벤트에서 업데이트해도 컴포넌트는 다시 리랜더링하지 않는다.</li>\n</ul>\n<h2 id=\"-그렇다면-전역-상태-관리는-무엇이고-왜-필요한가\" style=\"position:relative;\"><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\" 그렇다면 전역 상태 관리는 무엇이고 왜 필요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 그렇다면 전역 상태 관리는 무엇이고? 왜 필요한가?</h2>\n<blockquote>\n<p>먼저 전역 상태라는 단어는 ‘전역’이라는 단어와 ‘상태’라는 단어의 합성어이다.</p>\n</blockquote>\n<ul>\n<li>보통 애플리케이션에서 관리하는 상태는 다음 두 가지로 나눌 수 있다.</li>\n<li>외부에서 서버 통신으로 받는 동적인 데이터</li>\n<li>애플리케이션 UI를 결정하는 상태 (ex. isClosed)</li>\n</ul>\n<p>이런식으로 렌더링하기 위한 동적인 데이터나 사용자 액션을 제어하기 위한 UI 상태 두 종류이다. UI 상태와 같이 컴포넌트 안에서 로컬로 사용되는 경우 관리하기가 상대적으로 쉽다.</p>\n<h3 id=\"전역-상태를-고민하는-시점\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C%EB%A5%BC-%EA%B3%A0%EB%AF%BC%ED%95%98%EB%8A%94-%EC%8B%9C%EC%A0%90\" aria-label=\"전역 상태를 고민하는 시점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 상태를 고민하는 시점</h3>\n<p>로컬에서 UI요소를 결정 해주는것처럼 특정 컴포넌트에 특화되어있는 상태를 만들때는 어디서 이 상태를 정의해주고 관리하며 사용할까? 라는 고민을 할 필요가 없다.</p>\n<p>하지만 비동기 요청으로 외부에서 데이터를 불러오게 되면 데이터를 어디서 언제 호출해서 관리해야할까? 라는 고민이 생기기 시작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>searchResult<span class=\"token punctuation\">,</span> setSearchResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 게시물 리스트 배열</span>\n\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MainSearchApi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> keyword<span class=\"token punctuation\">,</span> pageSize<span class=\"token punctuation\">,</span> pageNum <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> instance\n            <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"util/search\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    keyword<span class=\"token punctuation\">,</span>\n                    pageSize<span class=\"token punctuation\">,</span>\n                    pageNum<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">setSearchResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setSearchResult</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setTotalPage</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>totalPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setNextPage</span><span class=\"token punctuation\">(</span>currentPage <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setCurrentPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예시로 위에 코드는 실제 UFO 프로젝트에서 검색 페이지에서 유저가 입력한 <strong>search term</strong>으로 서버에 요청을 보내 검색 결과를 받아오는 부분이다. 컴포넌트가 실행되면 useEffect()안에 비동기 요청을 하고 검색 결과가 담긴 배열을 <strong>setSearchResult()</strong> 에 담아준다.</p>\n<p>저장된 데이터(state)은 화면을 그려주는 presenter 컴포넌트로 props 넘겨준다.</p>\n<p>리액트에서는 이렇게 데이터를 부모 컴포넌트에서 자식 컴포넌트로 데이터를 넘겨줄수 있다.</p>\n<p>부모에서 자식으로 또 그 자식이 부모 컴포넌트로서 또다른 자식 컴포넌트에게 데이터를 전달할수 있는데 이것을 <strong>Prop Drilling</strong>이라고 한다.</p>\n<blockquote>\n<p>문제는 이렇게 데이터를 전달하다보면 처음 데이터를 요청해서 받는 부모 컴포넌트와 컴포넌트 트리 가장 하단에 있는 자식 컴포넌트와의 거리가 너무 멀어질때 발생한다.</p>\n</blockquote>\n<p>예를들어 A 컴포넌트에서 데이터를 받아 Z 컴포넌트에 전달한다면 중간에 위치하는 B~Y 컴포넌트는 오로지 데이터를 전달하기 위해 props를 받아 전달하는 비효율이 발생한다.</p>\n<h3 id=\"그렇다면-데이터를-각각-필요한-컴포넌트에서호출하면-되는거-아닌가\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B0%81%EA%B0%81-%ED%95%84%EC%9A%94%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%ED%98%B8%EC%B6%9C%ED%95%98%EB%A9%B4-%EB%90%98%EB%8A%94%EA%B1%B0-%EC%95%84%EB%8B%8C%EA%B0%80\" aria-label=\"그렇다면 데이터를 각각 필요한 컴포넌트에서호출하면 되는거 아닌가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 데이터를 각각 필요한 컴포넌트에서호출하면 되는거 아닌가?</h3>\n<p>📌 불필요한 네트워크 비용을 줄이기 위해서 필요한 시점에 데이터를 불러오는 것이 맞다. 그리고 데이터를 필요로 하는 컴포넌트에서 데이터를 호출하는 것이 응집도가 높아지는 방향이다. 여기서 발생하는 문제점은 API의 응답 구조와 컴포넌트 트리가 일치하리라는 보장이 없다는 것이다.</p>\n<p>그렇다면 불필요한 네트워크 비용을 줄이면서 컴포넌트들이 외부에 데이터를 공유할수는 없을까?에서 Redux와같은 전역 상태 툴의 필요성을 느끼게된다.</p>\n<h2 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h2>\n<p>리덕스 자세하게 정리하는 블로그는 다음에 써보도록 하고 redux가 무엇을 도와주는지 간단하게 정리하고 넘어가겠다.</p>\n<p>리덕스는 리액트에서 가장 많이 사용되는 상태 관리 라이브러리중 하나이다. 리덕스를 사용하면 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜서 효율적으로 관리할 수 있다. 최근 Redux Toolkit이 등장하면서 더욱 더 이 효율성은 빛을 보이고 있다.</p>\n<p>리덕스는 상태를 store에 저장하고 관리한다. 이 store는 모든 컴포넌트에서 접근이 가능하기 때문에 컴포넌트 위치에 상관없이 언제 어디서나 store내에 있는 상태에 접근이 가능하다.</p>\n<h3 id=\"redux-사용예시\" style=\"position:relative;\"><a href=\"#redux-%EC%82%AC%EC%9A%A9%EC%98%88%EC%8B%9C\" aria-label=\"redux 사용예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux 사용예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// App.js</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLoggedInUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkAdminDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// eslint-disable-next-line react-hooks/exhaustive-deps</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">,</span> isLoggedIn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//user.js (redux파일)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> checkLoggedInUser <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"user/check/login\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> thunkAPI</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 로컬 스토리지 토큰 불러온다.</span>\n        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 토큰 decode를 통해서 현재 로그인한 유저 id 가져오기</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user_id<span class=\"token operator\">:</span> userId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 서버에 유저 정보 요청</span>\n            <span class=\"token keyword\">const</span> loggedInUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userApi<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loggedInUser<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> loggedInUser<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> thunkAPI<span class=\"token punctuation\">.</span><span class=\"token function\">rejectWithValue</span><span class=\"token punctuation\">(</span>loggedInUser<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 에러 발생시 에러 메세지 반환</span>\n            Sentry<span class=\"token punctuation\">.</span><span class=\"token function\">captureException</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">error, 유저로그인유무 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> thunkAPI<span class=\"token punctuation\">.</span><span class=\"token function\">rejectWithValue</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예시는 유저의 로그인 유뮤를 검사해주는 코드의 일부를 가져왔다.</p>\n<ol>\n<li>react가 컴포넌트를 랜더하고 App.js가 실행되면 현재 유저가 로그인을 했는지 안했는지를 확인하고 리덕스에서 관리하는 isLoggedIn 값을 true 또는 false로 변경한다. 이렇게 저장된 유저의 로그인 상태값은 store를 통해서 모든 컴포넌트에서 접근이 가능해진다.</li>\n</ol>\n<blockquote>\n<p>더이상 props를 전달해주거나 다른 곳에서도 값이 쓰일 경우 state를 lifting 해줄 필요가 없다. 필요로 하는 값은 redux에 접근하여 useSelector 로 원하는 값을 가져오면 된다. 컴포넌트의 구조 변경에도 자유로워진 것 같고 코드가 훨씬 깔끔해졌다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#state%EC%83%81%ED%83%9C\">State(상태)</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\">🤔 그렇다면 전역 상태 관리는 무엇이고? 왜 필요한가?</a></p>\n<ul>\n<li><a href=\"#%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C%EB%A5%BC-%EA%B3%A0%EB%AF%BC%ED%95%98%EB%8A%94-%EC%8B%9C%EC%A0%90\">전역 상태를 고민하는 시점</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B0%81%EA%B0%81-%ED%95%84%EC%9A%94%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%ED%98%B8%EC%B6%9C%ED%95%98%EB%A9%B4-%EB%90%98%EB%8A%94%EA%B1%B0-%EC%95%84%EB%8B%8C%EA%B0%80\">그렇다면 데이터를 각각 필요한 컴포넌트에서호출하면 되는거 아닌가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#redux\">Redux</a></p>\n<ul>\n<li><a href=\"#redux-%EC%82%AC%EC%9A%A9%EC%98%88%EC%8B%9C\">Redux 사용예시</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 10, 2021","title":"useState? redux?","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/useStateOrRedux/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/contextApi/","nextSlug":"/referenceAndPrimitive/","prevSlug":"/useStateOrRedux/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}