{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-819/",
    "result": {"data":{"cur":{"id":"9c9d5e7a-135d-581e-b38e-dbfa4ba2b797","html":"<p>문제: <a href=\"https://leetcode.com/problems/most-common-word/\">leetcode - 819</a> (Most Common Word\n)</p>\n<p>코로나 격리중..뭐 할까 고민하다 항해에서 보내준 ‘파이썬 알고리즘 인터뷰’ 완독을 목표로 시작한 리트코드 문제풀기, 아직까지는 문제들이 쉬워서 그런지 재밌다 😅.</p>\n<p>이번 문제도 난이도가 높지않지만 파이썬 컴프리헨션과 Counter 클래스를 활용해 볼 수 있는 좋은 문제였다. 알고리즘 준비를 파이썬으로 하겠다고 마음먹고 파이썬 공부를 시작한지 얼마 지나지 않았지만 벌써 푹 빠져버렸다.</p>\n<h4 id=\"문제-해설\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EC%84%A4\" aria-label=\"문제 해설 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해설:</h4>\n<p>Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.</p>\n<p>The words in paragraph are case-insensitive and the answer should be returned in lowercase.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">most_common_word</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> banned<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># replace := 문자열 치환후, 새로운 문자열 반환</span>\n    <span class=\"token comment\"># 정규식을 쓰기 싫어서 아래와 같이 필터링 했다.</span>\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">\"!?',;.\"</span><span class=\"token punctuation\">:</span> paragraph <span class=\"token operator\">=</span> paragraph<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 리스트 컨프리헨션 정말 좋다.</span>\n    words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>word <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> paragraph<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> word <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> banned<span class=\"token punctuation\">]</span>\n\n\n    counter <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># Counter 클래스의 most_common() 함수는 튜플 리스트를 반환하기 때문에 주의하자.</span>\n    <span class=\"token comment\"># counter.most_common(1) == [(\"most common word\", #count)]</span>\n    <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EC%84%A4\">문제 해설:</a></li>\n</ul>\n</div>","excerpt":"문제: leetcode - 819 (Most Common Word\n) 코로나 격리중..뭐 할까 고민하다 항해에서 보내준 ‘파이썬 알고리즘 인터뷰’ 완독을 목표로 시작한 리트코드 문제풀기, 아직까지는 문제들이 쉬워서 그런지 재밌다 😅. 이번 문제도 난이도가 높지않지만 파이썬 컴프리헨션과 Counter 클래스를 활용해 볼 수 있는 좋은 문제였다. 알고리즘 준비를 파이썬으로 하겠다고 마음먹고 파이썬 공부를 시작한지 얼마 지나지 않았지만 벌써 푹 빠져버렸다. 문제 해설: Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique. The words in paragra…","frontmatter":{"date":"April 07, 2022","title":"leetcode(819)- Most Common Word","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-819/"}},"next":{"id":"2e023ceb-d13f-595e-884f-8ed4534cc0ac","html":"<h3 id=\"-버블-정렬-구현하기\" style=\"position:relative;\"><a href=\"#-%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\" 버블 정렬 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛁 버블 정렬 구현하기</h3>\n<p>버블 정렬은 기본적으로 O(N^2)의 시간 복잡도를 가지는 알고리즘이다. 실제 코딩 테스트에서 O(N^2) 알고리즘을 사용하거나 구현할 일은 없겠지만 기본적인 정렬 알고리즘들을 정리하고 개념을 익혀 놓는게 좋을 것 같다. 알고리즘 구현 자체는 크게 어려운 부분이 없다.</p>\n<p>버블 정렬은 이름과 같이 물속에서 거품이 올라오는 모양과 비슷하다고 해서 버블 정렬이라고 한다.</p>\n<p>배열을 왼쪽에서 오른쪽 또는 오른쪽에서 왼쪽 방향으로 이동하면서 이웃한 앞뒤 원소의 값을 비교하고 앞 원소의 값이 더 크다면 두 원소의 자리를 교환(swap)하는 작업을 반복한다.</p>\n<p><img src=\"https://imagedelivery.net/v7-TZByhOiJbNM9RaUdzSA/4af29665-03ce-48e7-0f63-406754231100/public\" alt=\"\"></p>\n<h3 id=\"알고리즘\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘</h3>\n<p>데이터의 수를 N이라고 하자. 버블 정렬 알고리즘은 아래의 과정을 N번 반복할 것이다.</p>\n<ol>\n<li>배열의 0번 칸의 숫자가 1번칸의 숫자 보다 크다면 두 값의 위치를 교환한다.</li>\n<li>배열의 1번 칸의 숫자가 2번칸의 숫자 보다 크다면 두 값의 위치를 교환한다.</li>\n<li>…</li>\n<li>배열의 N-2번 칸의 숫자가 N-1 칸의 숫자 보다 크다면 두 값의 위치를 교환한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bubble_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\tdata<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">return</span> data</code></pre></div>\n<h3 id=\"최적화\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최적화</h3>\n<p>이전 반복문 실행에서 앞뒤 자리 비교(swap)이 한 번도 일어나지 않았다면 정렬되지 않는 값이 하나도 없었다고 간주할 수 있다. 따라서 이럴 경우, 이후 반복문을 수행하지 않고 바로 for문을 break으로 나가준다.<img src=\"https://imagedelivery.net/v7-TZByhOiJbNM9RaUdzSA/62805b8b-e105-4598-f109-0b87e0100900/public\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bubble_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tcount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\tdata<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n\t\t\t\tcount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        \t<span class=\"token comment\"># data[0] ~ data[n-i-1]칸까지 오름차순이 아닌 쌍이 없었다.</span>\n            <span class=\"token comment\"># data[0] ~ data[n-i-1]칸까지 모두 오름차순이다.</span>\n            <span class=\"token comment\"># data[n-1] ~ data[n-1]까지는 이미 정렬되어있다.</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t<span class=\"token keyword\">return</span> data</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">🛁 버블 정렬 구현하기</a></li>\n<li><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">알고리즘</a></li>\n<li><a href=\"#%EC%B5%9C%EC%A0%81%ED%99%94\">최적화</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 05, 2022","title":"Algorithm[버블정렬]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-bubble-sort/"}},"prev":{"id":"363d1ae1-fe29-5f0a-a2d6-0c8364927c01","html":"<p>문제: <a href=\"https://leetcode.com/problems/reverse-string/\">leetcode - 344</a> (Valid Palindrome)</p>\n<p>주어지는 문자 배열을 리턴 없이 리스트 내부를 직접 조작하여 원소들을 뒤집는 문제이다.</p>\n<p>pythonic하게 문제를 푼다면 아래와 같이 한줄로 풀이가 가능하다. 투 포인터 방식도 제출해서 시간을 비교해봤지만 크게 차이는 없다.</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/38f23d6c-ad95-4d91-bfaf-ecdbf6be9836/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-04-09%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2011.07.51.png\" alt=\"\"></p>\n<h4 id=\"1️⃣-문제풀이\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"1️⃣ 문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제풀이:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    s<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> s</code></pre></div>\n<h4 id=\"2️⃣-문제풀이\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"2️⃣ 문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 문제풀이:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    right <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>\n        left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        right <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> s</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">1️⃣ 문제풀이:</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">2️⃣ 문제풀이:</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 08, 2022","title":"leetcode(344)- reverse string","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-344/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-819/","nextSlug":"/algo-bubble-sort/","prevSlug":"/leetcode-344/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}