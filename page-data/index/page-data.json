{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"b73e5d13-5030-5ce7-b1d2-5a706e1aae45","excerpt":"#️⃣ 해시 👨‍🏫 해쉬 테이블(Hash Table)은 “키” 와 “데이터”를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 빠른 검색과 저장이 특징인 자료구조이다. 해시 테이블의 형태의 자료구조는 여러 언어에서 이미 우리가 많이 사용하고 있다. 자바스크립트의 오브젝트 또는 파이썬의 딕셔너리를 해시 테이블과 같다고 보면 된다 (사실 완저히 같다고 할 수는 없지만 현재로서는 이렇게 이해하는게 가장 좋을거 같다). “데이터를 빠르게 검색할 수 있다”라는 해시 테이블의 장점은 우리가 딕셔너리에서 또는 자바스크립트 오브젝트에서 index가 아닌 key 값으로 특정 데이터에 접근할 때를 생각하면 된다. 예를 들어서 위에 예시로 작성한 dict 오브젝트에 2개의 데이터 쌍이 아닌 100개의 key value 쌍의 데이터가 있다고 생각해보자. 아무리 많은 데이터가 있어도 key 값만 가지고 있다면 바로 원하는 데이터에 접근할 수 있고 따라서 해시테이블의 평균 시간복잡도는 O(…","frontmatter":{"categories":"DataStructure","title":"Hash table","date":"November 09, 2021"},"fields":{"slug":"/algo-hash-table/"}}},{"node":{"id":"b5bd90f1-3369-5815-9656-beaa957871a8","excerpt":"1. 이진 탐색 배열 구조의 자료에서 특정 값을 찾는 방법은 크게 두가지가 있을 수 있다. 순차 탐색 이진탐색 순차 탐색에서는 배열의 시작부터 순차적으로 이동하며 찾고자 하는 특정 값을 모든 배열의 원소들과 비교하며 값을 찾을 때까지 반복한다. 이진 탐색이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다. 배열의 중간에 있는 임의의 값을 선택하여 찾고자 하는 값 X와 비교한다. X가 중간 값보다 작으면 중간 값을 기준으로 좌측의 데이터들을 대상으로, X가 중간값보다 크면 배열의 우측을 대상으로 다시 탐색한다. 출처(https://cjh5414.github.io/binary-search/) 순차 탐색과 이진탐색을 비교해보자. 순차 탐색 array 를 따라가면서 target 이 존재한다면 True 를 반환하고,\n끝까지 없다면 False 를 반환한다. 이진 탐색  1. 이진 탐색 출처(https://cjh5414.github.io/binary-search/) 순차 탐색…","frontmatter":{"categories":"algorithm","title":"Algorithm[binary-search]","date":"June 16, 2021"},"fields":{"slug":"/algo-binary-search/"}}},{"node":{"id":"5397f91a-ba80-55c1-b57b-b84378ced340","excerpt":"문제: Elements of Programming Interviews in python, page 189 Given an array of positive integers (representing coins), find the smallest value that cannot be constructed from those integers. 0이아닌 정수들로 이루어진 배열이 주어진다. 이때 배열 요소들의 합으로 구할 수 없는 수들 중 가장 작은 수를 반환해야 한다. Exmaple 1️⃣ 문제풀이: 배열의 원소들을 오름차순으로 정렬하는것이 중요하다. 오름차순으로 정렬된 정수들의 누적 합계를 구하면 특정 위치에서 구성 가능한 가장 높은 값을 알 수 있다.\n👉 예들들면) sum of [1, 2 ] = 3 이며 조합 가능한 수는 [1, 2, 3]이다. sum of [1, 2, 4] = 7 이며 조합 가능한 수는 [1, 2, 3, 4, 5, 6, 7]이다. sum of [1, 2, 4, 5] = 1…","frontmatter":{"categories":"algorithm","title":"algoexpert-non-constructible-value","date":"March 24, 2021"},"fields":{"slug":"/algoexpert-non-constructible/"}}},{"node":{"id":"8b82364b-2829-556f-8cd7-348af94b4575","excerpt":"문제: leetcode - 88 (Merge sorted array) 오름차순으로 정렬된 정수들로 이루어진 2개의 배열 nums1과 nums2가 입력값으로 주어진다. 그냥보면 병합정렬 문제이다. 특이한점이 있다면 return 값으로 병합된 배열을 반환하지 않고 초기에 주어진 nums1에 직접 병합을 해야한다. 예시:  1️⃣ 문제해설 1: 처음에 지문을 읽고는 뭐지..?라는 생각이 들었다. 첫번째로 nums1을 보면 정렬된 정수들뒤로 nums2의 길이만큼 0으로 공간이 초기화되어 있고 배열 내 병합할 원소의 개수를 의미하는 m, n이 주어진다. 결론부터 말하면 sorting 없이 포인터를 지정해서 배열의 병합이 가능하다. 해당 문제풀이는 discussion에서 다른 사람의 코드를 가져왔다. 문제해설2에서 다루겠다. 정렬을 신경쓰지 않고, nums2에 있는 모든 요소들을 nums1에 넣어준다. list.sort()로 오름차 정렬을 시켜준다. 시간 복잡도: 파이썬의 sort() 함수가 O…","frontmatter":{"categories":"algorithm","title":"leetcode(88)- Merge sorted array","date":"March 23, 2021"},"fields":{"slug":"/leetcode-88/"}}},{"node":{"id":"613d8fb0-b581-5f32-899d-e58f0f08d9f2","excerpt":"문제: leetcode - 151 (Reverse Words in a String) 🎉 기분이 좋은 밤이다. 블로그에 현재까지 정리한 문제풀이는 지금 작성하고 있는 리트코드 151번 문제를 포함해서 3개밖에 되지 않지만 벌써 3주째 하루에 한 문제씩 알고리즘 문제를 풀고있다. 아직까지 Hard level의 문제는 시도조차 하지 않고 있고 easy 또는 Medium level의 문제 위주로 풀고있다. 1️⃣ 문제풀이1: 파이썬의 내장함수인 strip() 사용해서 좌우 여백을 제거한다.. 여백이 제거된 문자열을 반복문으로 이동하면서 공백이 나오기전까지 모든 문자들을 temp_string에 임시로 저장한다. 공백이 나오면 새로운 단어가 시작되는 구간이기 때문에 현재 temp_string에 저장된 문자열을 words에 추가하고 temp_string을 다시 초기화 해준다. 마지막 단어 다음에는 공백이 존재하지 않기 때문에 반복문이 끝나면 temp_string에 저장된 마지막 문자열을 words…","frontmatter":{"categories":"algorithm","title":"leetcode(151)- Reverse Words in a String","date":"March 22, 2021"},"fields":{"slug":"/leecode-151/"}}},{"node":{"id":"8c65d29f-84d9-56f2-8510-ab52304106e9","excerpt":"문제: leetcode - 509 (피보나치 수열) 일반적으로 F(n)로 표기하며 피보나치 숫자는 피보나치 수열 이라고 불리는 수열를 형성하며, 각 숫자는 0과 1에서 시작하는 앞의 두 숫자의 합이된다. 즉, 피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 이다. 예시: F(2) = F(0) + F(1) = 0 + 1 = 1 F(3) = F(1) + F(2) = 1 + 1 = 2 F(4) = F(2) + F(3) = 1 + 2 = 3 F(5) = F(3) + F(4) = 2 + 3 = 5 n=5일경우 피보나치 수열을 나열해보면 [0, 1, 1, 2, 4, 5] 형태로 나열된다. 사실 이 문제는 필요한 식을 제공하기 때문에 피보나치 수열을 알고있지 않더라도 풀이가 가능하다. 1️⃣ 문제풀이 1 (recursion) 피보나치 수열 문제는 재귀함수를 소개하는 입문 영상에서 많이 다뤄지는 대표적인 문제이다…","frontmatter":{"categories":"algorithm","title":"leetcode(509)- Fibonacci number","date":"March 21, 2021"},"fields":{"slug":"/leetcode-509/"}}},{"node":{"id":"08fd98ab-1a03-5af1-a296-d4fc8d35a4c6","excerpt":"문제: leetcode -20 (valid parentheses) 이번 문제의 난이도는 easy이고 스택을 이용하는 대표적인 문제이다. 문제 풀이를 위해서 스택의 구현이 직접 필요하지 않으며 python 리스트로 충분히 구현이 가능하다. pop() 연산만이 필요하기 때문에 데크를 이용한 풀이와 시간적으로 차이가 없다. 입력 값으로 괄호로 구성된 문자열이 주어진다. 주어진 문자열을 검사해서 모든 괄호들이 올바르게 닫혀 있는지 확인하여 bool 타입의 결과 값을 리턴 해줘야 한다. 여기서 올바르게 닫혀있는 괄호란 (){}이나 ({}) 같이 닫는 괄호가 나올 때 제일 최근에 있는 여는 괄호와 매칭된 형태이다. ✅ 올바르게 닫힌 괄호 예시: () ({}) {{([])}} ❌ 올바르게 닫히지 않은 예시: (( ((]) ]] ({[)}) 문제풀이: 이 문제의 풀이는 간단하다. 첫번째로 주어진 문자열을 반복문으로 왼쪽에서부터 오른쪽으로 이동한다. 열린 괄호가 나오면 스택에 넣는다. 만약 닫힌 …","frontmatter":{"categories":"algorithm","title":"leetcode(20)- Valid parentheses","date":"March 21, 2021"},"fields":{"slug":"/leetcode-20/"}}}]},"site":{"siteMetadata":{"language":"en","author":{"name":"Heesung Jang","bio":{"role":"developer","description":["who builds great things","who enjoys learning","who values people 💎"],"thumbnail":"sample.png"},"social":{"github":"https://github.com/heesungjang","linkedIn":"","email":"heesungj7@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}