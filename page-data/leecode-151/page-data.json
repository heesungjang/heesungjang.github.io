{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leecode-151/",
    "result": {"data":{"cur":{"id":"613d8fb0-b581-5f32-899d-e58f0f08d9f2","html":"<p>문제: <a href=\"https://leetcode.com/problems/fibonacci-number/\">leetcode - 151</a> (Reverse Words in a String)</p>\n<p>🎉 기분이 좋은 밤이다. 블로그에 현재까지 정리한 문제풀이는 지금 작성하고 있는 리트코드 151번 문제를 포함해서 3개밖에 되지 않지만 벌써 3주째 하루에 한 문제씩 알고리즘 문제를 풀고있다. 아직까지 Hard level의 문제는 시도조차 하지 않고 있고 easy 또는 Medium level의 문제 위주로 풀고있다.</p>\n<p>Easy 문제는 그럭저럭 다른 사람이 작성한 해답을 보지 않고 풀이를 완성하는 횟수가 증가하고 있지만 Medium level의 문제만 나오면 아직까지 책이나 리트코드에서 다른 사람들이 작성한 풀이를 참고해서 해결하고 있다.</p>\n<p>내가 느끼기에도 이번 문제는 Medium level이라고 하기에는 다른 문제들에 비해 쉬웠지만 답지 없이 미디엄 레벨 문제를 풀었다 (아직까지 손에 꼽는다). 다른 사람들이 보면 “뭐 이 쉬운문제 하나 풀었다고”라고 생각하겠지만😅.</p>\n<h3 id=\"1️⃣-문제풀이1\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B41\" aria-label=\"1️⃣ 문제풀이1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제풀이1:</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverse_words</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    temp_string <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n    <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>temp_string<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> char <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n\n        <span class=\"token keyword\">if</span> char <span class=\"token operator\">!=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">:</span>\n            temp_string <span class=\"token operator\">+=</span> char\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>temp_string<span class=\"token punctuation\">)</span>\n            temp_string <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token keyword\">continue</span>\n    words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>temp_string<span class=\"token punctuation\">)</span>\n    words<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>파이썬의 내장함수인 strip() 사용해서 좌우 여백을 제거한다..</li>\n<li>여백이 제거된 문자열을 반복문으로 이동하면서 공백이 나오기전까지 모든 문자들을 temp_string에 임시로 저장한다.</li>\n<li>공백이 나오면 새로운 단어가 시작되는 구간이기 때문에 현재 temp_string에 저장된 문자열을 words에 추가하고 temp_string을 다시 초기화 해준다.</li>\n<li>마지막 단어 다음에는 공백이 존재하지 않기 때문에 반복문이 끝나면 temp_string에 저장된 마지막 문자열을 words에 추가한다.</li>\n<li>words 배열을 reverse()와 join() 내장함수로 재정렬해서 최종 리턴 값을 반환한다.</li>\n</ol>\n<p>시간 복잡도: 문자열의 길이 n만큼 한번의 iteration을 하기 때문에 O(n)의 시간 복잡도를 가진다.</p>\n<p>공간 복잡도: O(n)의 공간 복잡도를 가진다.</p>\n<h3 id=\"2️⃣-문제풀이2\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B42\" aria-label=\"2️⃣ 문제풀이2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 문제풀이2:</h3>\n<p>leetcode에 올라온 풀이중 갈끔한 풀이가있어 하나 가져왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverseWords</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\twords <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\twords<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\twords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> words <span class=\"token keyword\">if</span> item <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></code></pre></div>\n<p>**리스트 컴프리헨션(list comprehension)**을 활용한 풀이로 상당히 깔끔하다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B41\">1️⃣ 문제풀이1:</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B42\">2️⃣ 문제풀이2:</a></li>\n</ul>\n</div>","excerpt":"문제: leetcode - 151 (Reverse Words in a String) 🎉 기분이 좋은 밤이다. 블로그에 현재까지 정리한 문제풀이는 지금 작성하고 있는 리트코드 151번 문제를 포함해서 3개밖에 되지 않지만 벌써 3주째 하루에 한 문제씩 알고리즘 문제를 풀고있다. 아직까지 Hard level의 문제는 시도조차 하지 않고 있고 easy 또는 Medium level의 문제 위주로 풀고있다. Easy 문제는 그럭저럭 다른 사람이 작성한 해답을 보지 않고 풀이를 완성하는 횟수가 증가하고 있지만 Medium level의 문제만 나오면 아직까지 책이나 리트코드에서 다른 사람들이 작성한 풀이를 참고해서 해결하고 있다. 내가 느끼기에도 이번 문제는 Medium level이라고 하기에는 다른 문제들에 비해 쉬웠지만 답지 없이 미디엄 레벨 문제를 풀었다 (아직까지 손에 꼽는다). 다른 사람들이 보면 “뭐 이 쉬운문제 하나 풀었다고”라고 생각하겠지만😅. 1️⃣ 문제풀이1: 파이썬의 내장함수인…","frontmatter":{"date":"March 22, 2021","title":"leetcode(151)- Reverse Words in a String","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leecode-151/"}},"next":{"id":"08fd98ab-1a03-5af1-a296-d4fc8d35a4c6","html":"<p>문제: <a href=\"https://leetcode.com/problems/valid-parentheses/submissions/\">leetcode -20</a> (valid parentheses)</p>\n<p>이번 문제의 난이도는 easy이고 스택을 이용하는 대표적인 문제이다. 문제 풀이를 위해서 스택의 구현이 직접 필요하지 않으며 python 리스트로 충분히 구현이 가능하다. pop() 연산만이 필요하기 때문에 데크를 이용한 풀이와 시간적으로 차이가 없다.</p>\n<p>입력 값으로 괄호로 구성된 문자열이 주어진다. 주어진 문자열을 검사해서 모든 괄호들이 올바르게 닫혀 있는지 확인하여 bool 타입의 결과 값을 리턴 해줘야 한다. 여기서 올바르게 닫혀있는 괄호란 (){}이나 ({}) 같이 닫는 괄호가 나올 때 제일 최근에 있는 여는 괄호와 매칭된 형태이다.</p>\n<p>✅ 올바르게 닫힌 괄호 예시:</p>\n<ul>\n<li>()</li>\n<li>({})</li>\n<li>{{([])}}</li>\n</ul>\n<p>❌ 올바르게 닫히지 않은 예시:</p>\n<ul>\n<li>((</li>\n<li>((])</li>\n<li>]]</li>\n<li>({[)})</li>\n</ul>\n<h3 id=\"문제풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제풀이:</h3>\n<p>이 문제의 풀이는 간단하다.</p>\n<ol>\n<li>첫번째로 주어진 문자열을 반복문으로 왼쪽에서부터 오른쪽으로 이동한다.</li>\n<li>열린 괄호가 나오면 스택에 넣는다.</li>\n<li>만약 닫힌 괄호가 나오면 현재 <strong>stack의 top</strong>, 즉 가장 최신에 들어온 열린 괄호와 비교하여 서로가 상응하는 쌍인지 확인하다.</li>\n<li>비교할때 pop() 연사을 실행하기 때문에 중간에 break없이 모든 ilteration이 끝났다면 최종적으로 stack은 비어있게 된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    match <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> char <span class=\"token keyword\">in</span> <span class=\"token string\">\"({[\"</span><span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n            <span class=\"token keyword\">if</span> char <span class=\"token operator\">==</span> match<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></code></pre></div>\n<p>시간 복잡도: 문자열의 길이만큼 반복문을 돌기 때문에 O(n)의 시간 복잡도를 가진다.</p>\n<p>공간 복잡도: 열린 문자를 Stack에 담기 때문에 O(n)의 공간 복잡도를 가진다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">문제풀이:</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 21, 2021","title":"leetcode(20)- Valid parentheses","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-20/"}},"prev":{"id":"8b82364b-2829-556f-8cd7-348af94b4575","html":"<p>문제: <a href=\"https://leetcode.com/problems/merge-sorted-array/submissions/\">leetcode - 88</a> (Merge sorted array)</p>\n<p>오름차순으로 정렬된 정수들로 이루어진 2개의 배열 nums1과 nums2가 입력값으로 주어진다. 그냥보면 병합정렬 문제이다. 특이한점이 있다면 return 값으로 병합된 배열을 반환하지 않고 초기에 주어진 nums1에 직접 병합을 해야한다.</p>\n<p>예시:</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/c6e18f9b-d91f-432b-a995-04f0203f050d/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%206.44.45.png\" alt=\"\"></p>\n<h3 id=\"1️⃣-문제해설-1\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%95%B4%EC%84%A4-1\" aria-label=\"1️⃣ 문제해설 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제해설 1:</h3>\n<p>처음에 지문을 읽고는 뭐지..?라는 생각이 들었다. 첫번째로 nums1을 보면 정렬된 정수들뒤로 nums2의 길이만큼 0으로 공간이 초기화되어 있고 배열 내 병합할 원소의 개수를 의미하는 m, n이 주어진다. 결론부터 말하면 sorting 없이 포인터를 지정해서 배열의 병합이 가능하다. 해당 문제풀이는 discussion에서 다른 사람의 코드를 가져왔다. 문제해설2에서 다루겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums2<span class=\"token punctuation\">:</span>\n        nums1<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num\n        m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    nums1<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>정렬을 신경쓰지 않고, nums2에 있는 모든 요소들을 nums1에 넣어준다.</li>\n<li>list.sort()로 오름차 정렬을 시켜준다.</li>\n</ol>\n<p>시간 복잡도: 파이썬의 sort() 함수가 O(n log n)의 연산 시간이 걸리므로 최종적으로 O(n log n)의 시간 복잡도를 가지는 풀이이다.</p>\n<h3 id=\"2️⃣-문제해설-2\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%95%B4%EC%84%A4-2\" aria-label=\"2️⃣ 문제해설 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 문제해설 2:</h3>\n<p>위에서 언급했듯이 sorting이 필요없는 포인터를 이용한 풀이이다. nums1을 길이만큼 한번의 iteration을 실행하므로 O(n)의 시간 복잡도를 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    last <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># merge in reverse order</span>\n    <span class=\"token comment\"># nums2 elements to the end of nums1</span>\n    <span class=\"token keyword\">while</span> m <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> nums1<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums2<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            nums1<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            nums1<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            m <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        last <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># fill nums1 with leftover nums2 elements at the beginning</span>\n    <span class=\"token comment\"># this is because elements leftover in nums2 are smaller than any values in nums1</span>\n    <span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        nums1<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        last <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n</code></pre></div>\n<ol>\n<li>아래 그림과 같이 nums1에 마지막 인덱스, m과 n의 인덱스에 각각 포인터를 위치 시킨다.</li>\n</ol>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/14d190d5-1aed-45d7-8716-278f0e4b3e36/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%207.54.34.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>\n<p>m또는 n의 길이가 0이되기 전까지 즉, nums1과 nums2의 오른쪽 끝에서 왼쪽 끝으로 이동하면서 nums2의 값과 nums1의 값을 비교한다.</p>\n</li>\n<li>\n<p>만약 nums1[m] &#x3C; nums2[n]이라면 n의 마지막 요소는 nums1과 nums2의 모든 요소들중 가장 큰 정수일것이다(nums1과 nums2 모두 오름차도 정렬이 되어있음에).</p>\n</li>\n<li>\n<p>이제 nums2의 마지막 인덱스 값, 예제에서는 6의 nums1 배열의 끝에 넣어준다.\n<img src=\"https://images.velog.io/images/heesungj7/post/88cd2a67-8338-49d5-a13b-73931f5fae73/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.04.14.png\" alt=\"\">\n<img src=\"https://images.velog.io/images/heesungj7/post/89b9efa8-5c4f-4b36-84de-4b172c454cbe/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.06.02.png\" alt=\"\"></p>\n</li>\n<li>\n<p>만약 nums1[m]이 > nums2[n]라면 nums1[m]을 last 포인터 위치에 대입하고 m과 last의 포인터만 이동시킨다.</p>\n</li>\n</ol>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/8a04d0ae-94b3-4e81-9abe-8c1d03095c9e/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.09.23.png\" alt=\"\"></p>\n<p>포인터의 이동을 파워 포인터로 그려고보려 했지만…깔끔에가 못그리겠다. 혹시나 미래에 이 풀이를 다시 찾아보는 나이거나 지나가다 풀이를 보려고 들어오신 분이라면 아래 유튜브 링크를 참조해주세요.</p>\n<p>👉 <a href=\"https://www.youtube.com/watch?v=C4oBXLr3zos&#x26;t=195s\">유튜브 링크</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%95%B4%EC%84%A4-1\">1️⃣ 문제해설 1:</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%95%B4%EC%84%A4-2\">2️⃣ 문제해설 2:</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 23, 2021","title":"leetcode(88)- Merge sorted array","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-88/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leecode-151/","nextSlug":"/leetcode-20/","prevSlug":"/leetcode-88/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}