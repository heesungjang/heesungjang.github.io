{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-46/",
    "result": {"data":{"cur":{"id":"61b41ba9-fb72-5c22-b074-c31fb247a465","html":"<p>문제:<a href=\"https://leetcode.com/problems/permutations/submissions/\">leetcode-46</a>[Permutation]</p>\n<p>Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [1,2,3]\n\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</code></pre></div>\n<p>정수로 이루어진 배열을 입력 값으로 받고 해당 정수를로 조합 가능한 모든 순열을 만드는 문제이다.\n<img src=\"https://velog.velcdn.com/images/heesungj7/post/206e43bc-0002-4baa-a151-699287a7c7c6/image.png\" alt=\"\">\n순열의 수를 추출하는 건 고등학교 수학 시간에 배웠으며 이산수학에도 등장하는 수식으로 어렵지 않게 계산할 수 있다. 이 예제값의 순열의 수 수식은 이 되고, 분모는 (3-3) !=1 이므로 분자의 팩토리얼factorial만 계산하면 순열의 수는 3!=3×2×1=6이 된다. 하지만 수학식에 대입해서 가능한 경우의 수를 계산하는게 아니라 가능한 모든 조합을 모두 출력하는건 쉽지 않다.</p>\n<p>이 문제는 그래프로 접근해야 한다. 위 그림처럼 순열이란 결국 모든 가능한 경우를 그래프 형태로 나열한 결과라고 할 수 있다.</p>\n<h3 id=\"문제풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제풀이:</h3>\n<p>위 그래프에서 리프 노드(leaf node) 즉, 마지막 노드의 값이 순열의 최종 결과이다. 이때 자식 노드의 개수를 살펴보면 root 노드는 3개 그 다음은 2개, 1개 순으로 작아지는 걸 볼 수 있다. 이는 위에서 풀이한 순열이 수식(3! = 3<em>2</em>1)과 동일하다. 예를 들어 입력값이 4개라면 root 부터 자식 노드의 개수는 4<em>3</em>2*1 로 순열의 경우의 수는 24개가 될 것이다.</p>\n<p>이제 위 그래프를 DFS 탐색 알고리즘으로 풀이해보면 for문을 돌며 이전 값을 하나씩 덧붙여 계속 재귀 호출을 진행하다 리프 노드에 도달한 경우 즉, elements 의 개수가 0이 된 지점에 결과에 추가한다.</p>\n<p>dfs 재귀에서는:</p>\n<ol>\n<li>목록에서 하나의 요소를 선택하고 사용 가능한 정수 목록에서 제거한다.</li>\n<li>나머지 목록에 대한 모든 순열을 생성하고 현재 조합중인 리스트(num_set)에 추가한다.</li>\n<li>dfs방식으로 리프 노드까지 탐색이 끝나면 결과(result)에 담고 pop() 하여 다음 노드를 탐색한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 탐색이 끝나면 조합된 순열을 추가</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 현재 탐색중인 순열 조합</span>\n    nums_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 종료 케이스</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 다름 dfs 탐색에서 같은 리스트를 사용하기 때문에 레프런스가 아닌 새로운 배열을 추가</span>\n            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nums_set<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> elements<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 마찬가지로 elements는 다음 num에도 같은 같으로 사용되므로</span>\n            <span class=\"token comment\"># 새로운 리스트를 생성</span>\n            new_list <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># 방문처리 := 현재 이미 사용한 숫자는 다음 dfs 탐색에서 제외</span>\n            new_list<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n            nums_set<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n            dfs<span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 백트래킹 하면서 올라올때 num을 다시 pop해줘서 빈 배열로 다시 만들어줌</span>\n            nums_set<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># dfs 탐색 시작</span>\n    dfs<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># dfs 탐색이 끝나면 result 반환</span>\n    <span class=\"token keyword\">return</span> result</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">문제풀이:</a></li>\n</ul>\n</div>","excerpt":"문제:leetcode-46[Permutation] Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order. 정수로 이루어진 배열을 입력 값으로 받고 해당 정수를로 조합 가능한 모든 순열을 만드는 문제이다.\n\n순열의 수를 추출하는 건 고등학교 수학 시간에 배웠으며 이산수학에도 등장하는 수식으로 어렵지 않게 계산할 수 있다. 이 예제값의 순열의 수 수식은 이 되고, 분모는 (3-3) !=1 이므로 분자의 팩토리얼factorial만 계산하면 순열의 수는 3!=3×2×1=6이 된다. 하지만 수학식에 대입해서 가능한 경우의 수를 계산하는게 아니라 가능한 모든 조합을 모두 출력하는건 쉽지 않다. 이 문제는 그래프로 접근해야 한다. 위 그림처럼 순열이란 결국 모든 가능한 경우를 그래프 형태로 나열한 결과라고 할 수 있다. 문제풀이: 위 그…","frontmatter":{"date":"April 25, 2022","title":"leetcode(46) - permutation","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-46/"}},"next":{"id":"d24cfc06-0f1c-5edd-a57c-7b66ef03226e","html":"<p>문제:<a href=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/submissions/\">leetcode-17</a>(Letter Combinations of a Phone Number)</p>\n<p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Input<span class=\"token punctuation\">:</span> digits <span class=\"token operator\">=</span> <span class=\"token string\">\"23\"</span>\nOutput<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ad\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ae\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"af\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bd\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"be\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bf\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cd\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ce\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cf\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>2에서 9까지 숫자가 주어졌을 때 전화 번호로 조합 가능한 모든 문자를 출력하는 문제이다. 대표적인 백트래킹 문제이다.</p>\n<p>코드가 짧고 문제를 이해하는데 크게 어려움이 없어서 구현도 쉬울것으로 예상했지만 여러가지 답안지를 보고 이해하는데도 오랜 시간이 걸렸다.</p>\n<p>일단 문제 접근 방식은 아래와 같다.</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/849754c7-3dd8-47ea-a165-c78e56ff9e5b/image.png\" alt=\"\"></p>\n<h3 id=\"문제풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제풀이:</h3>\n<ol>\n<li>위 그림과 같이 dfs로 전체를 탐색한 후 끝까지 탐색이 완료되면 백트래킹 하는 방식이다.</li>\n<li>재귀 호출을 할 때 cur_str에 현재 탐색중인 문자열을 붙여주고 leaf 노드에 도달하면 global result에 값을 반환하고 백트래킹하는 방식이다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t        <span class=\"token comment\"># 지금까지 붙여온 path 문자열의 길이와 digits의 길이가</span>\n            <span class=\"token comment\"># 같다면 즉, 탐색이 끝났으면 결과에 추가시킨뒤에 내부 함수를 종료 시킨다.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    dfs<span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> digits<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        dfs<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<p>i, j 및 dfs 함수를 순서대로 따라가면 이런식으로 백트래킹 됨을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">i <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ad<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ae<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> af<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> bd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> be<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> bf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bf'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> cd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cd'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ce<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ce'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> cf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ce'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cf'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"헷갈렸던-부분\" style=\"position:relative;\"><a href=\"#%ED%97%B7%EA%B0%88%EB%A0%B8%EB%8D%98-%EB%B6%80%EB%B6%84\" aria-label=\"헷갈렸던 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헷갈렸던 부분:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">👉 맨 처음 i가 0일 때의 모든 재귀가 끝나고 i가 1일 때 즉,\n\n1. 위 쪽 결과에서 맨밑 3줄에 해당하는 지점에서는 dfs가 호출되고\n2. range(2, 2) 아래와 같이 for문의 범위에 해당하는 값이 없어서 아무것도 수행되지 않고 끝나게 된다.\n\ni : 1, j: d, dfs(2, d)\ni : 1, j: e, dfs(2, e)\ni : 1, j: f, dfs(2, f)</code></pre></div>\n<p>코드만 보고는 첫번째 outer for문이 종료되고 i가 1일때 시작되는 탐색이 어떻게 진행되는지 이해하기 어려웠다. 결국 차근차근 코드를 써가면서 확인하면 위와같이 i가 1로 시작하는 범위에는 아무런 탐색없이 반복문이 종료된다.</p>\n<p>⭐️ 생각을 해보면 어차피 첫번째로 입력된 번호(위 예제에서는 “2”)의 문자들로 dfs 탐색을 하게되면 모든 조합이 나오고 두번째 번호(위 예제에서는 “3”)으로 다시 탐색을 하게되면 결국 문자의 순서만 바뀐 duplicated 조합이 다시 만들어진다.</p>\n<p>그렇다면 어차피 첫번째 번호의 문자들로만 dfs 탐색을 하기 때문에 아래와 같이 코드를 수정해봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> cur_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 종료 조건</span>\n            <span class=\"token comment\"># 현재 조합한 letters가 입력된 번호와 길이가 같다면 더 이상 탐색 x</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cur_str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cur_str<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n\n       ❗️❗️ letters <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n       ❗️❗️ <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span>\n               dfs<span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cur_str <span class=\"token operator\">+</span> char<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 입력된 번호가 없나면 빈 배열 출력</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> digits<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># number to letters maping</span>\n        dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">}</span>\n\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># dfs 탐색 시작</span>\n        dfs<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># dfs 탐색 종료</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<p>❗️❗️로 표시한 부분을 보면 일단 2중 for문이 사라져서 기존 답안 코드보다 지관적이고</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">i : 1, j: d, dfs(2, d)\ni : 1, j: e, dfs(2, e)\ni : 1, j: f, dfs(2, f)</code></pre></div>\n<p>위와 같은 필요 없는 연산또한 실행하지 않는다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">문제풀이:</a></li>\n<li><a href=\"#%ED%97%B7%EA%B0%88%EB%A0%B8%EB%8D%98-%EB%B6%80%EB%B6%84\">헷갈렸던 부분:</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 23, 2022","title":"leetcode(17)- Letter Combinations of a Phone Number","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-17/"}},"prev":{"id":"ee8431ba-c162-5e14-a9e9-7756f14f7413","html":"<h3 id=\"들어가며\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚪들어가며</h3>\n<p>아래 코드의 출력 결과는 무엇일까?</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/327e7810-c3dc-456c-a076-97240fe57228/image.png\" alt=\"\"></p>\n<p>자바스크립트 **primitive type(기본형)**과 <strong>reference type(참조형)</strong> 데이터 타입의 동작과 원리를 살펴보고 평소에 애매모호하게 알고 있던 개념을 확실히 잡아보자.</p>\n<h3 id=\"자바스크립트-데이터-타입-종류\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EC%A2%85%EB%A5%98\" aria-label=\"자바스크립트 데이터 타입 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 데이터 타입 종류</h3>\n<p>자바스크립트 데이터 타입은 <strong>기본형</strong>과 <strong>참조형</strong> 크게 두가지가 있다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>기본형</strong></th>\n<th align=\"center\"><strong>참조형</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">number</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"center\">array</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">function</td>\n</tr>\n<tr>\n<td align=\"center\">null</td>\n<td align=\"center\">date</td>\n</tr>\n<tr>\n<td align=\"center\">symbol</td>\n<td align=\"center\">RegExp</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"primitive-type기본형\" style=\"position:relative;\"><a href=\"#primitive-type%EA%B8%B0%EB%B3%B8%ED%98%95\" aria-label=\"primitive type기본형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive type(기본형)</h3>\n<p>자바스크립트의 기본형 데이터 타입은 <strong>불변성</strong>을 뛴다는 것을 어디선가 듣거나 읽었을 것이다. 처음 이 개념을 공부할 때는 “불변”이 아니라 “불편”했다.</p>\n<p>여기서 변하지 않는다는 것은 무엇을 의미할까?</p>\n<p>아래 코드를 보면 분명 변수에 할당한 값은 이후에 다시 새로운 값으로 변경할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> initialVariable <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>\n\ninitialVariable <span class=\"token operator\">=</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>initialVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"2\"</span></code></pre></div>\n<p>리액트 코어 팀에 Dan abramov의 표현을 빌리자면 자바스크립트의 기본형 데이터 타입은 “하늘에 떠 있는 별”과 같다고 표한다. 컴퓨터 언어를 설명하면서 저런 표현이 가능하다니 멋있다.</p>\n<blockquote>\n<p>“They are a permanent part of our JavaScript universe. I can point to them, but I can’t create, destroy, or change them.”</p>\n</blockquote>\n<p>별과 같다니 무슨 뜻일까❓</p>\n<p>자바스크립트가 기본형 데이터 타입을 메모리에 저장하는 과정을 개략적으로 살펴보면 마치 우리가 하늘에 떠 있는 별을 손가락으로 가리키는 건 가능하지만 직접 가서 만질 수 없는 것처럼 작동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'heesung'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리가 위와 같이 코드를 작성해도 자바스크립트는 아래와 같이 코드를 읽는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myName<span class=\"token punctuation\">;</span>\n\nmyName <span class=\"token operator\">=</span> <span class=\"token string\">'heesung'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>“변수에 값을 할당한다”라는 말을 익히 들어봤을 것이다. 위 동작 원리를 이해하려면 <strong>변수</strong>와 <strong>변수명</strong> 그리고 해당 변수에 할당하는 <strong>값</strong>의 차이를 알아야 한다.</p>\n<p>프로그래밍에서는 <strong>변수</strong> “변할 수 있는 무언가”이며 무언가는 데이터가 된다. <strong>변수명</strong>은 어떤 특정 데이터를 식별하는 이름이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myName<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 풀어쓰면 <code class=\"language-text\">let myName;</code>은 “메모리에 변경 가능한 데이터를 담을 공간을 확보하고 해당 공간의 찾을때 사용할 식별자로 myName 변수명(이름)을 사용한다”가 된다. 이제 이렇게 확보한 공간에 문자열을 담았다가 숫자를 담는 등의 다양한 명령을 내릴 수 있게 된다. 우리에 예시 코드에서는 해당 공간에 문자열 “heesung”을 담은 것이다.</p>\n<h3 id=\"️-under-the-hood\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-under-the-hood\" aria-label=\"️ under the hood permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚙️ Under the hood</h3>\n<p>이를 바탕으로 컴퓨터가 우리의 명령을 받아 메모리 영역에서 어떤 작업을 수행하는지 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myName<span class=\"token punctuation\">;</span>\nmyName <span class=\"token operator\">=</span> <span class=\"token string\">'heesung'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/d557a81a-f386-4736-b2f9-86f7026de8b8/image.png\" alt=\"\"></p>\n<p>위 코드가 실행되면 명령을받은 컴퓨터가 메모리에서 @1003 위치에 비어있는 메모리 공간 하나를 확보한다. 이 공간의 이름(식별자)을 myName이라고 지정한다. 여기까지가 <strong>변수 선언</strong> 과정이다. 이후에 우리가 myName에 접근하고자 하면 컴퓨터는 메모리에서 myName이라는 이름을 가진 주소를 검색해 해당 공간에 담긴 데이터를 반환한다.</p>\n<p>이제 컴퓨터는 두번째 줄에 있는 <code class=\"language-text\">myName = \"heesung\"</code>이라는 명령을 받아 myName이라는 이름을 가진 주소를 검색해서 그곳에 “heesung”을 할당한다.</p>\n<p>❗️여기서 중요한 점이 해당 위치에 문자열 “heesung”을 직접 저장하지는 않는다. 데이터를 저장하기 위한 별도의 메모리 공간을 다시 확보해서 문자열 “heesung”을 저장하고, 그 주소를 myName의 메모리 공간에 저장한다. 값을 저장하고 있는 위치는 point(가르키는)하는 것이다. 이를 보고 Dan abramov가 “마치 우리가 별을 손가락으로 가리키는 것과 같다”라고 한 것이지 않을까?</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/0a4c082c-e9e3-4b4b-b66d-b65afaea9cf4/image.png\" alt=\"\"></p>\n<blockquote>\n<p>여기서 왜 값을 직접 대입하지 않고 굳이 또 공간을 할당해서 값을 저장하고 주소를 대입하는 과정을 거치는지 의문이 들 수있다. 이는 데이터의 변환을 자유롭게 하고 메모리를 효율적으로 관리하기 위한 것이다. 자세한 설명은 “코어 자바스크립트” 또는 다른 자바스크립트 책이나 블로그를 찾아보길 바란다.</p>\n</blockquote>\n<p>이제 기존 이름만 가지고 있던 myName에 성을 추가해보고, 기본형이 “불변”이라는 뜻을 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myName<span class=\"token punctuation\">;</span>\nmyName <span class=\"token operator\">=</span> <span class=\"token string\">'heesung'</span><span class=\"token punctuation\">;</span>\n\nmyName <span class=\"token operator\">+=</span> <span class=\"token string\">' jang'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"heesung jang\"</span></code></pre></div>\n<p>문자열 “heesung”에 “jang”을 추가하라고 명령하면 컴퓨터는 앞서 “heesung”이 저장된 공간에 “heesung jang”을 할당하는 대신 문자열을 새로 만들어 별도의 공간에 저장하고, 그 주소를 myName 변수 공간에 연결한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/379cbc48-cd8c-4d5a-b91a-89ee5c1bc902/image.png\" alt=\"\"></p>\n<p>❗️ 기존 문자열에 어떤 변화를 가하든 상관없이 무조건 새로 만들어 별도의 공간에 저장한다. 이는 해당 메모리에 문자열이 아니고 숫자가 담겨있다고 해도 같다. 결국 변경은 새로 만드는 동작을 통해서만 이루어지며, 한 번 만들어진 값은 가비지 컬렉팅을 당하지 않는 한 영원히 변하지 않는다. <strong>이것이 자바스크립트의 기본형 데이터 타입이 불편 값의 성질을 가진다는 의미다.</strong></p>\n<h4 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고:</h4>\n<ul>\n<li><a href=\"https://justjavascript.com/learn\">Just Javascript - Dan abramov</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/78586788\">코어 자바스크립트</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">🚪들어가며</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EC%A2%85%EB%A5%98\">자바스크립트 데이터 타입 종류</a></p>\n</li>\n<li>\n<p><a href=\"#primitive-type%EA%B8%B0%EB%B3%B8%ED%98%95\">Primitive type(기본형)</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-under-the-hood\">⚙️ Under the hood</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고:</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 01, 2022","title":"Javascript - 데이터 타입 (1)","categories":"core","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/코어-자바스크립트-데이터-타입/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-46/","nextSlug":"/leetcode-17/","prevSlug":"/코어-자바스크립트-데이터-타입/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}