{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/algo-prime-number/",
    "result": {"data":{"cur":{"id":"3ea323c0-1f6c-5f8e-aa01-aa2cee893b9a","html":"<p>보통 소수 찾기 문제에서 소수의 정의를 같이 제공하기 때문에 반복문으로 충분히 풀이가 가능하다. 그치만 약수가 가지는 특징을 이용하면 성능 개선이 가능하다.</p>\n<p>알고리즘 문제를 풀기 위해서 특정 문제에서만 사용되는 지엽적인 지식들은 모두 알고 있을 수 없지만 코딩 테스트에서 특정 자연수가 소수인지 판별하는 문제가 자주 출제되기 때문에 소수에 대한 성질은 짚고 넘어가고자 한다.</p>\n<h3 id=\"1️⃣-소수란\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EC%86%8C%EC%88%98%EB%9E%80\" aria-label=\"1️⃣ 소수란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 소수란:</h3>\n<ul>\n<li><strong>소수</strong>란 1보다 큰 자연수 중에서 1과 자기 자신을 제외한 자연수로 나누어 떨어지지 않는 자연수이다.\ne.g) <strong>6</strong>은 1, 2, 3, 6으로 나누어 떨어지므로 소수가 아니다.\ne.g) <strong>7</strong>은 1과 7을 제외하고는 나누어 떨어지지 않으므로 소수이다.</li>\n</ul>\n<p>소수 정의에 주어진 조건만으로 반복문을 통해서 소수를 판별해보자.</p>\n<h4 id=\"기본-풀이\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%92%80%EC%9D%B4\" aria-label=\"기본 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 풀이:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_prime_number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token comment\"># 2부터 (n-1) 까지의 모든 수를 확인</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># n이 해당 수로 나누어 떨어지면</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># 소수가 아님</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 소수임</span></code></pre></div>\n<p>소수 판별을 위한 연산량을 생각해보자. 주어진 자연수 n이 10억이라고 한다면 해당 자연수가 소수인지 판별하기 위해서 2부터 10억 - 1까지 반복문 안에 로직을 실행한다. 즉, 2부터 n-1의 모든 i가 n의 약수인지를 확인하기 때문에 o(n)의 시간 복잡도를 가진다. n의 최대값이 10억이라면 해당 문제를 1초~2초의 시간 조건을 통과하기 힘들기 때문에 타임아웃에 걸릴것이다.</p>\n<p>그렇다면 위 코드를 조금 더 개선할 수 있을까?</p>\n<blockquote>\n<p>짝수들은 2를 제외하고 모두 합성수라는 사실을 이용해 개선 할 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_prime_number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 1은 소수가 아니다.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2는 소수이다.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        👉 <span class=\"token comment\"># 나머지 짝수는 소수가 아니다.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token comment\"># 2부터 (n-1) 까지의 모든 수를 확인</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># n이 해당 수로 나누어 떨어지면</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># 소수가 아님</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 소수임</span></code></pre></div>\n<p>위 코드에서는 짝수들은 2를 제외하고 모두 합성수라는 사실을 이용해 알고리즘의 성능을 개선했다. n이 짝수인 경우에 시간복잡도는 O(N)이다. 그렇지만 최악의 경우 즉, n의 값이 홀수라면 여전히 O(N)의 시간 복잡도가 걸린다.</p>\n<hr/>\n<h3 id=\"2️⃣-약수의-성질\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EC%95%BD%EC%88%98%EC%9D%98-%EC%84%B1%EC%A7%88\" aria-label=\"2️⃣ 약수의 성질 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 약수의 성질:</h3>\n<blockquote>\n<p>모든 약수가 가운데 약수를 기준으로 곱셈 연산에 대해 대칭을 이루는 것을 알 수 있다</p>\n</blockquote>\n<p>자연수N의 한 약수a를 생각해보자.N을a로 나눈 몫을b라고 하면 아래의 식이 성립한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">𝑁 = 𝑎𝑏 (단, 𝑎 ≤ 𝑏 )</code></pre></div>\n<p>즉,한 자연수N에 대해 서로 곱하여N이 되는 약수 쌍a,b가 <strong>항상</strong>❗️ 존재한다 (편의상a는 b이하인 경우만 고려하자).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(𝑎≤𝑏)라는 조건 하에서 N에 대한 a의 최대 값은 𝑎≤ 𝑁이다.\n\n그러므로,N이 소수가 아니라면 2≤𝑎≤ 𝑁 범위에 약수a가 반드시 존재한다.\n\n대우명제>2≤𝑎≤ 𝑁 범위에 약수가 없다면N은 소수다.</code></pre></div>\n<p>해당 명제를 그림으로 보면 훨씬 이해하기 쉽다.</p>\n<p><img src=\"https://media.vlpt.us/images/heesungj7/post/fdc4ba75-7c1c-4ff5-8415-727943be6a3c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-04-04%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.02.09.png\" alt=\"\"></p>\n<p>위 그림에 16를 대입해보자.</p>\n<ul>\n<li>예들 들어 16의 약수는 1, 2, 4, 8, 16이다.</li>\n<li>이때 2 X 8 = 16은 8 X 2 = 16과 대칭이다.</li>\n<li>예를 들어 16이 2로 나누어떨어진다는 것은 8로도 나누어떨어진다는 것을 의미한다</li>\n</ul>\n<p><img src=\"https://media.vlpt.us/images/heesungj7/post/8d97df8b-62c4-4832-ae76-6d6481399d96/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-04-04%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.02.44.png\" alt=\"\"></p>\n<p>❗️ 따라서 우리는 특정한 자연수의 모든 약수를 찾을 때 가운데 <strong>약수(제곱근)까지만</strong> 확인하면 된다.</p>\n<h4 id=\"기본-풀이-1\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%92%80%EC%9D%B4-1\" aria-label=\"기본 풀이 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 풀이:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_prime_number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 1은 소수가 아니다.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2는 소수이다.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 나머지 짝수는 소수가 아니다.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token comment\"># 2부터 (n의 제곱근) 까지의 모든 수를 확인</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># x가 해당 수로 나누어 떨어진다면</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 소수가 아님</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 소수임</span></code></pre></div>\n<p>개선된 코드의 시간 복잡도는 제곱근까지 즉 약수들의 절반 길이만큼만 반복문을 실행하기 때문에 O(n^1/2))이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1%EF%B8%8F%E2%83%A3-%EC%86%8C%EC%88%98%EB%9E%80\">1️⃣ 소수란:</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%92%80%EC%9D%B4\">기본 풀이:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2%EF%B8%8F%E2%83%A3-%EC%95%BD%EC%88%98%EC%9D%98-%EC%84%B1%EC%A7%88\">2️⃣ 약수의 성질:</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%92%80%EC%9D%B4-1\">기본 풀이:</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"보통 소수 찾기 문제에서 소수의 정의를 같이 제공하기 때문에 반복문으로 충분히 풀이가 가능하다. 그치만 약수가 가지는 특징을 이용하면 성능 개선이 가능하다. 알고리즘 문제를 풀기 위해서 특정 문제에서만 사용되는 지엽적인 지식들은 모두 알고 있을 수 없지만 코딩 테스트에서 특정 자연수가 소수인지 판별하는 문제가 자주 출제되기 때문에 소수에 대한 성질은 짚고 넘어가고자 한다. 1️⃣ 소수란: 소수란 1보다 큰 자연수 중에서 1과 자기 자신을 제외한 자연수로 나누어 떨어지지 않는 자연수이다.\ne.g) 6은 1, 2, 3, 6으로 나누어 떨어지므로 소수가 아니다.\ne.g) 7은 1과 7을 제외하고는 나누어 떨어지지 않으므로 소수이다. 소수 정의에 주어진 조건만으로 반복문을 통해서 소수를 판별해보자. 기본 풀이: 소수 판별을 위한 연산량을 생각해보자. 주어진 자연수 n이 10억이라고 한다면 해당 자연수가 소수인지 판별하기 위해서 2부터 10억 - 1까지 반복문 안에 로직을 실행한다. 즉, 2부…","frontmatter":{"date":"April 04, 2022","title":"Algorithm[소수]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-prime-number/"}},"next":{"id":"390e96e0-3bd7-5724-a676-285b515886f7","html":"<h4 id=\"파이썬에서-01--02의-값은-얼마일까-\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C-01--02%EC%9D%98-%EA%B0%92%EC%9D%80-%EC%96%BC%EB%A7%88%EC%9D%BC%EA%B9%8C-\" aria-label=\"파이썬에서 01  02의 값은 얼마일까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬에서 0.1 + 0.2의 값은 얼마일까? 🤔</h4>\n<p>0.3이 나올 것 같지만 실제 계산 값은 0.30000000000000004가이 나온다. 파이썬은 실수를 부동 소수점 방식으로 표현하기 때문에 실수를 정확히 표현하는 것이 가능하지 않다. 만약 두 실수가 같은지 판단할 때 다음과 같이 0.1 + 0.2와 0.3은 같지 않다고 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.3</span>\n\n<span class=\"token operator\">></span> <span class=\"token boolean\">False</span></code></pre></div>\n<p>이렇게 실수를 근삿값으로 표현하면서 발생하는 문제를 부동소수점 반올림 **오차(rounding error)**가 발생하기 때문에 실수를 비교할 때는 연산한 값과 비교할 값의 차이를 구한 뒤 특정 오차 범위 안에서 같은지 확인해야 한다. 파이썬 3.5이상부터는 두 실수가 같은지 판단할 때 math.isclose 함수를 사용 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\nmath<span class=\"token punctuation\">.</span>isclose<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>❗️ 알고리즘 문제를 풀 때도 실수를 비교하는 조건 연산이 있다면 실수 계산을 피할 수 있는지 고려해보는 것이 좋다.</p>\n<h4 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_index</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tu <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> n\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tdx <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">-</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># i까지의 원소들 중 평균과의 최소거리</span>\n\t\tdi <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">-</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 현재 원소와 평균과의 거리</span>\n\n\t\t<span class=\"token keyword\">if</span> di <span class=\"token operator\">&lt;</span> dx<span class=\"token punctuation\">:</span>\n\t\t\tx <span class=\"token operator\">=</span> i\n\n\t<span class=\"token keyword\">return</span> x</code></pre></div>\n<ol>\n<li>위 예시는 데이터는 -100,000 이상 100,000 이하의 정수를도 이루어진 배열이 주어진다.</li>\n<li>데이터 배열의 모든 원소들의 평균 값과 가장 가까운 원소를 찾고 해당 원소의 인덱스를 반환하는 함수이다.</li>\n<li>이때 평균과의 거리와 가작 가까운 즉, 평균과의 거리가 작은 원소는 아래와 같이 구할 수 있다.</li>\n</ol>\n<ul>\n<li>평균과의 거리 𝐷 = 𝑑𝑎𝑡𝑎[𝑖] − 𝜇 가 가장 작은 인덱스 𝑥 계산하기\n• 평균을 계산한 이후\n• 평균과 차이가 가장적은 i들 중 • 가장 작은(왼쪽에 있는) i</li>\n</ul>\n<p>이때 <strong>가능하다면 계산 과정에서 실수를 사용한 계산은 최소화하는 것이 좋다</strong>. 부동 소수점 의 오차로 인해 예상치 못한 오동작이 생길 수 도 있습니다. 대부분의 비교식은 조금 변환하면 정수의 계산으로 바꿀 수 있다.</p>\n<ul>\n<li>👉 <strong>𝐷=𝑑𝑎𝑡𝑎[𝑖]−𝜇 라면</strong>\n• 𝑛𝐷 = 𝑛×𝑑𝑎𝑡𝑎[𝑖]−𝑆 가 된다.S는 모든 원소의 합. 𝑖\n• n과 D모두 양수이므로 성립한다.\n• 모든 연산의 결과는 정수가 된다.</li>\n</ul>\n<p>❗️ 대소관계를 비교하는 경우, 대소관계만 유지 된다면 식을 변형해도 된다.</p>\n<blockquote>\n<p>|𝑑𝑎𝑡𝑎[𝑖]− 𝜇 &#x3C; 𝑑𝑎𝑡𝑎[𝑗]− 𝜇 ⟺ 𝑛×𝑑𝑎𝑡𝑎[𝑖]−𝑆 &#x3C; 𝑛×𝑑𝑎𝑡𝑎[𝑗]−𝑆|</p>\n</blockquote>\n<p>해당 계산을 기존 풀이에 적용하면 아래와 같이 비교 연산에 실수를 사용하지 않고 풀이가 가능하다.\n항상, 실수 계산은 최소화한 후 최종계산에서만 실수로 변환하는게 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_index</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tS <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tdx <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> S<span class=\"token punctuation\">)</span> <span class=\"token comment\"># i까지의 원소들 중 평균과의 최소거리</span>\n\t\tdi <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> S<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 현재 원소와 평균과의 거리</span>\n\n\t\t<span class=\"token keyword\">if</span> di <span class=\"token operator\">&lt;</span> dx<span class=\"token punctuation\">:</span>\n\t\t\tx <span class=\"token operator\">=</span> i\n\t<span class=\"token keyword\">return</span> x</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C-01--02%EC%9D%98-%EA%B0%92%EC%9D%80-%EC%96%BC%EB%A7%88%EC%9D%BC%EA%B9%8C-\">파이썬에서 0.1 + 0.2의 값은 얼마일까? 🤔</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시:</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 01, 2022","title":"Algorithm[실수 연산을 피하자]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-avoid-float-number/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/algo-prime-number/","nextSlug":"/algo-avoid-float-number/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}