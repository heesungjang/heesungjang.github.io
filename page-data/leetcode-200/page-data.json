{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-200/",
    "result": {"data":{"cur":{"id":"2b9832da-cb9c-5a82-a5a2-934fa732b495","html":"<p>문제: <a href=\"https://leetcode.com/problems/number-of-islands/submissions/\">leetcode - 200</a> (Number of Islands)</p>\n<p>Given an m x n 2D binary grid grid which represents a map of ‘1’s (land) and ‘0’s (water), return the number of islands.</p>\n<p>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n<p>섬의 개수 문제는 DFS 알고리즘의 기본 문제이다. 2x2 형태의 배열 맵이 주어진다. 시작점(루트노트)가 없고 (y,x) 위치에 한 노드는 “1”(섬) 또는 “0” 바다를 나타낸다.</p>\n<h3 id=\"1️⃣-문제풀이\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"1️⃣ 문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제풀이:</h3>\n<ol>\n<li>특정 노드에 방문했을 때 해당 노드가 ‘1’이면 방문처리(visited)를 한다.</li>\n<li>해당 노드의 상, 하, 좌, 우를 근접 노드의 값이 “1”라면 재귀적으로 dfs 탐색을 한다.</li>\n<li>한번의 dfs 재귀 사이클이 끝나면 해당 노드와 근접 노드들이 모두 “0” 값으로 변경되고 count 값을 1 올려준다.\n(count = dfs cycle = 섬의 수)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numIslands</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># count for dfs = island</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n                    count <span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> count\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token comment\"># 상하좌우 이동</span>\n        dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> r <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> r <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> c <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>\n\n        grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">1️⃣ 문제풀이:</a></li>\n</ul>\n</div>","excerpt":"문제: leetcode - 200 (Number of Islands) Given an m x n 2D binary grid grid which represents a map of ‘1’s (land) and ‘0’s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. 섬의 개수 문제는 DFS 알고리즘의 기본 문제이다. 2x2 형태의 배열 맵이 주어진다. 시작점(루트노트)가 없고 (y,x) 위치에 한 노드는 “1”(섬) 또는 “0” 바다를 나타낸다. 1️⃣ 문제풀이: 특정 노드에 방문했을 때 해당 노드가 ‘1’이면 방문처리(visited)를 한다. 해당 노드의 …","frontmatter":{"date":"March 31, 2022","title":"leetcode(200)- Number of Islands","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-200/"}},"next":{"id":"be99792c-2788-5798-9815-55e4eb4ae781","html":"<h3 id=\"-선택-정렬-구현하기\" style=\"position:relative;\"><a href=\"#-%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\" 선택 정렬 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👉 선택 정렬 구현하기</h3>\n<p>♻️ 반복하는 과정:</p>\n<ol>\n<li>주어진 범위에서 <em><strong>최소 값의 위치를 찾는다.</strong></em></li>\n<li>최소 값을 해당 <strong><em>범위의 가장 앞 숫자와 자리를 바꾼다.</em></strong></li>\n<li>이후, 해당 범위의 가장 앞 자리를 제외한 나머지 범위에 대해 위의 <strong><em>과정을 반복한다.</em></strong></li>\n</ol>\n<p>입력으로 주어진 원본 배열 A와 이를 오름차순으로 정렬한 배열 B가 있다고 하자. 원소의 순서가 다를 뿐 두 배열은 집합적으로는 같은 집합이다.</p>\n<p><img src=\"https://media.vlpt.us/images/heesungj7/post/989d375d-da3d-48f3-9658-952774dada11/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-04-01%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.12.54.png\" alt=\"\"></p>\n<p>즉, 특정 인덱스 k에 대하여 배열 B의 원소 b[k]는 오름차순으로 (k+1)번째로 작은 값 이다.</p>\n<p><img src=\"https://media.vlpt.us/images/heesungj7/post/bc96f8ab-5883-4318-b09d-e18bd4b2f1e5/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-04-01%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.17.07.png\" alt=\"\"></p>\n<p>위에 정렬 과정은 아래와 같이 집합으로 표현이 가능하다.</p>\n<blockquote>\n<p>𝑏0=𝑀𝑖𝑛𝐴 =𝑀𝑖𝑛(𝐵)\n𝑏1 =𝑀𝑖𝑛 𝐴−{𝑏0} =𝑀𝑖𝑛(𝐵−{𝑏0})\n𝑏2 =𝑀𝑖𝑛 𝐴−{𝑏0,𝑏1} =𝑀𝑖𝑛(𝐵−{𝑏0,𝑏1})</p>\n</blockquote>\n<ol>\n<li>b0의 값은 배열 A에서 가장 작은 값이된다.</li>\n<li>b1의 값은 b0을 뺀 배열 A에서 가장 작은 값이된다.\n…</li>\n</ol>\n<p>이렇게 작은 숫자부터 차례로 나열하면, 오름차순으로 배열이 정렬된다.</p>\n<h3 id=\"예제-코드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C\" aria-label=\"예제 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 코드:</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">selection_sort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># data = [3, 4, 6, 8, 1, 2]</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> i\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">[</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> j\n\n\t\tdata<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n\t<span class=\"token keyword\">return</span> data</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">👉 선택 정렬 구현하기</a></li>\n<li><a href=\"#%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C\">예제 코드:</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 29, 2022","title":"Algorithm[선택 정렬]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-selection-sort/"}},"prev":{"id":"390e96e0-3bd7-5724-a676-285b515886f7","html":"<h4 id=\"파이썬에서-01--02의-값은-얼마일까-\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C-01--02%EC%9D%98-%EA%B0%92%EC%9D%80-%EC%96%BC%EB%A7%88%EC%9D%BC%EA%B9%8C-\" aria-label=\"파이썬에서 01  02의 값은 얼마일까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬에서 0.1 + 0.2의 값은 얼마일까? 🤔</h4>\n<p>0.3이 나올 것 같지만 실제 계산 값은 0.30000000000000004가이 나온다. 파이썬은 실수를 부동 소수점 방식으로 표현하기 때문에 실수를 정확히 표현하는 것이 가능하지 않다. 만약 두 실수가 같은지 판단할 때 다음과 같이 0.1 + 0.2와 0.3은 같지 않다고 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.3</span>\n\n<span class=\"token operator\">></span> <span class=\"token boolean\">False</span></code></pre></div>\n<p>이렇게 실수를 근삿값으로 표현하면서 발생하는 문제를 부동소수점 반올림 **오차(rounding error)**가 발생하기 때문에 실수를 비교할 때는 연산한 값과 비교할 값의 차이를 구한 뒤 특정 오차 범위 안에서 같은지 확인해야 한다. 파이썬 3.5이상부터는 두 실수가 같은지 판단할 때 math.isclose 함수를 사용 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\nmath<span class=\"token punctuation\">.</span>isclose<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>❗️ 알고리즘 문제를 풀 때도 실수를 비교하는 조건 연산이 있다면 실수 계산을 피할 수 있는지 고려해보는 것이 좋다.</p>\n<h4 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_index</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tu <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> n\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tdx <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">-</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># i까지의 원소들 중 평균과의 최소거리</span>\n\t\tdi <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">-</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 현재 원소와 평균과의 거리</span>\n\n\t\t<span class=\"token keyword\">if</span> di <span class=\"token operator\">&lt;</span> dx<span class=\"token punctuation\">:</span>\n\t\t\tx <span class=\"token operator\">=</span> i\n\n\t<span class=\"token keyword\">return</span> x</code></pre></div>\n<ol>\n<li>위 예시는 데이터는 -100,000 이상 100,000 이하의 정수를도 이루어진 배열이 주어진다.</li>\n<li>데이터 배열의 모든 원소들의 평균 값과 가장 가까운 원소를 찾고 해당 원소의 인덱스를 반환하는 함수이다.</li>\n<li>이때 평균과의 거리와 가작 가까운 즉, 평균과의 거리가 작은 원소는 아래와 같이 구할 수 있다.</li>\n</ol>\n<ul>\n<li>평균과의 거리 𝐷 = 𝑑𝑎𝑡𝑎[𝑖] − 𝜇 가 가장 작은 인덱스 𝑥 계산하기\n• 평균을 계산한 이후\n• 평균과 차이가 가장적은 i들 중 • 가장 작은(왼쪽에 있는) i</li>\n</ul>\n<p>이때 <strong>가능하다면 계산 과정에서 실수를 사용한 계산은 최소화하는 것이 좋다</strong>. 부동 소수점 의 오차로 인해 예상치 못한 오동작이 생길 수 도 있습니다. 대부분의 비교식은 조금 변환하면 정수의 계산으로 바꿀 수 있다.</p>\n<ul>\n<li>👉 <strong>𝐷=𝑑𝑎𝑡𝑎[𝑖]−𝜇 라면</strong>\n• 𝑛𝐷 = 𝑛×𝑑𝑎𝑡𝑎[𝑖]−𝑆 가 된다.S는 모든 원소의 합. 𝑖\n• n과 D모두 양수이므로 성립한다.\n• 모든 연산의 결과는 정수가 된다.</li>\n</ul>\n<p>❗️ 대소관계를 비교하는 경우, 대소관계만 유지 된다면 식을 변형해도 된다.</p>\n<blockquote>\n<p>|𝑑𝑎𝑡𝑎[𝑖]− 𝜇 &#x3C; 𝑑𝑎𝑡𝑎[𝑗]− 𝜇 ⟺ 𝑛×𝑑𝑎𝑡𝑎[𝑖]−𝑆 &#x3C; 𝑛×𝑑𝑎𝑡𝑎[𝑗]−𝑆|</p>\n</blockquote>\n<p>해당 계산을 기존 풀이에 적용하면 아래와 같이 비교 연산에 실수를 사용하지 않고 풀이가 가능하다.\n항상, 실수 계산은 최소화한 후 최종계산에서만 실수로 변환하는게 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_index</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tS <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tdx <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> S<span class=\"token punctuation\">)</span> <span class=\"token comment\"># i까지의 원소들 중 평균과의 최소거리</span>\n\t\tdi <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> S<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 현재 원소와 평균과의 거리</span>\n\n\t\t<span class=\"token keyword\">if</span> di <span class=\"token operator\">&lt;</span> dx<span class=\"token punctuation\">:</span>\n\t\t\tx <span class=\"token operator\">=</span> i\n\t<span class=\"token keyword\">return</span> x</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C-01--02%EC%9D%98-%EA%B0%92%EC%9D%80-%EC%96%BC%EB%A7%88%EC%9D%BC%EA%B9%8C-\">파이썬에서 0.1 + 0.2의 값은 얼마일까? 🤔</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시:</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 01, 2022","title":"Algorithm[실수 연산을 피하자]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-avoid-float-number/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-200/","nextSlug":"/algo-selection-sort/","prevSlug":"/algo-avoid-float-number/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}