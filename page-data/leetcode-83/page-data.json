{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-83/",
    "result": {"data":{"cur":{"id":"2ee7b41e-a815-5c88-9f47-b2918012f09b","html":"<p>문제: <a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/\">leetcode - 83</a> (Remove Duplicates from Sorted List)</p>\n<p>Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cur <span class=\"token operator\">=</span> head\n\t<span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">and</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n\t\t\tcur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>     <span class=\"token comment\"># skip duplicated node</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>     <span class=\"token comment\"># not duplicate of current node, move to next node</span>\n    <span class=\"token keyword\">return</span> head</code></pre></div>\n<h3 id=\"1️⃣-문제풀이\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"1️⃣ 문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제풀이:</h3>\n<ol>\n<li>\n<p>정렬된 단일연결리스트를 순회하며 중복(동일값) 여부를 확인하여 제거한다.</p>\n</li>\n<li>\n<p>반복문과 포인터를 이용하여 LinkedList를 순회하면서 현재노드와 다음 노드의 값이 같은경우 현재노드의 다음노드를 다다음노드로 연결한다.</p>\n</li>\n<li>\n<p>중복이 발생하는 마지막 노드까지 이동하여 해당 노드의 next 노드 즉, 중복이 아닌 새롭게 시작되는 값을 가진 노드를 현재 head 다음 노드로 연결해준다.</p>\n</li>\n<li>\n<p>아닐 경우 포인터를 앞으로 한칸 이동시켜 head 노드를 이동시켜준다.</p>\n</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">1️⃣ 문제풀이:</a></li>\n</ul>\n</div>","excerpt":"문제: leetcode - 83 (Remove Duplicates from Sorted List) Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well. 1️⃣ 문제풀이: 정렬된 단일연결리스트를 순회하며 중복(동일값) 여부를 확인하여 제거한다. 반복문과 포인터를 이용하여 LinkedList를 순회하면서 현재노드와 다음 노드의 값이 같은경우 현재노드의 다음노드를 다다음노드로 연결한다. 중복이 발생하는 마지막 노드까지 이동하여 해당 노드의 next 노드 즉, 중복이 아닌 새롭게 시작되는 값을 가진 노드를 현재 head 다음 노드로 연결해준다. 아닐 경우 포인터를 앞으로 한칸 이동시켜 head 노드를 이동시켜준다. 1️⃣ 문제풀이:","frontmatter":{"date":"March 25, 2022","title":"leetcode(83)- Remove Duplicates from Sorted List","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-83/"}},"next":{"id":"8b82364b-2829-556f-8cd7-348af94b4575","html":"<p>문제: <a href=\"https://leetcode.com/problems/merge-sorted-array/submissions/\">leetcode - 88</a> (Merge sorted array)</p>\n<p>오름차순으로 정렬된 정수들로 이루어진 2개의 배열 nums1과 nums2가 입력값으로 주어진다. 그냥보면 병합정렬 문제이다. 특이한점이 있다면 return 값으로 병합된 배열을 반환하지 않고 초기에 주어진 nums1에 직접 병합을 해야한다.</p>\n<p>예시:</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/c6e18f9b-d91f-432b-a995-04f0203f050d/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%206.44.45.png\" alt=\"\"></p>\n<h3 id=\"1️⃣-문제해설-1\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%95%B4%EC%84%A4-1\" aria-label=\"1️⃣ 문제해설 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제해설 1:</h3>\n<p>처음에 지문을 읽고는 뭐지..?라는 생각이 들었다. 첫번째로 nums1을 보면 정렬된 정수들뒤로 nums2의 길이만큼 0으로 공간이 초기화되어 있고 배열 내 병합할 원소의 개수를 의미하는 m, n이 주어진다. 결론부터 말하면 sorting 없이 포인터를 지정해서 배열의 병합이 가능하다. 해당 문제풀이는 discussion에서 다른 사람의 코드를 가져왔다. 문제해설2에서 다루겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums2<span class=\"token punctuation\">:</span>\n        nums1<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num\n        m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    nums1<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>정렬을 신경쓰지 않고, nums2에 있는 모든 요소들을 nums1에 넣어준다.</li>\n<li>list.sort()로 오름차 정렬을 시켜준다.</li>\n</ol>\n<p>시간 복잡도: 파이썬의 sort() 함수가 O(n log n)의 연산 시간이 걸리므로 최종적으로 O(n log n)의 시간 복잡도를 가지는 풀이이다.</p>\n<h3 id=\"2️⃣-문제해설-2\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%95%B4%EC%84%A4-2\" aria-label=\"2️⃣ 문제해설 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 문제해설 2:</h3>\n<p>위에서 언급했듯이 sorting이 필요없는 포인터를 이용한 풀이이다. nums1을 길이만큼 한번의 iteration을 실행하므로 O(n)의 시간 복잡도를 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    last <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># merge in reverse order</span>\n    <span class=\"token comment\"># nums2 elements to the end of nums1</span>\n    <span class=\"token keyword\">while</span> m <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> nums1<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums2<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            nums1<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            nums1<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            m <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        last <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># fill nums1 with leftover nums2 elements at the beginning</span>\n    <span class=\"token comment\"># this is because elements leftover in nums2 are smaller than any values in nums1</span>\n    <span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        nums1<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        last <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n</code></pre></div>\n<ol>\n<li>아래 그림과 같이 nums1에 마지막 인덱스, m과 n의 인덱스에 각각 포인터를 위치 시킨다.</li>\n</ol>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/14d190d5-1aed-45d7-8716-278f0e4b3e36/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%207.54.34.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>\n<p>m또는 n의 길이가 0이되기 전까지 즉, nums1과 nums2의 오른쪽 끝에서 왼쪽 끝으로 이동하면서 nums2의 값과 nums1의 값을 비교한다.</p>\n</li>\n<li>\n<p>만약 nums1[m] &#x3C; nums2[n]이라면 n의 마지막 요소는 nums1과 nums2의 모든 요소들중 가장 큰 정수일것이다(nums1과 nums2 모두 오름차도 정렬이 되어있음에).</p>\n</li>\n<li>\n<p>이제 nums2의 마지막 인덱스 값, 예제에서는 6의 nums1 배열의 끝에 넣어준다.\n<img src=\"https://images.velog.io/images/heesungj7/post/88cd2a67-8338-49d5-a13b-73931f5fae73/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.04.14.png\" alt=\"\">\n<img src=\"https://images.velog.io/images/heesungj7/post/89b9efa8-5c4f-4b36-84de-4b172c454cbe/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.06.02.png\" alt=\"\"></p>\n</li>\n<li>\n<p>만약 nums1[m]이 > nums2[n]라면 nums1[m]을 last 포인터 위치에 대입하고 m과 last의 포인터만 이동시킨다.</p>\n</li>\n</ol>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/8a04d0ae-94b3-4e81-9abe-8c1d03095c9e/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.09.23.png\" alt=\"\"></p>\n<p>포인터의 이동을 파워 포인터로 그려고보려 했지만…깔끔에가 못그리겠다. 혹시나 미래에 이 풀이를 다시 찾아보는 나이거나 지나가다 풀이를 보려고 들어오신 분이라면 아래 유튜브 링크를 참조해주세요.</p>\n<p>👉 <a href=\"https://www.youtube.com/watch?v=C4oBXLr3zos&#x26;t=195s\">유튜브 링크</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%95%B4%EC%84%A4-1\">1️⃣ 문제해설 1:</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%95%B4%EC%84%A4-2\">2️⃣ 문제해설 2:</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 23, 2022","title":"leetcode(88)- Merge sorted array","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-88/"}},"prev":{"id":"42f94a9b-9d06-5a6a-8566-857441429a96","html":"<p>문제: <a href=\"https://leetcode.com/problems/binary-search/\">leetcode - 704</a> (Binary Search)</p>\n<p>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.</p>\n<p>You must write an algorithm with O(log n) runtime complexity.</p>\n<p>기본적인 이진탐색 문제이다.</p>\n<ol>\n<li>정렬된 배열에 중간 값을 찾아서 찾고자 하는 값(target)과 비교한다.</li>\n<li>중간 값보다 검색 값이 크다면 중간값 기준 배열의 오른쪽 구간을 대상으로 탐색한다. (mid &#x3C; key)</li>\n<li>중간 값보다 검색 값이 작다면 중간값 기준 배열의 왼쪽 구간을 대상으로 탐색한다. (mid > key)</li>\n</ol>\n<h3 id=\"1️⃣-문제풀이1반복문\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B41%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"1️⃣ 문제풀이1반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제풀이1(반복문):</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         low <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n         high <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n         <span class=\"token keyword\">while</span> low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">:</span>\n             mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n             <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                 <span class=\"token keyword\">return</span> mid\n             <span class=\"token keyword\">elif</span> target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                 high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n             <span class=\"token keyword\">elif</span> target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                 low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n         <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre></div>\n<h3 id=\"2️⃣-문제풀이2재귀\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B42%EC%9E%AC%EA%B7%80\" aria-label=\"2️⃣ 문제풀이2재귀 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 문제풀이2(재귀)):</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>binary_search<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> left <span class=\"token operator\">></span> right<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n        <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mid\n        <span class=\"token keyword\">elif</span> target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>binary_search<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>binary_search<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B41%EB%B0%98%EB%B3%B5%EB%AC%B8\">1️⃣ 문제풀이1(반복문):</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B42%EC%9E%AC%EA%B7%80\">2️⃣ 문제풀이2(재귀)):</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 26, 2022","title":"leetcode(704)- Binary search","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-704/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-83/","nextSlug":"/leetcode-88/","prevSlug":"/leetcode-704/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}