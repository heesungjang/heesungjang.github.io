{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-937/",
    "result": {"data":{"cur":{"id":"816ea2bf-180d-51a9-a63b-41dfbb2ea767","html":"<p>문제: <a href=\"https://leetcode.com/problems/reorder-data-in-log-files/submissions/\">leetcode - 937</a> (Reorder Data in Log Files)</p>\n<p>You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.</p>\n<p>There are two types of logs:</p>\n<ul>\n<li>Letter-logs: All words (except the identifier) consist of lowercase English - - letters.</li>\n<li>Digit-logs: All words (except the identifier) consist of digits.</li>\n</ul>\n<p>Reorder these logs so that:</p>\n<ul>\n<li>The letter-logs come before all digit-logs.</li>\n<li>The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.</li>\n<li>The digit-logs maintain their relative ordering.\nReturn the final order of the logs.</li>\n</ul>\n<h4 id=\"문제-해설\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EC%84%A4\" aria-label=\"문제 해설 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해설:</h4>\n<p>배열의 원소들이 로그들을 주어진 조건에 따라 재정렬하는 문제이다.</p>\n<ol>\n<li>로그의 가장 앞 부분은 식별자이다.</li>\n</ol>\n<ul>\n<li>“digi1 8 1 5 1”에서 digi1이 로그의 특성 즉, 8151이 숫자 로그라는것을 알려주는 식별자이다. =</li>\n</ul>\n<ol start=\"2\">\n<li>문자로 구성된 로그가 숫자 로그보다 앞에오게 한다.</li>\n</ol>\n<ul>\n<li>[“let1 art can”. “digi1 8 1 5 1”]이 주어졌을때 —> [“digi1 8 1 5 1”, “let1 art can”]같이 문자 로그가 배열에 앞에 위치하게 재정렬한다.</li>\n</ul>\n<ol start=\"3\">\n<li>식별자는 순서에 영항을 끼치지 않지만, 문자가 동일할 경우에 식별자 순으로 재정렬한다.</li>\n<li>숫자 로그는 특별한 조건없이 입력 순으로 정렬한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reorder_log_files</span><span class=\"token punctuation\">(</span>logs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 문자 로그와 숫자 로그를 담을 배열을 초기화</span>\n    letters<span class=\"token punctuation\">,</span> digits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token comment\"># 문자 로그와 숫자 로그를 나눈다.</span>\n    <span class=\"token keyword\">for</span> log <span class=\"token keyword\">in</span> logs<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> log<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 숫자 로그 또한 문자열로 저장되어 있기에, isdigit으로 판별후 digits에 추가</span>\n            digits<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 문자 로그를 letters에 추가</span>\n            letters<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># 이 시점에는 모든 문자 로그와 숫자 로그가 나누어져 있음.</span>\n\n    <span class=\"token comment\"># 주어진 조건에 맞게 재정렬을 실행</span>\n    <span class=\"token comment\"># 1. 로그의 컨텐츠로 먼저 정렬을 하고</span>\n    <span class=\"token comment\"># 2. 같은 로그가 있다면 식별자로 한번 더 정렬한다.</span>\n\n    letters<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 이 시점에는 모든 문자 로그들이 조건에 맞게 정렬되어 있음.</span>\n    <span class=\"token comment\"># 문자 로그가 먼저 위치하기 때문에 letters에 digits를 확장해준다.=</span>\n    letters<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> letters</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EC%84%A4\">문제 해설:</a></li>\n</ul>\n</div>","excerpt":"문제: leetcode - 937 (Reorder Data in Log Files) You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier. There are two types of logs: Letter-logs: All words (except the identifier) consist of lowercase English - - letters. Digit-logs: All words (except the identifier) consist of digits. Reorder these logs so that: The letter-logs come before all digit-logs. The letter-logs are sorted lexicographically by their contents. If their conte…","frontmatter":{"date":"April 10, 2022","title":"leetcode(937)- Reorder Data in Log Files","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-937/"}},"next":{"id":"24901e94-bbc5-5310-ba1f-c035cbdada67","html":"<h3 id=\"1️⃣-병합-정렬-merge-sort\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-merge-sort\" aria-label=\"1️⃣ 병합 정렬 merge sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 병합 정렬 (merge sort)</h3>\n<blockquote>\n<p>병합 정렬은 대표적인 분할 정복(Divide and Conquer) 알고리즘이다.</p>\n</blockquote>\n<p>최선과 최악 모두 **O(n log n)**의 시간 복잡도를 가지는 알고리즘으로 대부분의 경우 퀵 정렬보다는 느리지만 일정한 실행 속도와 안정 **정렬(stable sort)**이기 때문에 여전히 상용 라이브러리에 많이 쓰이고 있다.</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/a251637b-c6a5-48c4-92bb-4b2b2a9abc1f/image.png\" alt=\"\"></p>\n<p>병합 정렬의 과정을 도식화한 표를 살펴보자. 분활 정복으로 일정하게 정렬이 이뤄지는 병합 정렬의 특징을 잘 파악할 수 있다.</p>\n<p>➗ [38, 27, 43, 3, 9, 82, 10]인 입력값은 —> [38, 27, 43, 3]과 [9, 82, 10]로 두 부분으로 분활, —> 다시 [38, 27], [43, 3], [9, 82], [10] 네부분으로 분활 등의 방식으로 각가 더 이상 쪼갤 수 없을 때까지 계속해서 분활한 후, 분활이 끝나면 정렬하면서 정복해 나간다.</p>\n<h3 id=\"2️⃣-예시-문제\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C\" aria-label=\"2️⃣ 예시 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 예시 문제:</h3>\n<p>문제: <a href=\"https://leetcode.com/problems/sort-an-array/\">leetcode - 912</a> (sort array)</p>\n<p>리트코드 912번 문제를 병합 정렬을 사용해서 풀어봤다.</p>\n<p>Given an array of integers nums, sort the array in ascending order.</p>\n<p>입력 값으로 주어지는 배여을 오름차순으로 정렬하여 반환하는 하면되는 간단한 문제이다. 하지만 시간 초과로 선택 정렬이나 버블 정렬 o(n^2)의 시간 복잡도가 걸리는 정렬 알고리즘으로는 풀 수 없다.</p>\n<p>최대 입력 값의 크기가 <strong>1 &#x3C;= nums.length &#x3C;= 5 * 10^4</strong>으로 가장 큰 경우에 n의 값이 5만이고 n^2의 알고리즘으로 풀었을 경우에 최악의 경우 25억개의 연산이 필요하다.</p>\n<h4 id=\"-선택-정렬-풀이\" style=\"position:relative;\"><a href=\"#-%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC-%ED%92%80%EC%9D%B4\" aria-label=\" 선택 정렬 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 선택 정렬 풀이:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> i\n\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> nums</code></pre></div>\n<h4 id=\"-버블-정렬-풀이\" style=\"position:relative;\"><a href=\"#-%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC-%ED%92%80%EC%9D%B4\" aria-label=\" 버블 정렬 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 버블 정렬 풀이:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">return</span> nums\n</code></pre></div>\n<h4 id=\"-병합-정렬-풀이\" style=\"position:relative;\"><a href=\"#-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-%ED%92%80%EC%9D%B4\" aria-label=\" 병합 정렬 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 병합 정렬 풀이:</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 재귀 종료 조건</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> nums\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\"># 분할 (재귀)</span>\n            mid <span class=\"token operator\">=</span> n <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sortArray<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sortArray<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 정복 (병합)</span>\n            <span class=\"token keyword\">return</span> merge<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        merged <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">while</span> left <span class=\"token keyword\">and</span> right<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> left<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                merged<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        merged<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>left <span class=\"token keyword\">if</span> left <span class=\"token keyword\">else</span> right<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> merged\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-merge-sort\">1️⃣ 병합 정렬 (merge sort)</a></p>\n</li>\n<li>\n<p><a href=\"#2%EF%B8%8F%E2%83%A3-%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C\">2️⃣ 예시 문제:</a></p>\n<ul>\n<li><a href=\"#-%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC-%ED%92%80%EC%9D%B4\">❌ 선택 정렬 풀이:</a></li>\n<li><a href=\"#-%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC-%ED%92%80%EC%9D%B4\">❌ 버블 정렬 풀이:</a></li>\n<li><a href=\"#-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-%ED%92%80%EC%9D%B4\">✅ 병합 정렬 풀이:</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 09, 2022","title":"Algorithm[병합정렬]-[leet code 191]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-912/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-937/","nextSlug":"/leetcode-912/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}