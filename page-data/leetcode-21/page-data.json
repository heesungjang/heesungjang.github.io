{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-21/",
    "result": {"data":{"cur":{"id":"26bc00d2-bf96-5292-ae73-0d3993737640","html":"<p>문제: <a href=\"%22https://leetcode.com/problems/merge-two-sorted-lists/%22\">Merge Two Sorted Lists</a></p>\n<p>You are given the heads of two sorted linked lists list1 and list2.</p>\n<p>Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.</p>\n<p>Return the head of the merged linked list.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Input<span class=\"token punctuation\">:</span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nOutput<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>문제 요약: 각각 정렬되어 있는 리스트 노드 2개를 합쳐서 1개의 정렬된 리스트 노드 출력한다.</p>\n<p>유의 사항: 각 리스트 노드가 비어있을 수도 있다. 그러면 빈 리스트 노드를 출력한다.</p>\n<p>찾아보면 재귀적으로 list1과 list2의 값을 비교 연산하고 스왑하는 풀이도 있지만 (“파이썬 알고리즘 인터뷰”) 노드들이 스왑되는 과정이 직관적으로 와닿지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode(object):</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># make dummy node to store merged data</span>\n        dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># make reference named \"tail\" to add nodes</span>\n        tail <span class=\"token operator\">=</span> dummy\n\n        <span class=\"token keyword\">while</span> l1 <span class=\"token keyword\">and</span> l2<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l1\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l2\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n            <span class=\"token comment\"># move tail to currently added node, to add further nodes to end</span>\n            tail <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n        tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l1 <span class=\"token keyword\">or</span> l2\n\n\n        <span class=\"token comment\"># return dummy.next becuase dummy.next node is the head node for merged linked list</span>\n        <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<p>list1과 list2를 순차적으로 비교하면서 작은 노드순으로 dummy node에 추가하는 방식으로 풀었다.</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/14a8c81b-69d0-4fe6-a984-3093abe7930e/image.jpeg\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># make dummy node to store merged data</span>\n  dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># make reference named \"tail\" to add nodes</span>\n  tail <span class=\"token operator\">=</span> dummy\n\n  <span class=\"token keyword\">while</span> l1 <span class=\"token keyword\">and</span> l2<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n          tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l1\n          l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n          tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l2\n          l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n      <span class=\"token comment\"># move tail to currently added node, to add further nodes to end</span>\n      tail <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n  tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l1 <span class=\"token keyword\">or</span> l2\n\n\n  <span class=\"token comment\"># return dummy.next becuase dummy.next node is the head node for merged linked list</span>\n  <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<ol>\n<li>l1과 l2를 비교하고 작은 값을 dummy에 추가한다.</li>\n<li>하나의 노드 포인터가 마지막 None까지 이동하면 while문을 빠져 나온다.</li>\n<li>남아있는 연결 리스트가 있다면 tail 끝에 추가해준다.</li>\n</ol>","excerpt":"문제: Merge Two Sorted Lists You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list. 문제 요약: 각각 정렬되어 있는 리스트 노드 2개를 합쳐서 1개의 정렬된 리스트 노드 출력한다. 유의 사항: 각 리스트 노드가 비어있을 수도 있다. 그러면 빈 리스트 노드를 출력한다. 찾아보면 재귀적으로 list1과 list2의 값을 비교 연산하고 스왑하는 풀이도 있지만 (“파이썬 알고리즘 인터뷰”) 노드들이 스왑되는 과정이 직관적으로 와닿지 않는다. list1과 list2를 순차적으로 비교하면서 작은 노드순으로 dummy n…","frontmatter":{"date":"April 16, 2022","title":"leetcode(21)- Merge Two Sorted Lists","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-21/"}},"next":{"id":"0af9277d-8b5a-58b9-88f9-d56644b440df","html":"<p>문제:<a href=\"%22https://leetcode.com/problems/palindrome-linked-list/%22\">Palindrome Linked List</a></p>\n<p>입력값으로 들어오는 연결리스트가 팬인 그럼 구조인지 확인하는 문제이다. 어렵지 않은 문제이고 두 번째 풀어보는 문제이지만 <strong>slow/fast runner</strong> 구현이 정확히 기억나지 않아 일단 deque로 풀고 “파이선 알고리즘 인터뷰”의 runner 풀이를 다시 공부했다.</p>\n<p>deque를 이용한 문제 풀이는 간단하다. 연결 리스트를 순차적으로 deque에 넣고 popleft()와 pop() 연산을 반복하면서 양 끝에 값을 비교하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    nums <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n        nums<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token comment\"># [1, 2]</span>\n            <span class=\"token comment\"># [1, 2]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/d6c6313c-4f7c-4dce-b8ec-9e52947f6449/image.jpeg\" alt=\"\"></p>\n<p><strong>런너(runner)</strong> 기법을 활용하면 해당 연결 리스트 속성을 이용해서 풀 수 있다.</p>\n<p>위 그림처럼 slow와 fast 포인터를 시작 head에 위치 시키고 각각 한 칸, 두 칸씩 이동 시키면 빠른 런너가 끝에 다다들 때 느린 런너가 정확히 중간 지점에 도달하게 된다.</p>\n<p>❗️이때 느린 런너는 연결 리스트를 이동하면서 지나온 노드들의 값으로 역순 연결 리스트를 생성한다.</p>\n<p>이렇게 생성된 역순 연결 리스트는 만약 해당 연결 리스트가 팰린드롬이라면 앞으로 남은 연결 리스트들의 값과 같을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 역순의 연결리스트를 만들 빈 노드가 필요하다</span>\n    rev <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token comment\"># slow, fast 노드르 초기화한다.</span>\n    slow <span class=\"token operator\">=</span> fast <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">while</span> fast <span class=\"token keyword\">and</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token comment\"># 슬로우는 역순을 만들면서 이동한다.</span>\n        rev<span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">,</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token comment\"># fast가 남아있다면 링크드 리스트가 홀수이기 때문에 중앙 값에서 한 칸 이동해야한다.</span>\n    <span class=\"token keyword\">if</span> fast<span class=\"token punctuation\">:</span>\n        slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">while</span> rev <span class=\"token keyword\">and</span> rev<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n        slow<span class=\"token punctuation\">,</span> rev <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token comment\"># 링크드 리스트가 팰린드롬이라면 rev와 slow 모두 None 값이다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> rev</code></pre></div>\n<p>좀 더 자세히 살펴보면, 역순 열결 리스트는 현재 값을 slow로 교체하고 rev.next는 rev가 된다. 즉 앞에 계속 새로운 노드가 추가되는 형태가 된다. 결국 이 연결 리스트는 slow의 역순 연결 리스트가 된다.</p>\n<p>주의해야 하는 부분이 있는데, 입력값이 홀수일 때와 짝수일 때 마지막 처리가 다르다. 홀수일 때 slow 런너가 한 칸 더 앞으로 이동하여 중앙의 값을 빗겨 나가야 한다.</p>","frontmatter":{"date":"April 15, 2022","title":"leetcode(234)- Palindrome Linked List","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-234/"}},"prev":{"id":"0a0b817b-b952-5bd9-ac39-518bed8080d8","html":"<p>문제: <a href=\"%22https://leetcode.com/problems/add-two-numbers/%22\">add-two-numbers</a></p>\n<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>미디엄 문제이기는 하지만 풀이가 어렵지는 않은 문제다.</p>\n<p>두개의 정수가 역순으로 연결리스트로 주어진다. 역순으로 주어지기 때문에 덧셈 로직을 구현하기 쉽다. 연결 리스트에 역순으로 값이 들어있기 때문에 첫 head 노트부터 덧셈을 하면 우리가 두 수를 더할 때 일의 자리부터 더해서 자릿수를 올리며 더하는 방법과 동일하다.</p>\n<h3 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이:</h3>\n<p>리스트를 순서대로 타고 가면 일의 자리부터 접근할 수 있다. 따라서, 두 리스트를 단순하게 앞에서부터 접근하면서 더해주는 식으로 새로운 연결 리스트를 만들어주면 두 정수의 합을 표현한 역순 열결 리스트를 만들 수 있다.</p>\n<p>❗️중간에 올림 처리와 자릿수가 맞지 않을때, 예를들어 2342 + 387 일 때 비어있는 자리를 0으로 예외 처리만 해주면 쉽게 풀 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  curr <span class=\"token operator\">=</span> dummy\n\n  carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">while</span> l1 <span class=\"token keyword\">or</span> l2 <span class=\"token keyword\">or</span> carry<span class=\"token punctuation\">:</span>\n      v1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token keyword\">if</span> l1 <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n      v2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>val <span class=\"token keyword\">if</span> l2 <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n\n      val <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2 <span class=\"token operator\">+</span> carry\n\n      carry <span class=\"token operator\">=</span> val <span class=\"token operator\">//</span> <span class=\"token number\">10</span>\n      val  <span class=\"token operator\">=</span> val <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n\n      curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n\n      l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">if</span> l1 <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n      l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">if</span> l2 <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n      curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n  <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>","frontmatter":{"date":"April 18, 2022","title":"leetcode(2) - add-two-number","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-2/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-21/","nextSlug":"/leetcode-234/","prevSlug":"/leetcode-2/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}