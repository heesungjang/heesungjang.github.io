{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/algo-stack-queue/",
    "result": {"data":{"cur":{"id":"6caa77ca-b476-51ff-9633-b8ecf898d197","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/3c68fa92-99f0-4de9-9d08-6b795583f212/1_r4Bfo3rrFprzFM2zbgzZXA.jpeg\" alt=\"\"></p>\n<h2 id=\"️-스택-stack\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%83%9D-stack\" aria-label=\"️ 스택 stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 스택 (stack)</h2>\n<p>스택은 <strong>후입선출 구조 (LIFO, Last In First Out) 구조</strong>라고 해서 한쪽 끝으로만 자료를 넣고 뺄 수 있는 자료 구조이다.</p>\n<h3 id=\"스택이-사용되는-예시\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D%EC%9D%B4-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%98%88%EC%8B%9C\" aria-label=\"스택이 사용되는 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택이 사용되는 예시</h3>\n<ul>\n<li><strong>컴퓨터의 되돌리기(Ctrl + Z) 기능</strong>: 직전에 했던 행동을 되돌고 싶을 때 사용하는 기능으로, 이를 위해서는 내가 했던 행동들을 순서대로 기억해야 하므로 스택을 사용한다.</li>\n</ul>\n<h2 id=\"-특징\" style=\"position:relative;\"><a href=\"#-%ED%8A%B9%EC%A7%95\" aria-label=\" 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 특징</h2>\n<ul>\n<li>\n<p>스택은 위의 사진처럼 같은 구조와 크기의 자료를 정해진 방향으로만 쌓을수 있으며 데이터 접근 또한 데이터가 삽입된 top을 통해서만 접근이 가능하다.</p>\n</li>\n<li>\n<p>스택의 가장 상위에 위치하는 자료는 가장 최근에 들어온 자료이며, 새로 삽입되는 자료는 top이 가리키는 자료의 위에 쌓이게 된다.</p>\n</li>\n<li>\n<p>스택에서 자료를 삭제할 때도 top을 통해서만 가능하다.</p>\n</li>\n</ul>\n<blockquote>\n<p>스택에서 top을 통해 삽입하는 연산을 **‘push’ , top을 통한 삭제하는 연산을 ‘pop’**이라고 한다.</p>\n</blockquote>\n<h3 id=\"스택-자료구조의-기능들을-코드로-직접-구현해보자\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%93%A4%EC%9D%84-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"스택 자료구조의 기능들을 코드로 직접 구현해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 자료구조의 기능들을 코드로 직접 구현해보자.</h3>\n<h3 id=\"1-push-맨-앞에-데이터-넣기\" style=\"position:relative;\"><a href=\"#1-push-%EB%A7%A8-%EC%95%9E%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%84%A3%EA%B8%B0\" aria-label=\"1 push 맨 앞에 데이터 넣기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Push: 맨 앞에 데이터 넣기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        new_head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_head\n</code></pre></div>\n<h3 id=\"2-pop-맨-앞의-데이터-뽑기\" style=\"position:relative;\"><a href=\"#2-pop-%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%BD%91%EA%B8%B0\" aria-label=\"2 pop 맨 앞의 데이터 뽑기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. pop: 맨 앞의 데이터 뽑기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        deleted_stack <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> deleted_stack</code></pre></div>\n<h3 id=\"3-peek-맨-앞의-데이터-보기\" style=\"position:relative;\"><a href=\"#3-peek-%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EA%B8%B0\" aria-label=\"3 peek 맨 앞의 데이터 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. peek: 맨 앞의 데이터 보기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data</code></pre></div>\n<h3 id=\"4-is_empty-스택이-비었는지-안-비었는지-여부-반환해주기\" style=\"position:relative;\"><a href=\"#4-is_empty-%EC%8A%A4%ED%83%9D%EC%9D%B4-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%95%88-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%97%AC%EB%B6%80-%EB%B0%98%ED%99%98%ED%95%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"4 is_empty 스택이 비었는지 안 비었는지 여부 반환해주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. is_empty: 스택이 비었는지 안 비었는지 여부 반환해주기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span></code></pre></div>\n<hr>\n<h2 id=\"️-큐-queue\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%81%90-queue\" aria-label=\"️ 큐 queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 큐 (queue)</h2>\n<p>한쪽 끝으로 자료를 넣고, 반대쪽에서는 자료를 뺄 수 있는 <strong>선형구조</strong>.</p>\n<h3 id=\"-왜-이런-자료구조가-필요할까\" style=\"position:relative;\"><a href=\"#-%EC%99%9C-%EC%9D%B4%EB%9F%B0-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\" aria-label=\" 왜 이런 자료구조가 필요할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 왜 이런 자료구조가 필요할까?</h3>\n<blockquote>\n<p>순서대로 처리되어야 하는 일에 필요하기 때문이다!</p>\n</blockquote>\n<h2 id=\"-특징-1\" style=\"position:relative;\"><a href=\"#-%ED%8A%B9%EC%A7%95-1\" aria-label=\" 특징 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 특징</h2>\n<blockquote>\n<p>가장 먼저 들어온 프론트 원소가 가장 먼저 삭제.\n접근방법은 가장 첫 원소와 끝 원소로만 가능.</p>\n</blockquote>\n<ul>\n<li>\n<p>데이터의 삽입과 삭제가 한쪽(top)으로만 이루어지는 스택 구조와는 달리, 큐는 한쪽 끝에서 삽입 작업이, 다른 쪽 끝에서 삭제 작업이 선형적으로 이루어진다.</p>\n</li>\n<li>\n<p><strong>front</strong>: 삭제 연산이 이루어지는 곳. 즉, 가장 먼저 들어온 데이터가 큐를 나가는 곳이다.</p>\n</li>\n<li>\n<p><strong>rear</strong>: 삽입 연산이 이루어지는 곳. 새로 추가되는 데이터는 rear통해 큐에 삽입된다.</p>\n</li>\n<li>\n<p>이때, 큐의 리어에서 이루어지는 삽입연산을 <strong>인큐(enQueue)</strong> 라고하며 프론트에서 이루어지는 삭제연산을 <strong>디큐(dnQueue)</strong> 라고 부른다.</p>\n</li>\n</ul>\n<h3 id=\"큐-자료구조의-기능들을-코드로-직접-구현해보자\" style=\"position:relative;\"><a href=\"#%ED%81%90-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%93%A4%EC%9D%84-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"큐 자료구조의 기능들을 코드로 직접 구현해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큐 자료구조의 기능들을 코드로 직접 구현해보자.</h3>\n<h3 id=\"1-enqueuedata--맨-뒤에-데이터-추가하기\" style=\"position:relative;\"><a href=\"#1-enqueuedata--%EB%A7%A8-%EB%92%A4%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"1 enqueuedata  맨 뒤에 데이터 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. enqueue(data) : 맨 뒤에 데이터 추가하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_node\n            self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> new_node\n            <span class=\"token keyword\">return</span>\n        self<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new_node\n        self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> new_node\n        <span class=\"token keyword\">return</span></code></pre></div>\n<h3 id=\"2-dequeue--맨-앞의-데이터-뽑기\" style=\"position:relative;\"><a href=\"#2-dequeue--%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%BD%91%EA%B8%B0\" aria-label=\"2 dequeue  맨 앞의 데이터 뽑기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. dequeue() : 맨 앞의 데이터 뽑기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Queue is empty\"</span><span class=\"token punctuation\">)</span>\n        removed_queue <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> removed_queue<span class=\"token punctuation\">.</span>data</code></pre></div>\n<h3 id=\"3-peek--맨-앞의-데이터-보기\" style=\"position:relative;\"><a href=\"#3-peek--%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EA%B8%B0\" aria-label=\"3 peek  맨 앞의 데이터 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. peek() : 맨 앞의 데이터 보기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"> <span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Queue is empty\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data</code></pre></div>\n<h3 id=\"4-isempty-큐가-비었는지-안-비었는지-여부-반환해주기\" style=\"position:relative;\"><a href=\"#4-isempty-%ED%81%90%EA%B0%80-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%95%88-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%97%AC%EB%B6%80-%EB%B0%98%ED%99%98%ED%95%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"4 isempty 큐가 비었는지 안 비었는지 여부 반환해주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. isEmpty(): 큐가 비었는지 안 비었는지 여부 반환해주기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span></code></pre></div>\n<hr>\n<p>참고 (<a href=\"https://devuna.tistory.com/22\">https://devuna.tistory.com/22</a>)</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%83%9D-stack\">✏️ 스택 (stack)</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%83%9D%EC%9D%B4-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%98%88%EC%8B%9C\">스택이 사용되는 예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%8A%B9%EC%A7%95\">📌 특징</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%83%9D-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%93%A4%EC%9D%84-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\">스택 자료구조의 기능들을 코드로 직접 구현해보자.</a></li>\n<li><a href=\"#1-push-%EB%A7%A8-%EC%95%9E%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%84%A3%EA%B8%B0\">1. Push: 맨 앞에 데이터 넣기</a></li>\n<li><a href=\"#2-pop-%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%BD%91%EA%B8%B0\">2. pop: 맨 앞의 데이터 뽑기</a></li>\n<li><a href=\"#3-peek-%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EA%B8%B0\">3. peek: 맨 앞의 데이터 보기</a></li>\n<li><a href=\"#4-is_empty-%EC%8A%A4%ED%83%9D%EC%9D%B4-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%95%88-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%97%AC%EB%B6%80-%EB%B0%98%ED%99%98%ED%95%B4%EC%A3%BC%EA%B8%B0\">4. is_empty: 스택이 비었는지 안 비었는지 여부 반환해주기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%81%90-queue\">✏️ 큐 (queue)</a></p>\n<ul>\n<li><a href=\"#-%EC%99%9C-%EC%9D%B4%EB%9F%B0-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\">🌟 왜 이런 자료구조가 필요할까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%8A%B9%EC%A7%95-1\">📌 특징</a></p>\n<ul>\n<li><a href=\"#%ED%81%90-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%93%A4%EC%9D%84-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\">큐 자료구조의 기능들을 코드로 직접 구현해보자.</a></li>\n<li><a href=\"#1-enqueuedata--%EB%A7%A8-%EB%92%A4%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">1. enqueue(data) : 맨 뒤에 데이터 추가하기</a></li>\n<li><a href=\"#2-dequeue--%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%BD%91%EA%B8%B0\">2. dequeue() : 맨 앞의 데이터 뽑기</a></li>\n<li><a href=\"#3-peek--%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EA%B8%B0\">3. peek() : 맨 앞의 데이터 보기</a></li>\n<li><a href=\"#4-isempty-%ED%81%90%EA%B0%80-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%95%88-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%97%AC%EB%B6%80-%EB%B0%98%ED%99%98%ED%95%B4%EC%A3%BC%EA%B8%B0\">4. isEmpty(): 큐가 비었는지 안 비었는지 여부 반환해주기</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"✏️ 스택 (stack) 스택은 후입선출 구조 (LIFO, Last In First Out) 구조라고 해서 한쪽 끝으로만 자료를 넣고 뺄 수 있는 자료 구조이다. 스택이 사용되는 예시 컴퓨터의 되돌리기(Ctrl + Z) 기능: 직전에 했던 행동을 되돌고 싶을 때 사용하는 기능으로, 이를 위해서는 내가 했던 행동들을 순서대로 기억해야 하므로 스택을 사용한다. 📌 특징 스택은 위의 사진처럼 같은 구조와 크기의 자료를 정해진 방향으로만 쌓을수 있으며 데이터 접근 또한 데이터가 삽입된 top을 통해서만 접근이 가능하다. 스택의 가장 상위에 위치하는 자료는 가장 최근에 들어온 자료이며, 새로 삽입되는 자료는 top이 가리키는 자료의 위에 쌓이게 된다. 스택에서 자료를 삭제할 때도 top을 통해서만 가능하다. 스택에서 top을 통해 삽입하는 연산을 **‘push’ , top을 통한 삭제하는 연산을 ‘pop’**이라고 한다. 스택 자료구조의 기능들을 코드로 직접 구현해보자. 1. Push: 맨 …","frontmatter":{"date":"June 20, 2021","title":"Stack(스택) & Queue(큐)","categories":"DataStructure","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-stack-queue/"}},"next":{"id":"b5bd90f1-3369-5815-9656-beaa957871a8","html":"<h2 id=\"1-이진-탐색\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\" aria-label=\"1 이진 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이진 탐색</h2>\n<p>배열 구조의 자료에서 특정 값을 찾는 방법은 크게 두가지가 있을 수 있다.</p>\n<ul>\n<li>순차 탐색</li>\n<li><strong>이진탐색</strong></li>\n</ul>\n<p>순차 탐색에서는 배열의 시작부터 순차적으로 이동하며 찾고자 하는 특정 값을 모든 배열의 원소들과 비교하며 값을 찾을 때까지 반복한다.</p>\n<blockquote>\n<p><strong>이진 탐색</strong>이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다. 배열의 중간에 있는 임의의 값을 선택하여 찾고자 하는 값 X와 비교한다.</p>\n</blockquote>\n<ul>\n<li>X가 중간 값보다 작으면 중간 값을 기준으로 좌측의 데이터들을 대상으로,</li>\n<li>X가 중간값보다 크면 배열의 우측을 대상으로 다시 탐색한다.</li>\n</ul>\n<h5 id=\"출처httpscjh5414githubiobinary-search\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98httpscjh5414githubiobinary-search\" aria-label=\"출처httpscjh5414githubiobinary search permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처(<a href=\"https://cjh5414.github.io/binary-search/\">https://cjh5414.github.io/binary-search/</a>)</h5>\n<h2 id=\"순차-탐색과-이진탐색을-비교해보자\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%B0%A8-%ED%83%90%EC%83%89%EA%B3%BC-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"순차 탐색과 이진탐색을 비교해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순차 탐색과 이진탐색을 비교해보자.</h2>\n<h3 id=\"순차-탐색\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%B0%A8-%ED%83%90%EC%83%89\" aria-label=\"순차 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순차 탐색</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">finding_target <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\nfinding_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_existing_target_number_sequential</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> number<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\nresult <span class=\"token operator\">=</span> is_existing_target_number_sequential<span class=\"token punctuation\">(</span>finding_target<span class=\"token punctuation\">,</span> finding_numbers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></code></pre></div>\n<blockquote>\n<p>array 를 따라가면서 target 이 존재한다면 True 를 반환하고,\n끝까지 없다면 False 를 반환한다.</p>\n</blockquote>\n<h3 id=\"이진-탐색\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\" aria-label=\"이진 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진 탐색</h3>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/e7c13b08-e919-41ad-94f2-b5fcc03bc9bf/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.47.03.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">finding_target <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\nfinding_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_existing_target_number_binary</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tcurrent_min <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    current_max <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    current_guess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current_min <span class=\"token operator\">+</span> current_max<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">while</span> current_min <span class=\"token operator\">&lt;=</span> current_max<span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>current_guess<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n    \t    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\t<span class=\"token keyword\">elif</span> array<span class=\"token punctuation\">[</span>current_guess<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span>\n    \t    current_min <span class=\"token operator\">=</span> current_guess <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    \t    current_max <span class=\"token operator\">=</span> current_guess <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\tcurrent_guess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current_min <span class=\"token operator\">+</span> current_max<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n\nresult <span class=\"token operator\">=</span> is_existing_target_number_binary<span class=\"token punctuation\">(</span>finding_target<span class=\"token punctuation\">,</span> finding_numbers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\">1. 이진 탐색</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%B6%9C%EC%B2%98httpscjh5414githubiobinary-search\">출처(https://cjh5414.github.io/binary-search/)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%88%9C%EC%B0%A8-%ED%83%90%EC%83%89%EA%B3%BC-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EC%9E%90\">순차 탐색과 이진탐색을 비교해보자.</a></p>\n<ul>\n<li><a href=\"#%EC%88%9C%EC%B0%A8-%ED%83%90%EC%83%89\">순차 탐색</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\">이진 탐색</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 16, 2021","title":"Algorithm[binary-search]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-binary-search/"}},"prev":{"id":"b73e5d13-5030-5ce7-b1d2-5a706e1aae45","html":"<h2 id=\"️⃣-해시\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%E2%83%A3-%ED%95%B4%EC%8B%9C\" aria-label=\"️⃣ 해시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#️⃣ 해시</h2>\n<p>👨‍🏫 해쉬 테이블(Hash Table)은 “키” 와 “데이터”를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 빠른 검색과 저장이 특징인 자료구조이다.</p>\n<p>해시 테이블의 형태의 자료구조는 여러 언어에서 이미 우리가 많이 사용하고 있다. 자바스크립트의 오브젝트 또는 파이썬의 딕셔너리를 해시 테이블과 같다고 보면 된다 (사실 완저히 같다고 할 수는 없지만 현재로서는 이렇게 이해하는게 가장 좋을거 같다).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"초록\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"포도\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>“데이터를 빠르게 검색할 수 있다”라는 해시 테이블의 장점은 우리가 딕셔너리에서 또는 자바스크립트 오브젝트에서 index가 아닌 key 값으로 특정 데이터에 접근할 때를 생각하면 된다. 예를 들어서 위에 예시로 작성한 dict 오브젝트에 2개의 데이터 쌍이 아닌 100개의 key value 쌍의 데이터가 있다고 생각해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"사과\"</span></code></pre></div>\n<p>아무리 많은 데이터가 있어도 key 값만 가지고 있다면 바로 원하는 데이터에 접근할 수 있고 따라서 <strong>해시테이블의 평균 시간복잡도는 O(1)이다.</strong></p>\n<br/>\n<p>👉 키를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라진다.</p>\n<p>찾는 데이터가 있는지 배열을 다~~~둘러보지 않고,</p>\n<p>키에 대해서 검색하면 바로 값을 조회할 수 있는 아주 유용한 자료구조이다.</p>\n<br/>\n<h2 id=\"-잠깐-배열과-차이는\" style=\"position:relative;\"><a href=\"#-%EC%9E%A0%EA%B9%90-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EB%8A%94\" aria-label=\" 잠깐 배열과 차이는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖐 잠깐! 배열과 차이는?</h2>\n<ul>\n<li>\n<p>배열은 연관된 데이터를 모아서 한 번에 관리하기 위해 사용하는 데이터 타입이다. 배열의 요소(데이터)는 직선형적으로 또 순차적으로 저장되고 int(정수)타입의 index 값을 가진다.\n<img src=\"https://images.velog.io/images/heesungj7/post/61b58c41-7a12-4007-ab12-4f9d1aceff56/img.png\" alt=\"\"></p>\n</li>\n<li>\n<p>반면 해시 테이블의 요소는 <strong>“key”</strong> 값을 가지며, 이는 해시함수를 적용해 고유한 index를 변환되고 특정한 순서나 패턴없이 해시 함수를 통해 얻은 index 위치에 데이터를 저장한다.\n<img src=\"https://images.velog.io/images/heesungj7/post/a7f11447-d1b9-4631-864c-ddf5159b217a/%E1%84%83%E1%85%A1%E1%84%8B%E1%85%AE%E1%86%AB%E1%84%85%E1%85%A9%E1%84%83%E1%85%B3.png\" alt=\"\"></p>\n</li>\n<li>\n<p>해시 함수는 언제나 동일한 해시값을 리턴하고, 인덱스만 알면 해시 테이블이 아무리 커도 데이터에 빠르게 접근할 수 있다.(배열과 유사) 따라서 데이터에 접근하는 경우 시간복잡도는 O(1)을 지향하는 상수에 가까운 값이 나오게 된다. 배열의 경우 탐색시 시간복잡도는 O(1)이지만, 메모리를 미리 많이 할당해 두어야 하기 때문에 공간효율적이라고 보기가 어렵다.</p>\n</li>\n</ul>\n<br/>\n<blockquote>\n<p>예를 들면 해시테이블에서 “key 3에 해당하는 값이 있는가?”는 O(1) 연산이지만 배열에는 키값의 개념이 없으니 찾고자 하는 요소가 배열의 마지막에 위치해 있다면 처음부터 끝까지 다 비교해 봐야 하므로 O(N)의 연산이 된다.</p>\n</blockquote>\n<br/>\n<hr/>\n<br/>\n<h2 id=\"-해시-테이블-딕셔너리도-사실-내부적으로는-배열을-사용한다\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%8F%84-%EC%82%AC%EC%8B%A4-%EB%82%B4%EB%B6%80%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8A%94-%EB%B0%B0%EC%97%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\" 해시 테이블 딕셔너리도 사실 내부적으로는 배열을 사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 해시 테이블 (딕셔너리)도 사실 내부적으로는 배열을 사용한다?</h2>\n<p>위 예시에서 “빨강”이라는 key 값을 가지고 “사과”라는 value에 바로 접근이 가능했다. 그렇다면 내부 적으로 어떻게 이게 가능할까? loop 실행하지 않고 수 많은 데이터 중에서 어떻게 특정 데이터의 위치를 찾을 수 있을까? <strong>👉 바로 해시 함수가 이를 가능하게 한다.</strong></p>\n<h3 id=\"-해시-함수-hash-function\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-hash-function\" aria-label=\" 해시 함수 hash function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 해시 함수 (hash function)</h3>\n<blockquote>\n<p>해시 테이블은 각각의 Key값에 <strong>해시함수</strong>를 적용해 배열의 <strong>고유한 index</strong>를 생성하고, 이 index를 활용해 값을 저장하거나 검색하게 된다.</p>\n</blockquote>\n<p>해쉬 함수(Hash Function)는 임의의 길이를 갖는 메시지를 입력하여 고정된 길이의 해쉬값을 출력하는 함수이다.</p>\n<p>일단, 파이썬이 내장 함수로 제공하는 해시 함수를 실행시켜 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">146084012848775433</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"초록\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7051061338400740146</span></code></pre></div>\n<p>출력 값을 보면 마이너스 값도 있고, 무지막지하게 큰 값도 있다. 어떻게 이 값들을 이용해서 배열에 넣을까?</p>\n<p>바로 <strong>배열의 길이로 나눈 나머지 값을 쓰면 된다.</strong></p>\n<p>예를 들어 (Key, Value)가 (“빨강”, “사과”)인 데이터를 크기가 8인 해시 테이블에 저장한다고 하자.</p>\n<ul>\n<li>\n<p>그러면 먼저 index = hash_function(“빨강”) % 8 연산을 통해 index 값을 계산한다.</p>\n</li>\n<li>\n<p>그리고 array[index] = “사과”로 데이터를 저장하게 된다.</p>\n</li>\n</ul>\n<h3 id=\"️-파이썬으로-해시-테이블을-딕셔너리로-간단하게-구현해보고-기본적인-작동-원리와-개념을-익혀보자\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC%EC%99%80-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%9D%B5%ED%98%80%EB%B3%B4%EC%9E%90\" aria-label=\"️ 파이썬으로 해시 테이블을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 파이썬으로 <strong>해시 테이블</strong>을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dict</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        index <span class=\"token operator\">=</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 새로운 딕셔너리 객체를 생성하고</span>\nmy_dict <span class=\"token operator\">=</span> Dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 딕셔너리 클래스에 정의한 put method로 데이터를</span>\nmy_dict<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">)</span> 삽입한다<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">#배열(8)      [], [], [], [], [], [], [], []</span>\n<span class=\"token comment\">#index       0   1   2   3   4   5   6   7</span>\n\n<span class=\"token comment\"># put 함수의 인자 값으로 key와 value가 전달된다</span>\n<span class=\"token comment\"># > put(\"빨강\", \"사과\")</span>\n<span class=\"token comment\"># > index = hash(\"빨강\") % 8</span>\n<span class=\"token comment\"># > index = -3828184704475021389 % 8 = 3</span>\n<span class=\"token comment\"># > index = 3</span>\n<span class=\"token comment\"># self.items[3] = \"사과\"</span>\n<span class=\"token comment\">#배열(8)      [], [], [], [\"사과\"], [], [], [], []</span>\n<span class=\"token comment\">#index       0   1   2      3     4   5   6   7</span>\n\n\n<span class=\"token comment\">#이제 해시 테이블이 내부적으로 어떻게 배열을 활용해 데이터를 저장하는지 알아봤으니 key 값을 가지고 어떻게 데이터를 접근해 반환하는지 알아보자.</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_dict<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token number\">3</span>을 반환한다<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\"># get(self, key)</span>\n<span class=\"token comment\"># > print(get(\"빨강\"))</span>\n<span class=\"token comment\"># > index = hash(\"빨강\")%len(8) = 3</span>\n<span class=\"token comment\"># > return self.items[3]</span>\n<span class=\"token operator\">></span> 🍎 사과</code></pre></div>\n<p>이렇게 해시 함수를 사용하면 key를 주소 값으로 쉽게 원하는 데이터를 찾을 수 있고 해시 테이블의 기본적인 작동 방식이다.</p>\n<h2 id=\"️-주의사항-만약-해쉬의-값이-같으면-어떻게-될까\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EB%A7%8C%EC%95%BD-%ED%95%B4%EC%89%AC%EC%9D%98-%EA%B0%92%EC%9D%B4-%EA%B0%99%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C\" aria-label=\"️ 주의사항 만약 해쉬의 값이 같으면 어떻게 될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚠️ 주의사항: 만약 해쉬의 값이 같으면 어떻게 될까?</h2>\n<p>index 값은 해시 값을 배열의 길이로 나누어 얻기 때문에 이미 데이터를 저장한 index 값이 다시 나올 확률이 있다. 이러한 경우에 같은 어레이의 인덱스로 매핑이 되어서 데이터를 덮어 써버리는 결과가 발생한다.</p>\n<p><strong>이를 충돌(collision)이 발생했다고 한다.</strong></p>\n<p>이러한 충돌을 해결하는 여러가지 방법이 있는데 대표적으로 <strong>chaining</strong> 방식과 <strong>Addressing</strong> 방법이 있다.</p>\n<h3 id=\"chaining\" style=\"position:relative;\"><a href=\"#chaining\" aria-label=\"chaining permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chaining</h3>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/a9586bae-6145-46e6-aadc-13e959832e14/Untitled.png\" alt=\"\"></p>\n<p>chaining 방법 살펴보면 배열에 들어갈 수 있는 엔트리의 수에 제한을 두지 않음으로서, 모든 자료를 해시테이블에 담는 것이다. 해당 버킷에 이미 데이터가 있다면 연결 리스트 (linked list) 방식을 사용하여 노드와 노드를 체인처럼 연결하는 방법이다.</p>\n<blockquote>\n<p>이 방법의 장점은 유연하며, 삭제 및 삽입의 시간복잡도가 O(1)으로 빠르다는 점이 있다.</p>\n</blockquote>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>해쉬 테이블(Hash Table)은 “키” 와 “데이터”를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 자료구조이다.</p>\n<p>해쉬 함수(Hash Function)는 임의의 길이를 갖는 메시지를 입력하여 고정된 길이의 해쉬값을 출력하는 함수이다.</p>\n<p>해쉬 테이블의 내부 구현은 키를 해쉬 함수를 통해 임의의 값으로 변경한 뒤 배열의 인덱스로 변환하여 해당하는 값에 데이터를 저장한다.</p>\n<p>그렇기 때문에 즉각적으로 데이터를 찾고, 추가할 수 있는 것 이다.</p>\n<p>만약, 해쉬 값 혹은 인덱스가 중복되어 충돌이 일어난다면?</p>\n<br/>\n<p>✅ 체이닝과 개방 주소법 방법으로 해결할 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F%E2%83%A3-%ED%95%B4%EC%8B%9C\">#️⃣ 해시</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%9E%A0%EA%B9%90-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EB%8A%94\">🖐 잠깐! 배열과 차이는?</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%8F%84-%EC%82%AC%EC%8B%A4-%EB%82%B4%EB%B6%80%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8A%94-%EB%B0%B0%EC%97%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\">📌 해시 테이블 (딕셔너리)도 사실 내부적으로는 배열을 사용한다?</a></p>\n<ul>\n<li><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-hash-function\">📖 해시 함수 (hash function)</a></li>\n<li><a href=\"#%EF%B8%8F-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC%EC%99%80-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%9D%B5%ED%98%80%EB%B3%B4%EC%9E%90\">✏️ 파이썬으로 <strong>해시 테이블</strong>을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EB%A7%8C%EC%95%BD-%ED%95%B4%EC%89%AC%EC%9D%98-%EA%B0%92%EC%9D%B4-%EA%B0%99%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C\">⚠️ 주의사항: 만약 해쉬의 값이 같으면 어떻게 될까?</a></p>\n<ul>\n<li><a href=\"#chaining\">Chaining</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 09, 2021","title":"Hash table","categories":"DataStructure","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-hash-table/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/algo-stack-queue/","nextSlug":"/algo-binary-search/","prevSlug":"/algo-hash-table/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}