{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/algo-stack-queue/",
    "result": {"data":{"cur":{"id":"6caa77ca-b476-51ff-9633-b8ecf898d197","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/3c68fa92-99f0-4de9-9d08-6b795583f212/1_r4Bfo3rrFprzFM2zbgzZXA.jpeg\" alt=\"\"></p>\n<h2 id=\"️-스택-stack\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%83%9D-stack\" aria-label=\"️ 스택 stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 스택 (stack)</h2>\n<p>스택은 <strong>후입선출 구조 (LIFO, Last In First Out) 구조</strong>라고 해서 한쪽 끝으로만 자료를 넣고 뺄 수 있는 자료 구조이다.</p>\n<h3 id=\"스택이-사용되는-예시\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D%EC%9D%B4-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%98%88%EC%8B%9C\" aria-label=\"스택이 사용되는 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택이 사용되는 예시</h3>\n<ul>\n<li><strong>컴퓨터의 되돌리기(Ctrl + Z) 기능</strong>: 직전에 했던 행동을 되돌고 싶을 때 사용하는 기능으로, 이를 위해서는 내가 했던 행동들을 순서대로 기억해야 하므로 스택을 사용한다.</li>\n</ul>\n<h2 id=\"-특징\" style=\"position:relative;\"><a href=\"#-%ED%8A%B9%EC%A7%95\" aria-label=\" 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 특징</h2>\n<ul>\n<li>\n<p>스택은 위의 사진처럼 같은 구조와 크기의 자료를 정해진 방향으로만 쌓을수 있으며 데이터 접근 또한 데이터가 삽입된 top을 통해서만 접근이 가능하다.</p>\n</li>\n<li>\n<p>스택의 가장 상위에 위치하는 자료는 가장 최근에 들어온 자료이며, 새로 삽입되는 자료는 top이 가리키는 자료의 위에 쌓이게 된다.</p>\n</li>\n<li>\n<p>스택에서 자료를 삭제할 때도 top을 통해서만 가능하다.</p>\n</li>\n</ul>\n<blockquote>\n<p>스택에서 top을 통해 삽입하는 연산을 **‘push’ , top을 통한 삭제하는 연산을 ‘pop’**이라고 한다.</p>\n</blockquote>\n<h3 id=\"스택-자료구조의-기능들을-코드로-직접-구현해보자\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%93%A4%EC%9D%84-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"스택 자료구조의 기능들을 코드로 직접 구현해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 자료구조의 기능들을 코드로 직접 구현해보자.</h3>\n<h3 id=\"1-push-맨-앞에-데이터-넣기\" style=\"position:relative;\"><a href=\"#1-push-%EB%A7%A8-%EC%95%9E%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%84%A3%EA%B8%B0\" aria-label=\"1 push 맨 앞에 데이터 넣기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Push: 맨 앞에 데이터 넣기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_head <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        new_head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_head\n</code></pre></div>\n<h3 id=\"2-pop-맨-앞의-데이터-뽑기\" style=\"position:relative;\"><a href=\"#2-pop-%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%BD%91%EA%B8%B0\" aria-label=\"2 pop 맨 앞의 데이터 뽑기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. pop: 맨 앞의 데이터 뽑기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        deleted_stack <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> deleted_stack</code></pre></div>\n<h3 id=\"3-peek-맨-앞의-데이터-보기\" style=\"position:relative;\"><a href=\"#3-peek-%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EA%B8%B0\" aria-label=\"3 peek 맨 앞의 데이터 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. peek: 맨 앞의 데이터 보기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data</code></pre></div>\n<h3 id=\"4-is_empty-스택이-비었는지-안-비었는지-여부-반환해주기\" style=\"position:relative;\"><a href=\"#4-is_empty-%EC%8A%A4%ED%83%9D%EC%9D%B4-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%95%88-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%97%AC%EB%B6%80-%EB%B0%98%ED%99%98%ED%95%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"4 is_empty 스택이 비었는지 안 비었는지 여부 반환해주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. is_empty: 스택이 비었는지 안 비었는지 여부 반환해주기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span></code></pre></div>\n<hr>\n<h2 id=\"️-큐-queue\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%81%90-queue\" aria-label=\"️ 큐 queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 큐 (queue)</h2>\n<p>한쪽 끝으로 자료를 넣고, 반대쪽에서는 자료를 뺄 수 있는 <strong>선형구조</strong>.</p>\n<h3 id=\"-왜-이런-자료구조가-필요할까\" style=\"position:relative;\"><a href=\"#-%EC%99%9C-%EC%9D%B4%EB%9F%B0-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\" aria-label=\" 왜 이런 자료구조가 필요할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 왜 이런 자료구조가 필요할까?</h3>\n<blockquote>\n<p>순서대로 처리되어야 하는 일에 필요하기 때문이다!</p>\n</blockquote>\n<h2 id=\"-특징-1\" style=\"position:relative;\"><a href=\"#-%ED%8A%B9%EC%A7%95-1\" aria-label=\" 특징 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 특징</h2>\n<blockquote>\n<p>가장 먼저 들어온 프론트 원소가 가장 먼저 삭제.\n접근방법은 가장 첫 원소와 끝 원소로만 가능.</p>\n</blockquote>\n<ul>\n<li>\n<p>데이터의 삽입과 삭제가 한쪽(top)으로만 이루어지는 스택 구조와는 달리, 큐는 한쪽 끝에서 삽입 작업이, 다른 쪽 끝에서 삭제 작업이 선형적으로 이루어진다.</p>\n</li>\n<li>\n<p><strong>front</strong>: 삭제 연산이 이루어지는 곳. 즉, 가장 먼저 들어온 데이터가 큐를 나가는 곳이다.</p>\n</li>\n<li>\n<p><strong>rear</strong>: 삽입 연산이 이루어지는 곳. 새로 추가되는 데이터는 rear통해 큐에 삽입된다.</p>\n</li>\n<li>\n<p>이때, 큐의 리어에서 이루어지는 삽입연산을 <strong>인큐(enQueue)</strong> 라고하며 프론트에서 이루어지는 삭제연산을 <strong>디큐(dnQueue)</strong> 라고 부른다.</p>\n</li>\n</ul>\n<h3 id=\"큐-자료구조의-기능들을-코드로-직접-구현해보자\" style=\"position:relative;\"><a href=\"#%ED%81%90-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%93%A4%EC%9D%84-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"큐 자료구조의 기능들을 코드로 직접 구현해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큐 자료구조의 기능들을 코드로 직접 구현해보자.</h3>\n<h3 id=\"1-enqueuedata--맨-뒤에-데이터-추가하기\" style=\"position:relative;\"><a href=\"#1-enqueuedata--%EB%A7%A8-%EB%92%A4%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"1 enqueuedata  맨 뒤에 데이터 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. enqueue(data) : 맨 뒤에 데이터 추가하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_node\n            self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> new_node\n            <span class=\"token keyword\">return</span>\n        self<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new_node\n        self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> new_node\n        <span class=\"token keyword\">return</span></code></pre></div>\n<h3 id=\"2-dequeue--맨-앞의-데이터-뽑기\" style=\"position:relative;\"><a href=\"#2-dequeue--%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%BD%91%EA%B8%B0\" aria-label=\"2 dequeue  맨 앞의 데이터 뽑기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. dequeue() : 맨 앞의 데이터 뽑기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Queue is empty\"</span><span class=\"token punctuation\">)</span>\n        removed_queue <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> removed_queue<span class=\"token punctuation\">.</span>data</code></pre></div>\n<h3 id=\"3-peek--맨-앞의-데이터-보기\" style=\"position:relative;\"><a href=\"#3-peek--%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EA%B8%B0\" aria-label=\"3 peek  맨 앞의 데이터 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. peek() : 맨 앞의 데이터 보기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"> <span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Queue is empty\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data</code></pre></div>\n<h3 id=\"4-isempty-큐가-비었는지-안-비었는지-여부-반환해주기\" style=\"position:relative;\"><a href=\"#4-isempty-%ED%81%90%EA%B0%80-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%95%88-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%97%AC%EB%B6%80-%EB%B0%98%ED%99%98%ED%95%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"4 isempty 큐가 비었는지 안 비었는지 여부 반환해주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. isEmpty(): 큐가 비었는지 안 비었는지 여부 반환해주기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span></code></pre></div>\n<hr>\n<p>참고 (<a href=\"https://devuna.tistory.com/22\">https://devuna.tistory.com/22</a>)</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%83%9D-stack\">✏️ 스택 (stack)</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%83%9D%EC%9D%B4-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%98%88%EC%8B%9C\">스택이 사용되는 예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%8A%B9%EC%A7%95\">📌 특징</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%83%9D-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%93%A4%EC%9D%84-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\">스택 자료구조의 기능들을 코드로 직접 구현해보자.</a></li>\n<li><a href=\"#1-push-%EB%A7%A8-%EC%95%9E%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%84%A3%EA%B8%B0\">1. Push: 맨 앞에 데이터 넣기</a></li>\n<li><a href=\"#2-pop-%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%BD%91%EA%B8%B0\">2. pop: 맨 앞의 데이터 뽑기</a></li>\n<li><a href=\"#3-peek-%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EA%B8%B0\">3. peek: 맨 앞의 데이터 보기</a></li>\n<li><a href=\"#4-is_empty-%EC%8A%A4%ED%83%9D%EC%9D%B4-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%95%88-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%97%AC%EB%B6%80-%EB%B0%98%ED%99%98%ED%95%B4%EC%A3%BC%EA%B8%B0\">4. is_empty: 스택이 비었는지 안 비었는지 여부 반환해주기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%81%90-queue\">✏️ 큐 (queue)</a></p>\n<ul>\n<li><a href=\"#-%EC%99%9C-%EC%9D%B4%EB%9F%B0-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\">🌟 왜 이런 자료구조가 필요할까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%8A%B9%EC%A7%95-1\">📌 특징</a></p>\n<ul>\n<li><a href=\"#%ED%81%90-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%93%A4%EC%9D%84-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\">큐 자료구조의 기능들을 코드로 직접 구현해보자.</a></li>\n<li><a href=\"#1-enqueuedata--%EB%A7%A8-%EB%92%A4%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">1. enqueue(data) : 맨 뒤에 데이터 추가하기</a></li>\n<li><a href=\"#2-dequeue--%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%BD%91%EA%B8%B0\">2. dequeue() : 맨 앞의 데이터 뽑기</a></li>\n<li><a href=\"#3-peek--%EB%A7%A8-%EC%95%9E%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EA%B8%B0\">3. peek() : 맨 앞의 데이터 보기</a></li>\n<li><a href=\"#4-isempty-%ED%81%90%EA%B0%80-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%95%88-%EB%B9%84%EC%97%88%EB%8A%94%EC%A7%80-%EC%97%AC%EB%B6%80-%EB%B0%98%ED%99%98%ED%95%B4%EC%A3%BC%EA%B8%B0\">4. isEmpty(): 큐가 비었는지 안 비었는지 여부 반환해주기</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"✏️ 스택 (stack) 스택은 후입선출 구조 (LIFO, Last In First Out) 구조라고 해서 한쪽 끝으로만 자료를 넣고 뺄 수 있는 자료 구조이다. 스택이 사용되는 예시 컴퓨터의 되돌리기(Ctrl + Z) 기능: 직전에 했던 행동을 되돌고 싶을 때 사용하는 기능으로, 이를 위해서는 내가 했던 행동들을 순서대로 기억해야 하므로 스택을 사용한다. 📌 특징 스택은 위의 사진처럼 같은 구조와 크기의 자료를 정해진 방향으로만 쌓을수 있으며 데이터 접근 또한 데이터가 삽입된 top을 통해서만 접근이 가능하다. 스택의 가장 상위에 위치하는 자료는 가장 최근에 들어온 자료이며, 새로 삽입되는 자료는 top이 가리키는 자료의 위에 쌓이게 된다. 스택에서 자료를 삭제할 때도 top을 통해서만 가능하다. 스택에서 top을 통해 삽입하는 연산을 **‘push’ , top을 통한 삭제하는 연산을 ‘pop’**이라고 한다. 스택 자료구조의 기능들을 코드로 직접 구현해보자. 1. Push: 맨 …","frontmatter":{"date":"June 20, 2021","title":"Stack & Queue","categories":"DataStructure","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-stack-queue/"}},"next":{"id":"b5bd90f1-3369-5815-9656-beaa957871a8","html":"<h2 id=\"1-이진-탐색\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\" aria-label=\"1 이진 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이진 탐색</h2>\n<p>배열 구조의 자료에서 특정 값을 찾는 방법은 크게 두가지가 있을 수 있다.</p>\n<ul>\n<li>순차 탐색</li>\n<li><strong>이진탐색</strong></li>\n</ul>\n<p>순차 탐색에서는 배열의 시작부터 순차적으로 이동하며 찾고자 하는 특정 값을 모든 배열의 원소들과 비교하며 값을 찾을 때까지 반복한다.</p>\n<blockquote>\n<p><strong>이진 탐색</strong>이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다. 배열의 중간에 있는 임의의 값을 선택하여 찾고자 하는 값 X와 비교한다.</p>\n</blockquote>\n<ul>\n<li>X가 중간 값보다 작으면 중간 값을 기준으로 좌측의 데이터들을 대상으로,</li>\n<li>X가 중간값보다 크면 배열의 우측을 대상으로 다시 탐색한다.</li>\n</ul>\n<h5 id=\"출처httpscjh5414githubiobinary-search\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98httpscjh5414githubiobinary-search\" aria-label=\"출처httpscjh5414githubiobinary search permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처(<a href=\"https://cjh5414.github.io/binary-search/\">https://cjh5414.github.io/binary-search/</a>)</h5>\n<h2 id=\"순차-탐색과-이진탐색을-비교해보자\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%B0%A8-%ED%83%90%EC%83%89%EA%B3%BC-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"순차 탐색과 이진탐색을 비교해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순차 탐색과 이진탐색을 비교해보자.</h2>\n<h3 id=\"순차-탐색\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%B0%A8-%ED%83%90%EC%83%89\" aria-label=\"순차 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순차 탐색</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">finding_target <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\nfinding_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_existing_target_number_sequential</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> number<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\nresult <span class=\"token operator\">=</span> is_existing_target_number_sequential<span class=\"token punctuation\">(</span>finding_target<span class=\"token punctuation\">,</span> finding_numbers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></code></pre></div>\n<blockquote>\n<p>array 를 따라가면서 target 이 존재한다면 True 를 반환하고,\n끝까지 없다면 False 를 반환한다.</p>\n</blockquote>\n<h3 id=\"이진-탐색\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\" aria-label=\"이진 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진 탐색</h3>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/e7c13b08-e919-41ad-94f2-b5fcc03bc9bf/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.47.03.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">finding_target <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\nfinding_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_existing_target_number_binary</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tcurrent_min <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    current_max <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    current_guess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current_min <span class=\"token operator\">+</span> current_max<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">while</span> current_min <span class=\"token operator\">&lt;=</span> current_max<span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>current_guess<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n    \t    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\t<span class=\"token keyword\">elif</span> array<span class=\"token punctuation\">[</span>current_guess<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span>\n    \t    current_min <span class=\"token operator\">=</span> current_guess <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    \t    current_max <span class=\"token operator\">=</span> current_guess <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\tcurrent_guess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current_min <span class=\"token operator\">+</span> current_max<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n\nresult <span class=\"token operator\">=</span> is_existing_target_number_binary<span class=\"token punctuation\">(</span>finding_target<span class=\"token punctuation\">,</span> finding_numbers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\">1. 이진 탐색</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%B6%9C%EC%B2%98httpscjh5414githubiobinary-search\">출처(https://cjh5414.github.io/binary-search/)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%88%9C%EC%B0%A8-%ED%83%90%EC%83%89%EA%B3%BC-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EC%9E%90\">순차 탐색과 이진탐색을 비교해보자.</a></p>\n<ul>\n<li><a href=\"#%EC%88%9C%EC%B0%A8-%ED%83%90%EC%83%89\">순차 탐색</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89\">이진 탐색</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 16, 2021","title":"Algorithm[binary-search]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-binary-search/"}},"prev":{"id":"5225a0a2-941e-53ab-975f-368d705f85f7","html":"<h2 id=\"보초법-sentinel-method\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%B4%88%EB%B2%95-sentinel-method\" aria-label=\"보초법 sentinel method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보초법 (sentinel method)</h2>\n<p>여러가지 배열 검색 방법들중 선형검색은 배열의 처음부터 마지막 또는 찾고자 하는 데이터가 나올때까지 순차적으로 모든 데이터를 비교하는 방법이다.</p>\n<h4 id=\"간단한-코드-예제\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C\" aria-label=\"간단한 코드 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 코드 예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">linear_search</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">if</span> l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> i\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>위 선형 검색은 루프가 반복할 때마다 2가지 종료 조건을 체크한다. 단순한 판단이지만 이 과정을 계속 반복하면 종류 조건을 검사하는 cost를 무시할 수 없다.</p>\n<blockquote>\n<p>선형 검색의 종류 조건</p>\n</blockquote>\n<ol>\n<li>i == len(l)가 성립하면 (실패)</li>\n<li>a[i] == value가 성립하면 (성공)</li>\n</ol>\n<p>이과정을 줄여주는 것이 <strong>보초법(sentinel method)이다</strong>.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/87ef5cba-992c-4b57-80f1-bbcde047fd11/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-06-21%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.44.52.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>검색하고자 하는 키값을 배열의 맨 끝에 넣어준다.</p>\n</li>\n<li>\n<p>이때 저정하는 값을 <strong>보초</strong>라고 한다.</p>\n</li>\n<li>\n<p>위 그림에서 볼 수 있듯이, 기존 데이터에 찾고자하는 키 값이 존재하지 않아도, 보초를 통해 검색할 값을 찾았나?라는 질문에 True를 반환하게된다.</p>\n</li>\n<li>\n<p>이렇게 if 조건을 하나 단축할 수 있으며, return에서 찾은 데이터의 인덱스가 배열의 길이와 같은지 검사만 해주면 된다.</p>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B3%B4%EC%B4%88%EB%B2%95-sentinel-method\">보초법 (sentinel method)</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C\">간단한 코드 예제</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 21, 2021","title":"Algorithm[sentinel-linear-search]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-sentinel-search/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/algo-stack-queue/","nextSlug":"/algo-binary-search/","prevSlug":"/algo-sentinel-search/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}