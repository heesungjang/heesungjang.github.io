{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-53/",
    "result": {"data":{"cur":{"id":"99b34f9a-06f5-56e1-9c08-5ebafac7db0e","html":"<p><a href=\"https://leetcode.com/problems/maximum-subarray/\">문제:Maximum Subarray</a></p>\n<p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>\n<p>A subarray is a contiguous part of an array.</p>\n<p>브루트포스로 O(n^2)을 풀이가 가능한 문제이지만 최대 부분 합을 구하는 유명한 카데인 Kadane’s 알고리즘 풀이가 있다. O(n)에 풀이가 가능하다.</p>\n<h4 id=\"카데인-알고리즘이란\" style=\"position:relative;\"><a href=\"#%EC%B9%B4%EB%8D%B0%EC%9D%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"카데인 알고리즘이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>카데인 알고리즘이란?</h4>\n<p>[ 1, -3, -1, 2] 와 같은 수의 나열 “수열”이 주어졌을 때 각 수들을 더했을때 가장 큰 합을 가지는 연속적인 서브 배열을 찾는 알고리즘이다.</p>\n<p>카데인 알고리즘은 “이미 구했던 값은 다시 재사용”하는 접근법을 이용하며, Brute Force의 A[0]~A[N-1]의 접근 방법이 아닌 A[N-1]~A[0] 접근 아이디어를 사용한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/3f2f1778-4683-4eda-a147-7ddb622b3d7e/image.png\" alt=\"\"></p>\n<p>위 그림을 보면 A[5]의 curr_max 구하려면, A[4]의 curr_max + A[5]를 해주면 되는걸 확인할 수 있다.</p>\n<blockquote>\n<p>각 A[4] Sum 배열 값에 A[5]를 더해주면 A[5] Sum에 대한 값들이 나온다.</p>\n</blockquote>\n<p>이러한 방법은 A[5]의 모든 부분 합을 처음부터 다시 계산하지 않더라고 A[5]에 부분 합을 구할 수 있음을 뜻한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curr_max[i] = max(A[i] + curr_max[i-1], A[i])</code></pre></div>\n<ul>\n<li>위 공식은 부분 집합의 최대 합을 구하는 목적이기 때문에,</li>\n<li>A[i]+curr_max[i-1]과 A[i] 중 무엇이 더 큰지 비교합니다. (A[i]가 더 크다면 이 전에 구했던 부분 집합은 필요 없기 때문)</li>\n<li>이렇게 구한 curr_max 배열에서 가장 큰 값을 구하면 Maximum Subarray Problem의 최대 부분 배열 합을 구할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">max_sub_array</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    curr_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    max_sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        curr_sum <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> curr_sum <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span>\n        max_sum <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>curr_sum<span class=\"token punctuation\">,</span> max_sum<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> max_sum</code></pre></div>","excerpt":"문제:Maximum Subarray Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array. 브루트포스로 O(n^2)을 풀이가 가능한 문제이지만 최대 부분 합을 구하는 유명한 카데인 Kadane’s 알고리즘 풀이가 있다. O(n)에 풀이가 가능하다. 카데인 알고리즘이란? [ 1, -3, -1, 2] 와 같은 수의 나열 “수열”이 주어졌을 때 각 수들을 더했을때 가장 큰 합을 가지는 연속적인 서브 배열을 찾는 알고리즘이다. 카데인 알고리즘은 “이미 구했던 값은 다시 재사용”하는 접근법을 이용하며, Brute Force의 A[0]~A[N-1]의 접근 방법이 아닌 A[N-1]~A[0] 접근 아이디어를 사용한다.  위 그림을…","frontmatter":{"date":"April 12, 2022","title":"leetcode(53)- maximum sub-array[카데안 알고리즘]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-53/"}},"next":{"id":"a23481e9-33f4-5e36-b83f-24b95b874ebf","html":"<p>문제: <a href=\"https://leetcode.com/problems/3sum/\">leetcode - 15</a> (3sum)</p>\n<p>Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.</p>\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n<p>배열을 입력받아 합으로 0을 만들 수 있는 3개의 배열 원소를 찾아 반환하는 문제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">예시:\n\nInput: nums = [-1,0,1,2,-1,-4]\n\nOutput: [[-1,-1,2],[-1,0,1]]</code></pre></div>\n<p>3개의 원소를 찾아야 하고 브루트 포스로 방식으로 풀이했을 경우 시간 복잡도가 O(n^3)로 당연히 시간 초과가 날 것이다.</p>\n<p><a href=\"https://leetcode.com/problems/two-sum/\">two sum</a> 또는 <a href=\"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\">two sum2</a>에 사용했던 투 포인터 기법을 응용하면 이 문제도 나름 쉽게 풀이가 가능하다.</p>\n<p>n개의 숫자리스트가 주어졌을 때 세 수의 합이 0이 되는 세 수를 구해야 한다.</p>\n<ol>\n<li>\n<p>투 포인터 기법을 사용할 것이기 때문에 입력 받은 배열을 오름차 순으로 정렬한다.</p>\n</li>\n<li>\n<p>반복문의 인덱스를 i로 두었을 때, i+1 즉, i를 재외한 나머지 배열의 첫번째 인덱스에 포인터를 하나 위치하고 len(n)-1인 배열의 마지막 인덱스 위치에 포인터를 하나 위치한다. 그림으로 보면 이해가 쉽다.\n<img src=\"https://velog.velcdn.com/images/heesungj7/post/2019a970-8bea-424b-9106-05a70de4e5b3/image.jpeg\" alt=\"\"></p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">three_sum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># 포인터 기법을 사용하기 위해서 배열을 먼저 정렬 한다.</span>\n    nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># 찾은 pair들을 sums에 저장하기 위해 배열을 하나 초기화 해준다.</span>\n    sums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token comment\"># 반복문을 설정한다. 최소 3개의 원소가 필요하기 때문에 반복문의 길이는 len()-2로 설정한다.</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># i가 0보다 큰데 즉, 두번째 index 부터 이전에 같은 값이 이미 나온 중복 값인지 체크를 한다.</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        \t<span class=\"token comment\"># 3. 왼쪽 포인터를 left, 오른쪽 포인터를 right로 설정한다.</span>\n\t\t\t<span class=\"token comment\"># left은 i보다 한 칸 오른쪽에 있고, right은 가장 마지막 칸에 있다 (위 그림 참조).</span>\n            left <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            right <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n            <span class=\"token comment\"># left가 right보다 커질 때까지 세 수의 합이 0이 되는 케이스를 찾는다</span>\n            <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span>\n                curr_sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> curr_sum <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    sums<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    right <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                    <span class=\"token comment\"># 세 수의 합이 0이 되는 경우 answer에 추가해준다.</span>\n                    <span class=\"token comment\"># 중복된 숫자가 존재하면 두 번 탐색하지 않도록 포인터를 한 칸 더 이동시킨다</span>\n                    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">elif</span> curr_sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">elif</span> curr_sum <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    right <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> sums\n</code></pre></div>","frontmatter":{"date":"April 11, 2022","title":"leetcode(15) - 3 sum","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-15/"}},"prev":{"id":"903364a3-94cb-50b0-b846-a38e34810127","html":"<p>퀵 정렬은 병합 정렬과 마찬가지로 분할 정복 알고리즘이다. 병합 정렬과 다른점은 항상 배열의 중앙을 기준을 분활 정복을 하는것이 아닌 **pivot(피벗)**이라는 기준을 만들고 피벗보다 작으면 왼쪽, 크면 오른쪽과 같은 방식으로 <strong>partitioning(파티셔닝)</strong> 하면서 쪼개 나간다.</p>\n<p><img src=\"https://www.tutorialspoint.com/data_structures_algorithms/images/quick_sort_partition_animation.gif\" alt=\"\"></p>\n<p>피벗을 정하는 기준과 방법이 여럿 있지만 N.로무토가 구현한 파티션 계획에서 소개된 방법으로 <strong>항상 맨 오른쪽의 피벗</strong>을 택하는 단순한 방식이 가장 간결하고 이해하기 쉽다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">:</span>\n    \t<span class=\"token comment\"># 파티션 함수</span>\n        pivot <span class=\"token operator\">=</span> partition<span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span>\n\n        quick_sort<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> pivot <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        quick_sort<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> pivot <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span></code></pre></div>\n<p>퀵 정렬의 메인 함수는 간단하다. 파티션 함수로 배열을 pivot 기준으로 나누고 재귀 호출하는 전형적인 분할 정복 구조이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 파티션 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># pivot 설정 - 오른쪽 끝 마지막 인덱스 선택 (로무토 파티션 계획)</span>\n        pivot <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span>\n        left <span class=\"token operator\">=</span> low\n        <span class=\"token keyword\">for</span> right <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">:</span>\n                nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>\n                left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">return</span> left\n\n    <span class=\"token keyword\">if</span> low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">:</span>\n        pivot <span class=\"token operator\">=</span> partition<span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span>\n\n        quick_sort<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> pivot <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        quick_sort<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> pivot <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span></code></pre></div>\n<p>파티션 함수를 로무토 파티션 계획 방법으로 구현하면 위 코드와 같다. 맨 오른쪽 피벗으로 정하고, 피벗을 기준으로 정렬과 상관없이 단순히 피벗보다 작은 수와, 큰 수들로 배열을 나눈다.</p>\n<p>for문으로 파티션 함수에 들어온 배열을 순회하면서 right 포인터 값이 피벗보다 작다면 left 포인터 값과 스왑하는 형태이다. 이 부분은 코드나 설명을 읽기보다 아래와 같이 직접 포인터를 이동시켜보면 보다 쉽게 이해가 가능하다.</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/8949c50b-8955-4e5e-8573-af3a9c0d54d5/image.jpeg\" alt=\"\"></p>\n<p>그림에서 보듯이 오른쪽 right 포인터가 이동하면서 피벗의 값이 오른쪽 값보다 더 클 때, 왼쪽과 오른쪽의 스왑이 진행된다. 스왑 이후에는 왼쪽 left 포인터가 함께 이동 한다.</p>\n<p>퀵 정렬의 평균 시간 복잡도는 O(n log n)으 빠르다. 하지만 최악의 경우, 예들들어 이미 정렬된 배열이 입력값으로 들어온다면 O(n^2)이 된다. 항상 일정한 성능을 보이는 병합 정렬과 달리, 퀵 정렬은 이처럼 입력값에 따라 성능 편차가 심한 편이다.</p>","frontmatter":{"date":"April 15, 2022","title":"Algorithm[퀵 정렬]","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/algo-quick-sort/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-53/","nextSlug":"/leetcode-15/","prevSlug":"/algo-quick-sort/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}