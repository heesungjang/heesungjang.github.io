{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-322-coin-change/",
    "result": {"data":{"cur":{"id":"217e2f95-fe59-5186-87e4-f64158def2c8","html":"<p>문제: <a href=\"https://leetcode.com/problems/coin-change/submissions/\">leetcode - 322</a> (Binary Search)</p>\n<p>You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.</p>\n<p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p>\n<p>You may assume that you have an infinite number of each kind of coin.</p>\n<p>어느 파이썬 알고리즘 책에서는 해당 문제를 소개하면서 “거스름돈” 문제를 대표적인 그리디 알고리즘이라고 설명한다. 맞다. 그치만 반만 맞다. 그리디하게 해당 문제를 풀어보면 가장 큰 화폐 단위부터 거슬러 준다면 최적의(가장 적은 동전으로) 거스름돈을 찾을 수 있을 것 같다. leetcode에 같은 문제가 있어서 직접 풀어본 결과, 그리디하게 접근하면 해당 문제를 풀 수 없었다.</p>\n<h3 id=\"1️⃣-문제풀이1greedy\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B41greedy\" aria-label=\"1️⃣ 문제풀이1greedy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제풀이1(greedy):</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">coin_change</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    coins<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> coin <span class=\"token keyword\">in</span> coins<span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">+=</span> amount <span class=\"token operator\">//</span> coin\n        amount <span class=\"token operator\">%=</span> coin\n\n    <span class=\"token keyword\">return</span> count</code></pre></div>\n<p>대부분에 경우 위에 그리디 문제풀이로 정답을 찾을 수 있다.</p>\n<p>👉 Example 1: coins = [1,2,5], amount = 11</p>\n<ol>\n<li>주어진 코인 배열을 오름차순으로 정렬한다.\n<ul>\n<li>coins = [5, 2, 1]</li>\n</ul>\n</li>\n<li>가장 큰 화폐부터 해당 화폐가 amount값에 몇번 들어가는지 구한다.\n<ul>\n<li>11 = (5*5)+1 —> 11 // 5 = 2</li>\n<li>count = 2(5화폐 2개)</li>\n</ul>\n</li>\n<li>남은 amount 값 작은 화폐로 채운다\n<ul>\n<li>1 = (1*1) —> 1 //1 = 1</li>\n<li>count = 2(5화폐 2개) + 1(1화폐 1개)</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"but\" style=\"position:relative;\"><a href=\"#but\" aria-label=\"but permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BUT</h5>\n<h4 id=\"but-1\" style=\"position:relative;\"><a href=\"#but-1\" aria-label=\"but 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BUT</h4>\n<h3 id=\"but-2\" style=\"position:relative;\"><a href=\"#but-2\" aria-label=\"but 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BUT</h3>\n<p>주어진 화폐들이 [9,6,5,1]인 경우를 생각해보자.\n👉 Eample 2: coins=[9,6,5,1], amount=11.</p>\n<ol>\n<li>가장 큰 9를 빼면 11-9 = 2가 남는다.</li>\n<li>남은 2는 두개의 1로 거슬러줄 수 있다.</li>\n</ol>\n<p>최종적으로 3개의 coin이 필요하다 (‘9’ 1개 + ‘1’ 2개).</p>\n<p>가장 적은 coin을 사용한 거스름돈이 맞나? 아니다 ❌.</p>\n<p>이 상황에서 가정 적게 필요한 동전의 수는 2이다 (5 + 6 = 11).</p>\n<h3 id=\"2️⃣-문제풀이2dp\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B42dp\" aria-label=\"2️⃣ 문제풀이2dp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 문제풀이2(dp):</h3>\n<p>여러 문제 풀이를 찾아봤다. ‘다이나믹 프로그래밍’ 풀이가 가장 많았다. 코드 자체는 크게 어렵지 않았지만 해당 풀이을 도출하는 thought processing이 결코 쉽지않아 보인다.</p>\n<p>다이나믹 프로그래밍으로 문제를 접근할때 아래와 순서로 접근할 수 있다:</p>\n<ol>\n<li>recursive brute force solution</li>\n<li>recursive solution with memo</li>\n<li>recursive dynamic programming solution</li>\n</ol>\n<p>「다이나믹 프로그래밍」에가 가장 중요한 키워드는 검색(search)과 기억(memo)이다. “검색” 문제에 대해서는 “재귀 트리” 분석을 먼저 그려야 한다. (<a href=\"https://www.youtube.com/watch?v=H9bfqozjoqs\">참고영상</a>)</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/43e6fbaa-e28e-4504-900f-369196af9c5c/KakaoTalk_Photo_2022-03-28-16-40-47.jpeg\" alt=\"\"></p>\n<p>재귀 트리를 살펴보면 하이라이트로 처리한 부분처럼 반복적으로 발생하는 것을 알 수 있다. 이 반복되는 연산을 “momoizied search (메모화된 검색)” 또는 “dp table (dp 테이블)“로 처리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">coin_change_dp</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 0부터 amount까지 포함하는 배열 초기화</span>\n    dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inf\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> amount <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 0원의 만들기 위해서 필요한 코인은 0개</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> coin <span class=\"token keyword\">in</span> coins<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> amount <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> coin <span class=\"token operator\">&lt;=</span> amount<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># if amount = 186</span>\n                <span class=\"token comment\"># dp[amount] = 186  --> dp[186] --> 1</span>\n                <span class=\"token comment\"># min(infinity, dp[186 - coin(186) --> 0 +1 = 1]</span>\n                dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>amount <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inf\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre></div>\n<ol>\n<li>0부터 amount까지 최적의 solution(가장 적은 동전의 조합)을 추적하는 배열을 하나 생성한다.</li>\n<li>해당 배열을 원소들을 무한대로 초기화 한다.</li>\n<li>amount = 0를 위해서 필요한 코인은 0개이다. dp[0]을 0으로 초기화 한다.</li>\n<li>주어진 coin마다 amout에 필요한 coin을 계산한다.</li>\n<li>해당 결과 값이 dp 테이블에 있는지 체크하고, 있다면 min 값을 저장한다.</li>\n</ol>\n<p>dp 테이블을 사용하면서 흥미로운 점은 n(amount)에 대한 해답을 구하려고 할 때마다 n보다 작은 모든 값에 대한 해답을 이미 가지고 있다는 것이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B41greedy\">1️⃣ 문제풀이1(greedy):</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#but\">BUT</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#but-1\">BUT</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#but-2\">BUT</a></p>\n</li>\n<li>\n<p><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B42dp\">2️⃣ 문제풀이2(dp):</a></p>\n</li>\n</ul>\n</div>","excerpt":"문제: leetcode - 322 (Binary Search) You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. 어느 파이썬 알고리즘 책에서는 해당 문제를 소개하면서 “거스름돈” 문제를 대표적인 그리디 알고리즘이라고 설명한다. 맞다. 그치만 반만 맞다. 그리디하게 해당 문제를 풀…","frontmatter":{"date":"March 28, 2022","title":"leetcode(322)- Coin change","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-322-coin-change/"}},"next":{"id":"6d14107f-a50c-5014-8973-a77d2adaaced","html":"<p>개발자 커뮤니티에서 깃헙을 통해서 오픈소스에 기여하는 사람들을 보면서 “나도 나중에 한번 해보고싶다”라는 막연한 생각을 가지고 있었다. 생각만 가지고 있었다. 막상 시작하려고 하면 어디서부터 어떻게 시작해야 하는지 감이 잡히지 않았다. 요즘들어 취업 공고를 보면 신입 개발자 채용 공고에도 오픈소스에 기여한 경험이 있는 개발자를 우대한다는 글귀를 쉽게 찾아볼 수 있다. <strong>그래서 이번에 정리해보려 한다.</strong> 내가 그럴 실력이 되는지 모르겠지만 일단 어떤식으로 시작해야 하는지 정리가 필요할 것 같다.</p>\n<h3 id=\"-오픈소스-참여로-얻는것\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EC%B0%B8%EC%97%AC%EB%A1%9C-%EC%96%BB%EB%8A%94%EA%B2%83\" aria-label=\" 오픈소스 참여로 얻는것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👉 오픈소스 참여로 얻는것</h3>\n<h4 id=\"1️⃣-소프트웨어-개선\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EC%84%A0\" aria-label=\"1️⃣ 소프트웨어 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 소프트웨어 개선:</h4>\n<p>사용 중인 오픈소스의 버그를 직접 수정하거나 새로운 기능을 추가하면 소프트웨어가 개선될 뿐만 아니라 이 소프트웨어를 사용하는 모두에게 혜택을 제공할 수 있다. 특히 내가 사용하고 애정을 가지고 있는 라이브러리의 오픈소스 개발에 직접 참여하여 해당 프로젝트를 개선하고 더 좋은 방향으로 나아가는데 기여할 수 있다면 그보다 좋은 경험이 없을 것이다.</p>\n<h4 id=\"2️⃣-자기-계발\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EC%9E%90%EA%B8%B0-%EA%B3%84%EB%B0%9C\" aria-label=\"2️⃣ 자기 계발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 자기 계발:</h4>\n<p>자기 실력을 키운다. 오픈소스 프로젝트에 기여하면서 코딩, UI, 그래픽 디자인, 문서 작성 등의 실무를 배울 수 있다. 많은 개발자들이 함께 작업하는 프로젝트의 코드 베이스가 어떻게 구성되어 있는지 또는 이슈들이 발생했을때 어떤 방법으로 해결 하는지 직접 보고 느끼면서 큰 규모에 프로젝트를 직간접적으로 경험할 수 있는 방법이며 실력있는 프로젝트 maintainer들에게 코드리뷰를 받으면 내 코드를 개선할 수 있는 좋은 기회가 될수도 있다.</p>\n<h4 id=\"3️⃣-네트워크\" style=\"position:relative;\"><a href=\"#3%EF%B8%8F%E2%83%A3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC\" aria-label=\"3️⃣ 네트워크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3️⃣ 네트워크:</h4>\n<p>새로운 사람을 만난다. 오픈소스 커뮤니티를 통해서 공통 관심사가 있는 개발자들과 소통하고 공유하면서 네트워크를 키워나가는 좋은 방법이 될 수 있다.</p>\n<h4 id=\"4️⃣-git\" style=\"position:relative;\"><a href=\"#4%EF%B8%8F%E2%83%A3-git\" aria-label=\"4️⃣ git permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4️⃣ Git:</h4>\n<p>git 실력을 향상 할 수 있다.</p>\n<p>자, 여기까지가 누구나 알고 있을 오픈소스를 시작해야 하는 이유이다.</p>\n<h3 id=\"-오픈소스-프로젝트-찾기\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%B0%BE%EA%B8%B0\" aria-label=\" 오픈소스 프로젝트 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔎 오픈소스 프로젝트 찾기</h3>\n<p>오픈소스에 참여하려면 당연히 프로젝트를 먼저 찾아야한다.</p>\n<ul>\n<li><a href=\"https://www.firsttimersonly.com/\">firsttimersonly</a></li>\n<li><a href=\"https://github.com/MunGell/awesome-for-beginners#javascript\">awesome-for-beginners</a></li>\n<li><a href=\"https://goodfirstissues.com/\">goodfirstissues</a></li>\n<li><a href=\"https://goodfirstissue.dev/\">goodfirstissue</a></li>\n</ul>\n<p>초보자가 시작하기에 좋은 issue들을 모아놓은 저장소들이다. 정말 처음 들어보는 프로젝트부터 우리가 잘 알고있는 EsLint, Babel, webpack과 같은 큰 프로젝트들도 리스트에 찾아볼 수 있다. 4곳 모두 사용하기 편하고 쉽게 beginner friendly 오픈소스를 찾을 수 있지만 개인적으로 goodfirstissue.dev의 UI/UX가 가장 좋아 보인다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/e07ac8b5-bec5-483a-a4b4-6d3a5ee00bce/Group%208.png\" alt=\"\"></p>\n<p>왼쪽에 탭에서 본인이 희망하는 프로그래밍 언어로 필터가 프로젝트 필터가 가능하다. 타입스크립트를 포함하면 역시 자바스크립트가 가장 많다. 제일 처음 GoogleChrome 프로젝트가 눈에 들어와서 들어가봤다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/9a68b3bd-c57d-4510-9d55-3b69f54e5b7f/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2012.13.14.png\" alt=\"\"></p>\n<p>해당 이슈 테이블 우측탭을 보면 “Good First Issue”라고 적혀있다. 하지만 open source 첫 기여로 괜찮은 이슈라는 것이지 쉽다는 말은 아닌거 같아서 일단 pass.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/20651fd5-06dd-444e-82a9-87a620f993aa/Group%208.png\" alt=\"\"></p>\n<p>이번에는 awesome-for-beginners 깃헙 저장소에서 둘러봤다. 이번에는 good-beginner라는 label들이 보인다. 자바스크립트에서 pdf 파일을 랜더링하는 라이브러리가 흥미로워 보인다. 들어가보자 🤞.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/ab71f1d9-62e7-42ad-a0e6-0607a2a36d58/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2012.31.01.png\" alt=\"\"></p>\n<p>이슈 생성자가 이슈를 간력하게 설명해 놓았다. 아래 댓글들을 보면 이슈 해결에 참여하고 싶은 사람들이 궁금한 점이나 추가로 필요한 정보들을 물어보고 maintainer들 또는 이슈 생성자가 댓글에 답변을 달아주는 것을 볼 수 있다.</p>\n<p>❗️ 오픈소스에 막 참여하는 사람이라면 주의가 필요할 것 같다.</p>\n<p>해당 이슈를 해결할 수 있을것 같아도 되도록이면 issue를 통해서 maintainer 또는 issue 생성자와 먼저 소통을 하는게 중요할 것 같다 (현재 해당 이슈의 문제가 얼만큼 해결되었느지, 다른 사람이 이미 이슈 해결을 마치고 있는지 등).</p>\n<h3 id=\"-lets-get-started\" style=\"position:relative;\"><a href=\"#-lets-get-started\" aria-label=\" lets get started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚀 LET’S GET STARTED</h3>\n<ol>\n<li>\n<p>원하는 오픈소스 프로젝트의 이슈를 찾았다면 나의 깃허브 저장소로 fork한다.\n<img src=\"https://images.velog.io/images/heesungj7/post/0ed3789d-ed9d-4976-8aec-c51c8d84e2ca/Group%208.png\" alt=\"\"></p>\n</li>\n<li>\n<p>fork한 프로젝트를 로컬에 클론한다.\n<img src=\"https://images.velog.io/images/heesungj7/post/d4ab5a27-897c-44fd-8c5c-665591875fb0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2012.42.53.png\" alt=\"\"></p>\n</li>\n<li>\n<p>issue 해결을 위한 브랜치를 생성한다. 이때 되도록이면 해당 브랜치명을 issue와 관련되 이름으로 짓는것이 좋다.\n<img src=\"https://images.velog.io/images/heesungj7/post/eb86296c-fa51-41bf-808b-dc3a4765325b/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2012.44.36.png\" alt=\"\"></p>\n</li>\n<li>\n<p>이슈를 해결한다.\n<img src=\"https://media1.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif\" alt=\"\"></p>\n</li>\n<li>\n<p>Pull Request\n<img src=\"https://images.velog.io/images/heesungj7/post/d70403c9-8ca6-4070-a953-57235e150571/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-03-26%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2012.52.11.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>일단 정리는 여기까지 하겠다. 사실 실제로 오픈소스에 참여하지 않고 방법만 정리하다 보니 부족한 부분이 많은 포스팅이다. 시간적으로 여유가 생길때마다 오픈소스 작업에 참여해 보려고 한다. 첫 contribution이 생기면 다시 돌아와서 추가적으 내용을 보강해야겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EC%B0%B8%EC%97%AC%EB%A1%9C-%EC%96%BB%EB%8A%94%EA%B2%83\">👉 오픈소스 참여로 얻는것</a></p>\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EC%84%A0\">1️⃣ 소프트웨어 개선:</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-%EC%9E%90%EA%B8%B0-%EA%B3%84%EB%B0%9C\">2️⃣ 자기 계발:</a></li>\n<li><a href=\"#3%EF%B8%8F%E2%83%A3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC\">3️⃣ 네트워크:</a></li>\n<li><a href=\"#4%EF%B8%8F%E2%83%A3-git\">4️⃣ Git:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%B0%BE%EA%B8%B0\">🔎 오픈소스 프로젝트 찾기</a></p>\n</li>\n<li>\n<p><a href=\"#-lets-get-started\">🚀 LET’S GET STARTED</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 26, 2022","title":"오픈소스 시작하기","categories":"etc","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/etc-open-source/"}},"prev":{"id":"2b9832da-cb9c-5a82-a5a2-934fa732b495","html":"<p>문제: <a href=\"https://leetcode.com/problems/number-of-islands/submissions/\">leetcode - 200</a> (Number of Islands)</p>\n<p>Given an m x n 2D binary grid grid which represents a map of ‘1’s (land) and ‘0’s (water), return the number of islands.</p>\n<p>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n<p>섬의 개수 문제는 DFS 알고리즘의 기본 문제이다. 2x2 형태의 배열 맵이 주어진다. 시작점(루트노트)가 없고 (y,x) 위치에 한 노드는 “1”(섬) 또는 “0” 바다를 나타낸다.</p>\n<h3 id=\"1️⃣-문제풀이\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"1️⃣ 문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 문제풀이:</h3>\n<ol>\n<li>특정 노드에 방문했을 때 해당 노드가 ‘1’이면 방문처리(visited)를 한다.</li>\n<li>해당 노드의 상, 하, 좌, 우를 근접 노드의 값이 “1”라면 재귀적으로 dfs 탐색을 한다.</li>\n<li>한번의 dfs 재귀 사이클이 끝나면 해당 노드와 근접 노드들이 모두 “0” 값으로 변경되고 count 값을 1 올려준다.\n(count = dfs cycle = 섬의 수)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numIslands</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># count for dfs = island</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n                    count <span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> count\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token comment\"># 상하좌우 이동</span>\n        dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> r <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> r <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> c <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>\n\n        grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">1️⃣ 문제풀이:</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 31, 2022","title":"leetcode(200)- Number of Islands","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-200/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-322-coin-change/","nextSlug":"/etc-open-source/","prevSlug":"/leetcode-200/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}