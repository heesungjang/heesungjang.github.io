{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/leetcode-17/",
    "result": {"data":{"cur":{"id":"d24cfc06-0f1c-5edd-a57c-7b66ef03226e","html":"<p>문제:<a href=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/submissions/\">leetcode-17</a>(Letter Combinations of a Phone Number)</p>\n<p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Input<span class=\"token punctuation\">:</span> digits <span class=\"token operator\">=</span> <span class=\"token string\">\"23\"</span>\nOutput<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ad\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ae\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"af\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bd\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"be\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bf\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cd\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ce\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cf\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>2에서 9까지 숫자가 주어졌을 때 전화 번호로 조합 가능한 모든 문자를 출력하는 문제이다. 대표적인 백트래킹 문제이다.</p>\n<p>코드가 짧고 문제를 이해하는데 크게 어려움이 없어서 구현도 쉬울것으로 예상했지만 여러가지 답안지를 보고 이해하는데도 오랜 시간이 걸렸다.</p>\n<p>일단 문제 접근 방식은 아래와 같다.</p>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/849754c7-3dd8-47ea-a165-c78e56ff9e5b/image.png\" alt=\"\"></p>\n<h3 id=\"문제풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제풀이:</h3>\n<ol>\n<li>위 그림과 같이 dfs로 전체를 탐색한 후 끝까지 탐색이 완료되면 백트래킹 하는 방식이다.</li>\n<li>재귀 호출을 할 때 cur_str에 현재 탐색중인 문자열을 붙여주고 leaf 노드에 도달하면 global result에 값을 반환하고 백트래킹하는 방식이다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t        <span class=\"token comment\"># 지금까지 붙여온 path 문자열의 길이와 digits의 길이가</span>\n            <span class=\"token comment\"># 같다면 즉, 탐색이 끝났으면 결과에 추가시킨뒤에 내부 함수를 종료 시킨다.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    dfs<span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> digits<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">}</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        dfs<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<p>i, j 및 dfs 함수를 순서대로 따라가면 이런식으로 백트래킹 됨을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">i <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ad<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ae<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> af<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> bd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> be<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> bf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bf'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> cd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cd'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ce<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ce'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> cf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'ad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ae'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'af'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ce'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cf'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span>\n\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\ni <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span> dfs<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"헷갈렸던-부분\" style=\"position:relative;\"><a href=\"#%ED%97%B7%EA%B0%88%EB%A0%B8%EB%8D%98-%EB%B6%80%EB%B6%84\" aria-label=\"헷갈렸던 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헷갈렸던 부분:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">👉 맨 처음 i가 0일 때의 모든 재귀가 끝나고 i가 1일 때 즉,\n\n1. 위 쪽 결과에서 맨밑 3줄에 해당하는 지점에서는 dfs가 호출되고\n2. range(2, 2) 아래와 같이 for문의 범위에 해당하는 값이 없어서 아무것도 수행되지 않고 끝나게 된다.\n\ni : 1, j: d, dfs(2, d)\ni : 1, j: e, dfs(2, e)\ni : 1, j: f, dfs(2, f)</code></pre></div>\n<p>코드만 보고는 첫번째 outer for문이 종료되고 i가 1일때 시작되는 탐색이 어떻게 진행되는지 이해하기 어려웠다. 결국 차근차근 코드를 써가면서 확인하면 위와같이 i가 1로 시작하는 범위에는 아무런 탐색없이 반복문이 종료된다.</p>\n<p>⭐️ 생각을 해보면 어차피 첫번째로 입력된 번호(위 예제에서는 “2”)의 문자들로 dfs 탐색을 하게되면 모든 조합이 나오고 두번째 번호(위 예제에서는 “3”)으로 다시 탐색을 하게되면 결국 문자의 순서만 바뀐 duplicated 조합이 다시 만들어진다.</p>\n<p>그렇다면 어차피 첫번째 번호의 문자들로만 dfs 탐색을 하기 때문에 아래와 같이 코드를 수정해봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> cur_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 종료 조건</span>\n            <span class=\"token comment\"># 현재 조합한 letters가 입력된 번호와 길이가 같다면 더 이상 탐색 x</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cur_str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cur_str<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n\n       ❗️❗️ letters <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n       ❗️❗️ <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span>\n               dfs<span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cur_str <span class=\"token operator\">+</span> char<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\"># 입력된 번호가 없나면 빈 배열 출력</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> digits<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># number to letters maping</span>\n        dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">}</span>\n\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># dfs 탐색 시작</span>\n        dfs<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># dfs 탐색 종료</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<p>❗️❗️로 표시한 부분을 보면 일단 2중 for문이 사라져서 기존 답안 코드보다 지관적이고</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">i : 1, j: d, dfs(2, d)\ni : 1, j: e, dfs(2, e)\ni : 1, j: f, dfs(2, f)</code></pre></div>\n<p>위와 같은 필요 없는 연산또한 실행하지 않는다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\">문제풀이:</a></li>\n<li><a href=\"#%ED%97%B7%EA%B0%88%EB%A0%B8%EB%8D%98-%EB%B6%80%EB%B6%84\">헷갈렸던 부분:</a></li>\n</ul>\n</div>","excerpt":"문제:leetcode-17(Letter Combinations of a Phone Number) Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. 2에서 9까지 숫자가 주어졌을 때 전화 번호로 조합 가능한 모든 문자를 출력하는 문제이다. 대표적인 백트래킹 문제이다. 코드가 짧고 문제를 이해하는데 크게 어려움이 없어서 구현도 쉬울것으로 예상했지만 여러가지 답안지를 보고 이해하는데도 오랜 시간이 걸렸다. 일단 문제 접근 방식은 아래와 같다…","frontmatter":{"date":"April 23, 2022","title":"leetcode(17)- Letter Combinations of a Phone Number","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-17/"}},"next":{"id":"2b9832da-cb9c-5a82-a5a2-934fa732b495","html":"<p>문제:<a href=\"https://leetcode.com/problems/number-of-islands/\">leetcode-200</a>(Number of Islands)</p>\n<p>Given an m x n 2D binary grid grid which represents a map of ‘1’s (land) and ‘0’s (water), return the number of islands.</p>\n<p>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Input<span class=\"token punctuation\">:</span> grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span> Output<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre></div>\n<p>1을 섬으로, 0을 물로 가정한 2D 그리드 맵이 주어졌을 때, 섬의 개수를 계산하는 문제이다. 1로 표시된 섬은 서로 <strong>인접 노드로 연결되어 있다면 하나의 섬으로 처리</strong>해야 한다.</p>\n<h3 id=\"풀이-접근\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%A0%91%EA%B7%BC\" aria-label=\"풀이 접근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👉풀이 접근:</h3>\n<ol>\n<li>행열 2D 그리드에서 섬은 “1”로 표기되어 있다. 행열을 순회하면서 방문한 위치의 표기가 “1”이라면 섬의 개수를 1 증가하면 그리드에 모든 섬의 개수를 쉽게 구할 수 있다.</li>\n<li>❗️ 단, 1들이 하나의 덩어리로 즉, 여러개의 섬들이 연결되어 있다면 하나의 섬으로 처리해야 한다.\n<ul>\n<li>입력값이 정확히 그래프는 아니지만 아래 그림과 같이 행열에서 동서남북으로 연결된 섬들을 그래프로 가정하고 dfs 탐색을 하면 연결된 모든 섬을 방문할 수 있다.</li>\n<li>이때 방문한 섬들을 “0”으로 처리하고 dfs 탐색이 끝났을 때 섬의 개수를 1 증가해주면 하나의 덩어리로 존재하는 섬을 처리할 수 있다.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://velog.velcdn.com/images/heesungj7/post/bf0b6b9f-4215-4c72-ac3d-576120933335/image.png\" alt=\"\"></p>\n<p>풀이 접근 방법만 잘 정리하면 구현 자체는 어렵지 않은 문제이다. dfs 탐색은 stack 또는 재귀 콜스택으로 처리가 가능하다.</p>\n<h3 id=\"stack-풀이\" style=\"position:relative;\"><a href=\"#stack-%ED%92%80%EC%9D%B4\" aria-label=\"stack 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stack 풀이:</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">num_island</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># dfs 탐색에서 상하좌우 이동 할 자표 필요함</span>\n    dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 섬의 개수 카운트</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token comment\"># rows, columns로 행열 만들고 반복문으로 순회</span>\n    rows<span class=\"token punctuation\">,</span> columns <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> column <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\"># 방문한 노드가 섬이 아니라면 스킵</span>\n            <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># 섬의 방문하면 섬 카운트 1 증가</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token comment\"># 스택에 넣고 dfs 탐색 시작</span>\n            stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n                x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 방문 처리</span>\n                grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span>\n\n                <span class=\"token comment\"># 상하좌우 노드 dfs 탐색</span>\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n                    <span class=\"token keyword\">if</span> nx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> nx <span class=\"token operator\">>=</span> rows <span class=\"token keyword\">or</span> ny <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> ny <span class=\"token operator\">>=</span> columns <span class=\"token keyword\">or</span> grid<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">continue</span>\n\n                    stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> count</code></pre></div>\n<h3 id=\"재귀-푼제풀이\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EA%B7%80-%ED%91%BC%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"재귀 푼제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재귀 푼제풀이:</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">num_island</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># self. 없이 grid 접근하기 위해서 메인 함수내에 중첩 함수로 dfs 정의</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 재귀 종료 조건</span>\n        <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> x <span class=\"token operator\">>=</span> rows <span class=\"token keyword\">or</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> y <span class=\"token operator\">>=</span> columns <span class=\"token keyword\">or</span> grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>\n\n        <span class=\"token comment\"># 방문 처리</span>\n        grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span>\n\n        <span class=\"token comment\"># 동 서 남 북 탐색</span>\n        dfs<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n        dfs<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n        dfs<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        dfs<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 섬의 갯수</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token comment\"># 행열 생성</span>\n    rows<span class=\"token punctuation\">,</span> columns <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> column <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 방문한 노드가 섬이 아니면 다음 노드로 이동</span>\n            <span class=\"token keyword\">if</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># 방문한 노드가 섬이면 dfs 탐색 시작</span>\n            dfs<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># dfs 탐색이 끝나면 섬 카운트 1 증가</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> count</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%92%80%EC%9D%B4-%EC%A0%91%EA%B7%BC\">👉풀이 접근:</a></li>\n<li><a href=\"#stack-%ED%92%80%EC%9D%B4\">stack 풀이:</a></li>\n<li><a href=\"#%EC%9E%AC%EA%B7%80-%ED%91%BC%EC%A0%9C%ED%92%80%EC%9D%B4\">재귀 푼제풀이:</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 22, 2022","title":"leetcode(200)- Number of Islands","categories":"algorithm","author":"heesung jang","emoji":"✏️"},"fields":{"slug":"/leetcode-200/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/leetcode-17/","nextSlug":"/leetcode-200/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}